@page "/Redirect"
@layout LoginLayout

@using System.Web
@using Newtonsoft.Json
@using System.Globalization;
@using Microsoft.AspNetCore.WebUtilities

@using OrisonCollegePortal.Client.Pages.Loading
@using OrisonCollegePortal.Shared.Entities.General

@inject IJSRuntime IJS
@inject HttpClient http
@inject OrisonCollegePortal.Client.Services.GeneralServices _generalService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject OrisonCollegePortal.Client.Contracts.IUserLoginManager _IUserLoginManager
@inject NavigationManager _NavManager

<LoadingScreen></LoadingScreen>

@code {
    public string? ID, BranchID, Key, Date, DataSource, InitialCatalog, PersistSecurityInfo, UserID, Password;
    DateTime URLDate;
    //List<DtoLoginModel> info = new List<DtoLoginModel>();
    IEnumerable<DtoLoginModel>? info = new List<DtoLoginModel>();
    //DtoLoginModel? info = new DtoLoginModel();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (Date != "" || Date != null)
            {
                var uri = _NavManager.ToAbsoluteUri(_NavManager.Uri);
                var queryStrings = QueryHelpers.ParseQuery(uri.Query);
                if (queryStrings.TryGetValue("Param", out var _Param))
                {
                    _Param = _Param.ToString().Replace(" ", "+");
                    string param = await http.GetStringAsync("API/Encryption/Decrypt?Text=" + _Param.ToString());
                    string[] paramArr = param.Split(new Char[] { '&' });
                    if (paramArr.Length > 0)
                    {
                        Dictionary<String, String> paramKeyVal = paramArr.Select(x => x.Split('=')).ToDictionary(x => x[0], x => x[1]);
                        if (paramKeyVal.TryGetValue("ID", out var _ID) && paramKeyVal.TryGetValue("BranchID", out var _BranchID) && paramKeyVal.TryGetValue("Key", out var _Key) && paramKeyVal.TryGetValue("Date", out var _Date))
                        {
                            ID = _ID;
                            BranchID = _BranchID;
                            Key = _Key;
                            Date = _Date;
                            if (ID != null && BranchID != null && !string.IsNullOrEmpty(Key))
                            {
                                string _key = await http.GetStringAsync("API/Encryption/Encrypt?Text=" + HttpUtility.UrlEncode(Key));

                                if (!string.IsNullOrEmpty(_key))
                                {
                                    await sessionStorage.SetItemAsync("token_key", _key);
                                    info = (await _IUserLoginManager.GetUserData(int.Parse(ID), int.Parse(BranchID)))?.ToList();
                                    //URLDate = DateTime.Parse(Date ?? "", CultureInfo.InvariantCulture);
                                    URLDate = DateTime.Parse(Date!, CultureInfo.InvariantCulture);
                                    DateTime CurrentDate = await _generalService.GetServerDateTime();
                                    if (CurrentDate < URLDate.AddSeconds(60))
                                    {
                                        if (info != null && info.Count() > 0)
                                        {
                                            info!.First().ID = Convert.ToInt32(ID.ToString());
                                            // info.First().BranchID = Convert.ToInt32(BranchID.ToString());
                                            info.First().BranchID = 31;
                                            info.First().Language = await IJS.InvokeAsync<string>("cultureInfo.get");
                                            await SetLoginInfo();
                                            _NavManager.NavigateTo("StudnetRegister");
                                        }
                                    }
                                    else
                                    {
                                        await IJS.InvokeVoidAsync("window.history.back");
                                    }
                                }
                                else
                                {
                                    await IJS.InvokeVoidAsync("window.history.back");
                                }
                            }
                            else
                            {
                                await IJS.InvokeVoidAsync("window.history.back");
                            }
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            await IJS.InvokeVoidAsync("window.history.back");
            Console.WriteLine(ex);
        }
    }
    private async Task SetLoginInfo()
    {
        try
        {
           // string jsonString = JsonConvert.SerializeObject(info);
            string jsonString = JsonConvert.SerializeObject(info?.FirstOrDefault());
            string param = await http.GetStringAsync("API/Encryption/Encrypt?Text=" + jsonString);
            if (!string.IsNullOrEmpty(param))
                await sessionStorage.SetItemAsync("token", param);
        }
        catch (Exception ex)
        {
            await sessionStorage.ClearAsync();
            throw ex;
        }
    }
}