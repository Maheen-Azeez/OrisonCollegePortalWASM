@page "/AdditionalFeeMaster"

@using Newtonsoft.Json;
@using OrisonCollegePortal.Client.Services;
@using OrisonCollegePortal.Shared.Entities.General;
@using OrisonCollegePortal.Shared.Entities.Finance;
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Data;
@using Microsoft.Extensions.Localization
@using System.Net.Http.Json
@using System.Web;

@inject IJSRuntime JsRuntime;
@inject HttpClient Http
@inject ToastService ToastService
@inject OrisonCollegePortal.Client.Contracts.Finance.IAdditionalFeeMaster _IAdditionalFeeMaster
@inject OrisonCollegePortal.Client.Contracts.Finance.IStudentManager StudentService
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject OrisonCollegePortal.Client.Services.UserRightsService _UserRights

@using OrisonCollegePortal.Client.Resources
@inject IStringLocalizer<SfResources> Localizer
<head>
    <link href="css/OrisonSyncfusionStyles.css" rel="stylesheet" />
</head>

@if (AllowOpen == true)
{
    <div class="box-card-shadow">
        <div class="row">
            <div class="col-md-9">
                <SfButton @onclick="@New_Click" Content="@Localizer[@ButtonLabel]" IconCss="Icon add" CssClass="e-btn" Disabled="@btnAddenable" />
                <SfButton @onclick="@Save_Click" Content=@Localizer["Save"] IconCss="Icon save" CssClass="e-btn" Disabled="@btnSaveenable" />
                <SfButton @onclick="@Edit_Click" IconCss="Icon edit" CssClass="e-btn" Content="@Localizer[EditButtonLabel]" Disabled="@btnEditenable" />
                @*<SfButton @onclick="@Delete_Click" IconCss="Icon delete" CssClass="e-outline" Content="Delete" Disabled="@btnDeleteenable" />*@

                <BlazorStrap.BSAlert Color="BlazorStrap.Color.Success" @bind-IsOpen="@IsOpen" AutoHide="true" AutoHideDelay="10000">
                    @Success
                </BlazorStrap.BSAlert>
                <BlazorStrap.BSAlert Color="BlazorStrap.Color.Danger" @bind-IsOpen="@IsOpenDanger" AutoHide="true" AutoHideDelay="10000">
                    @Failed
                </BlazorStrap.BSAlert>
            </div>
            <div class="col-md-3">
                <div class="header-div-style">
                    <label class="header-label">@Localizer["ADDITIONAL FEE MASTER"] </label>
                </div>
            </div>
        </div>
    </div>
    <div class="box-card-shadow">
        <div class="row">
            <div class="col-md-3">
                <label class="label">@Localizer["Code"]</label>
                <SfTextBox CssClass="textbox" @bind-Value="@DTFeeMaster.Code" Enabled="@de1"></SfTextBox>
            </div>
            <div class="col-md-6">
                <label class="label">@Localizer["Description"]</label>
                <SfTextBox CssClass="textbox" @bind-Value="@DTFeeMaster.Description" Enabled="@de2"></SfTextBox>
            </div>
            <div class="col-md-3">
                <label class="label">@Localizer["Academic Year"]</label>
                <SfComboBox TValue="string" TItem="SchoolAcademicYear" Placeholder="" @bind-Value="@DTFeeMaster.AcademicYear" DataSource="@CmbYear" Enabled="@de3">
                    <ComboBoxFieldSettings Text="AcademicYear" Value="AcademicYear"></ComboBoxFieldSettings>
                </SfComboBox>
            </div>
        </div>
        <div class="row">
            <div class="col-md-3">
                <label class="label">@Localizer["Priority No"]</label>
                <SfNumericTextBox CssClass="textbox" @bind-Value="@DTFeeMaster.PriorityNo" Enabled="@de4"></SfNumericTextBox>
            </div>
            <div class="col-md-3">
                <label class="label">@Localizer["Amount"]</label>
                <SfNumericTextBox CssClass="textbox" @bind-Value="@DTFeeMaster.Amount" Enabled="@de5"></SfNumericTextBox>
            </div>
            <div class="col-md-6">
                <label class="label">@Localizer["Post To"]</label>
                <div class="w-100" style="display: flex;">
                    <SfTextBox @bind-Value="@DTFeeMaster.AccountCode" CssClass="textbox" Width="20%" Enabled="@de6"></SfTextBox>
                    <SfComboBox TValue="string" TItem="Accounts" @bind-Value="@DTFeeMaster.AccountName" DataSource="@PostTo" @ref="SfPostToObj" CssClass="e-multi-column" Enabled="@de7"
                                AllowFiltering="true" PopupHeight="200" PopupWidth="600"
                                EnableVirtualization="true" AllowCustom="false">
                        <ComboBoxTemplates TItem="Accounts">
                            <HeaderTemplate>
                                @*<table class="comboTable"><tr><th>Code</th><th>Name</th><th>ID</th><th>AccCategory</th></tr></table>*@
                                <div class="row">
                                    <div class="col-md-3 " style="width:100px">@Localizer["Code"]</div>
                                    <div class="col-md-4 " style="width:450px">@Localizer["Name"]</div>
                                    <div class="col-md-2 " style="width:450px">@Localizer["ID"]</div>
                                    <div class="col-md-3 " style="width:180px">@Localizer["AccCategory"]</div>
                                </div>
                            </HeaderTemplate>
                            <ItemTemplate Context="FeeMasterContext">
                                @*<table class="comboTable"><tbody><tr><td>@((FeeMasterContext as Accounts).AccountCode)</td><td>@((FeeMasterContext as Accounts).AccountName)</td><td>@((FeeMasterContext as Accounts).Id)</td><td>@((FeeMasterContext as Accounts).AccCategory)</td></tr> </tbody></table>*@
                                <div class="row">
                                    <div class="col-md-3 column-header" style="width:100px">@((FeeMasterContext as Accounts).AccountCode)</div>
                                    <div class="col-md-4 column-header" style="width:450px">
                                        <div class="item-name-wrapper" title="@((FeeMasterContext as Accounts).AccountName)">@((FeeMasterContext as Accounts).AccountName)</div>
                                    </div>
                                    <div class="col-md-2 column-header" style="width:180px">
                                        @((FeeMasterContext as Accounts).Id)
                                    </div>
                                    <div class="col-md-3 column-header" style="width:180px">
                                        @((FeeMasterContext as Accounts).AccCategory)
                                    </div>
                                </div>
                            </ItemTemplate>
                        </ComboBoxTemplates>
                        <ComboBoxFieldSettings Text="AccountCode" Value="AccountCode"></ComboBoxFieldSettings>
                        <ComboBoxFieldSettings Text="AccountName" Value="AccountName"></ComboBoxFieldSettings>
                        <ComboBoxEvents TValue="string" TItem="Accounts" ValueChange="@SelectedNameChanged" Filtering="@OnPostToFiltering"></ComboBoxEvents>
                    </SfComboBox>
                </div>
            </div>
        </div>
        <div class="row">
            @*<div class="col-md-4">
        <label class="label">Receipt</label>
        <SfComboBox TValue="string" TItem="VtypeTrans" @bind-Value="@DTFeeMaster.ReceiptType" DataSource="@Receipt" Enabled="@de8">
        <ComboBoxFieldSettings Text="Title" Value="Title"></ComboBoxFieldSettings>
        </SfComboBox>
        </div>*@
            <div class="col-md-3">
                <label class="label">@Localizer["Tax Code"]</label>
                <SfComboBox DataSource="@TaxCode" TValue="string" TItem="string" @bind-Value="@DTFeeMaster.Taxcode" Enabled="@de9"></SfComboBox>
            </div>
            <div class="col-md-3">
                <label class="label">@Localizer["VAT %"]</label>
                <SfTextBox CssClass="textbox" @bind-Value="@DTFeeMaster.VatPercent" Enabled="@de10" @onkeypress="@(e=>KeyPress(e))"></SfTextBox>
            </div>
            <div class="col-md-3" style="padding-top:22px">
                <SfCheckBox @bind-Checked="@DTFeeMaster.VatApplicable" Label=@Localizer["VAT Applicable"] Disabled="EVatApplicable"></SfCheckBox>
            </div>
            <div class="col-md-3" style="padding-top:22px">
                <SfCheckBox @bind-Checked="@DTFeeMaster.VatInclusive" Label=@Localizer["VAT Inclusive"] Disabled="EVatInclusive"></SfCheckBox>
            </div>
        </div>
        <div class="row">
        </div>
    </div>
    <div class="box-card-shadow">
        <SfTextBox @ref="search" Input="OnInput" Placeholder=@Localizer["Global Search"] Width="200px" ShowClearButton="true" CssClass="e-btn2" ValueChange="OnSearch" Created="@onCreateSearch"></SfTextBox>

        <div class="table-responsive" style="position: relative;padding-top:10px; min-width: 300px ">
            <SfGrid DataSource="@AdditionalFeeList" ID="AdditionalFeeLists" @ref="AdditionalFeeLists"
                    GridLines="GridLine.Both"
                    AllowFiltering="true"
                    AllowPaging="true"
                    AllowExcelExport="true"
                    AllowPdfExport="true"
                    Width="100%"
                    ShowColumnChooser="true"
                    AllowResizing="true"
                    AllowSorting="true"
                    EnableAltRow="true"
                    RowHeight="25">
                <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
                <GridPageSettings PageSize="50"></GridPageSettings>
                <GridEditSettings AllowDeleting="true" />
                <GridSelectionSettings Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                <GridColumns>
                    <GridColumn HeaderText=@Localizer["SlNo"] Width="50" Context="context1">
                        <Template>
                            @{
                                var con = (context1 as SchoolFeeMaster);
                                var Index = GetRowCounter(con!.Id);
                            }
                            <span>@(Index.Result)</span>
                        </Template>
                    </GridColumn>

                    <GridColumn Field=@nameof(SchoolFeeMaster.Id) HeaderText=@Localizer["ID"] Width="120" IsPrimaryKey="true" Visible="false"></GridColumn>
                    <GridColumn Field=@nameof(SchoolFeeMaster.Code) HeaderText=@Localizer["Code"] Width="120"></GridColumn>
                    <GridColumn Field=@nameof(SchoolFeeMaster.Description) HeaderText=@Localizer["Description"] Width="100"></GridColumn>
                    <GridColumn Field=@nameof(SchoolFeeMaster.PostTo) HeaderText=@Localizer["Post To"] Width="100"></GridColumn>
                    <GridColumn Field=@nameof(SchoolFeeMaster.AccountName) HeaderText=@Localizer["Account Name"] Width="100"></GridColumn>
                    <GridColumn Field=@nameof(SchoolFeeMaster.PriorityNo) HeaderText=@Localizer["Priority No"] Width="120"></GridColumn>
                    <GridColumn Field=@nameof(SchoolFeeMaster.Amount) HeaderText=@Localizer["Amount"] Width="120" Format="0.00"></GridColumn>
                    <GridColumn Field=@nameof(SchoolFeeMaster.Taxcode) HeaderText=@Localizer["Tax Code"] Width="120"></GridColumn>

                    <GridColumn Width="40px" HeaderText=@Localizer["Show"]>
                        <Template Context="FeeContext">
                            @{
                                var ID = (FeeContext as SchoolFeeMaster)!.Id;
                                <a @onclick="@(() => { return OnEdit(ID); })"><img src="Images/View.png" style="height:20px;width:20px; cursor:pointer;" /></a>
                            }
                        </Template>
                    </GridColumn>
                    <GridColumn Width="40px" HeaderText=@Localizer["Delete"]>
                        <Template Context="MasterContext">
                            @{
                                var ID = (MasterContext as SchoolFeeMaster)!.Id;
                                <a @onclick="@(() => { return Delete_Click(ID); })"><img src="Images/delete-big.png" style="height:20px;width:20px; cursor:pointer;" /></a>
                            }
                        </Template>
                    </GridColumn>
                </GridColumns>
            </SfGrid>

        </div>
    </div>
    <div>
        <SfDialog Width="400" Height="220" IsModal="true" @bind-Visible="PopupError" CloseOnEscape="true">
            <DialogTemplates>
                <Header>
                </Header>
                <Content>
                    <div style="text-align:center;">
                        <div style="font-size: medium; color: #842029;">
                            @Failed!
                        </div>
                    </div>
                    <div style="text-align:center;">
                        <div style="font-size: medium; color: #842029;">
                            "Please check and try again !!!"
                        </div>
                    </div>
                </Content>
            </DialogTemplates>
            <DialogButtons>
                <DialogButton Content="OK" @onclick="@(() => PopupError = false)" />
            </DialogButtons>
            <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
        </SfDialog>

    </div>
}
else
{
    <div class="container-fluid p-0" style="padding-right:0px">
        <div class="form-row">
            <div class="col-md-12">
                <BlazorStrap.BSAlert Color=" BlazorStrap.Color.Danger" @bind-IsOpen="@Open">
                    Permission Denied
                </BlazorStrap.BSAlert>
            </div>
        </div>
    </div>

}

@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }

    int? BranchID, user;
    public string? Category, Success, Failed;
    bool AllowOpen = true, Open, OpenError, visible = false;
    public string? ButtonLabel, EditButtonLabel, mode, FeeID, AcademicYear;
    public bool IsOpen = false, IsOpenDanger = false;

    public bool btnAddenable { get; set; }
    public bool btnSaveenable { get; set; }
    public bool btnEditenable { get; set; }
    public bool btnDeleteenable { get; set; }

    public bool de1 { get; set; }
    public bool de2 { get; set; }
    public bool de3 { get; set; }
    public bool de4 { get; set; }
    public bool de5 { get; set; }
    public bool de6 { get; set; }
    public bool de7 { get; set; }
    public bool de8 { get; set; }
    public bool de9 { get; set; }
    public bool de10 { get; set; }
    public bool EVatApplicable { get; set; }
    public bool EVatInclusive { get; set; }

    bool PopupError { get; set; }

    UserRights objUserRight = new UserRights();
    public List<SchoolAcademicYear> CmbYear = new List<SchoolAcademicYear>();
    public string CmbAccYear = "";
    SchoolAcademicYear objAccYear = new SchoolAcademicYear();
    DtoLoginModel info = new DtoLoginModel();

    public List<SchoolFeeMaster> AdditionalFeeList = new List<SchoolFeeMaster>();
    public SfGrid<SchoolFeeMaster>? AdditionalFeeLists { get; set; }
    public SchoolFeeMaster DTFeeMaster = new SchoolFeeMaster();
    public IList<Accounts> PostTo = new List<Accounts>();
    public IList<VtypeTrans> Receipt = new List<VtypeTrans>();
    SfComboBox<string, Accounts>? SfPostToObj;

    IEnumerable<string> TaxCode = new List<string>() {
    "SR",
    "ZR",
    "EX",
    "OS",

    };

    protected override async Task OnInitializedAsync()
    {
        await Layout.VersionChecker();
        ButtonLabel = "New";
        EditButtonLabel = "Edit";

        // BranchID = await SessionStorage.GetItemAsync<int>("BranchID");
        // user = await SessionStorage.GetItemAsync<int>("UserID");
        // Category = await SessionStorage.GetItemAsync<string>("Category");
        await GetLoginInfo();
        if (info != null)
        {
            user = info.UserID;
            BranchID = info.BranchID;
            Category = info.Category;
        }
        AcademicYear = await SessionStorage.GetItemAsync<string>("AcademicYear");

        CmbYear = (await StudentService.GetAcademicYear(BranchID))!.ToList();
        if (AcademicYear != null)
        {
            CmbAccYear = AcademicYear;
            DTFeeMaster.AcademicYear = AcademicYear.ToString();
            objAccYear = CmbYear.Where(b => b.AcademicYear!.Trim() == CmbAccYear).FirstOrDefault()!;
        }
        else
        {
            objAccYear = CmbYear.Where(b => b.Status!.Trim() == "Current").FirstOrDefault()!;
            CmbAccYear = objAccYear.AcademicYear!.ToString();
            DTFeeMaster.AcademicYear = objAccYear.AcademicYear.ToString();
        }

        if (Category == "Administrator")
        {
            AllowOpen = true;
            Open = false;

            PostTo = (await _IAdditionalFeeMaster.GetPostTo(BranchID))!.ToList();
            Receipt = (await _IAdditionalFeeMaster.GetReceipt())!.ToList();
            AdditionalFeeList = (await _IAdditionalFeeMaster.Getdata(BranchID, CmbAccYear))!;
            if (AdditionalFeeList.Count != 0)
                DTFeeMaster = AdditionalFeeList.FirstOrDefault()!;
        }
        else
        {
            try
            {
                objUserRight = (await _UserRights.GetUserRights(user, "AdditionalFeeMaster", "Students", BranchID))!;

                if (objUserRight.AccessDenied == true)
                {
                    AllowOpen = false;
                    Open = true;
                }
                else if (objUserRight.AllowOpen == true)
                {
                    AllowOpen = true;
                    Open = false;

                    PostTo = (await _IAdditionalFeeMaster.GetPostTo(BranchID))!.ToList();
                    Receipt = (await _IAdditionalFeeMaster.GetReceipt())!.ToList();
                    AdditionalFeeList = (await _IAdditionalFeeMaster.Getdata(BranchID, CmbAccYear))!;
                    if (AdditionalFeeList.Count != 0)
                        DTFeeMaster = AdditionalFeeList.FirstOrDefault()!;
                }
                else
                {
                    AllowOpen = false;
                    Open = true;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                AllowOpen = false;
                Open = true;
            }
        }
        EVatApplicable = true;
        EVatInclusive = true;
        btnSaveenable = true;
    }

    public void SelectedNameChanged(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, Accounts> arg)
    {
        if (arg.ItemData != null)
        {
            DTFeeMaster.AccountName = arg.ItemData.AccountName;
            DTFeeMaster.AccountCode = arg.ItemData.AccountCode;
        }
    }

    public async Task OnEdit(int ID)
    {
        DTFeeMaster = (await _IAdditionalFeeMaster.GetAdditional(BranchID, ID))!;
        await InvokeAsync(StateHasChanged);
        mode = "Edit";
    }

    public async Task New_Click()
    {
        if (Category == "Administrator")
        {
            await BtnNew_Click();
        }
        else
        {
            try
            {
                objUserRight = (await _UserRights.GetUserRights(user, "AdditionalFeeMaster", "Students", BranchID))!;
                if (objUserRight.AllowAdd == true)
                {
                    await BtnNew_Click();
                }
                else
                {
                    IsOpenDanger = true;
                    Failed = "Permission Denied";
                }
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex);
            }
        }
    }

    public async Task BtnNew_Click()
    {
        mode = "New";
        if (ButtonLabel == "New")
        {
            de1 = true;
            de2 = true;
            de3 = true;
            de4 = true;
            de5 = true;
            de6 = true;
            de7 = true;
            de8 = true;
            de9 = true;
            de10 = true;
            EVatApplicable = false;
            EVatInclusive = false;

            DTFeeMaster.Code = "";
            DTFeeMaster.Description = "";
            DTFeeMaster.AcademicYear = objAccYear.AcademicYear!.ToString();
            DTFeeMaster.PriorityNo = Convert.ToInt32(null);
            DTFeeMaster.Amount = Convert.ToInt32(null);
            DTFeeMaster.AccountCode = "";
            DTFeeMaster.AccountName = "";
            DTFeeMaster.ReceiptType = "";
            DTFeeMaster.Taxcode = "";
            DTFeeMaster.VatPercent = "";
            DTFeeMaster.VatApplicable = false;
            DTFeeMaster.VatInclusive = false;
            btnSaveenable = false;
            ButtonLabel = "Cancel";
            btnEditenable = true;
            btnDeleteenable = true;
        }
        else
        {
            de1 = false;
            de2 = false;
            de3 = false;
            de4 = false;
            de5 = false;
            de6 = false;
            de7 = false;
            de8 = false;
            de9 = false;
            de10 = false;
            EVatApplicable = true;
            EVatInclusive = true;

            DTFeeMaster.Code = "";
            DTFeeMaster.Description = "";
            DTFeeMaster.AcademicYear = objAccYear.AcademicYear!.ToString();
            DTFeeMaster.PriorityNo = Convert.ToInt32(null);
            DTFeeMaster.Amount = Convert.ToInt32(null);
            DTFeeMaster.AccountCode = "";
            DTFeeMaster.AccountName = "";
            DTFeeMaster.ReceiptType = "";
            DTFeeMaster.Taxcode = "";
            DTFeeMaster.VatPercent = "";
            DTFeeMaster.VatApplicable = false;
            DTFeeMaster.VatInclusive = false;
            btnSaveenable = true;
            ButtonLabel = "New";
            btnEditenable = false;
            btnDeleteenable = false;
        }
        await InvokeAsync(StateHasChanged);
    }

    public async Task<double> GetRowCounter(int? val)
    {
        var index = await AdditionalFeeLists!.GetRowIndexByPrimaryKeyAsync(val);
        var currentPage = AdditionalFeeLists.PageSettings.CurrentPage;
        if (AdditionalFeeLists.AllowPaging && currentPage > 1)
        {
            index = (((currentPage - 1) * AdditionalFeeLists.PageSettings.PageSize) + index);
        }
        return index + 1;
    }

    public async Task Save_Click()
    {
        await Save();
    }

    public async Task Save()
    {
        if (mode == "New")
        {

            if (DTFeeMaster.Code != "")
            {
                if (DTFeeMaster.Description != "")
                {
                    object id;
                    id = await _IAdditionalFeeMaster.GetID(DTFeeMaster.AccountCode!);

                    SchoolFeeMaster CM = new SchoolFeeMaster();
                    CM.Code = DTFeeMaster.Code;

                    if (DTFeeMaster.PriorityNo == Convert.ToInt32(null))
                    {
                        CM.PriorityNo = Convert.ToInt32(null);
                    }
                    else
                    {
                        CM.PriorityNo = DTFeeMaster.PriorityNo;
                    }
                    CM.Amount = DTFeeMaster.Amount;
                    CM.AcademicYear = DTFeeMaster.AcademicYear;
                    // if (id == null || id == "")
                    if (id == null)
                    {
                        CM.PostTo = Convert.ToInt32(System.DBNull.Value);
                    }
                    else
                    {
                        CM.PostTo = Convert.ToInt32(id);
                    }
                    CM.Description = DTFeeMaster.Description;
                    CM.ReceiptType = DTFeeMaster.ReceiptType;
                    CM.VatPercent = DTFeeMaster.VatPercent;
                    CM.Taxcode = DTFeeMaster.Taxcode;
                    CM.VatApplicable = DTFeeMaster.VatApplicable;
                    CM.VatInclusive = DTFeeMaster.VatInclusive;
                    CM.BranchId = Convert.ToInt32(BranchID);
                    CM.Type = "AdditionalPayment";

                    HttpResponseMessage response = await _IAdditionalFeeMaster.SaveMaster(CM);

                    if (response.IsSuccessStatusCode)
                    {
                        DtoUserTrack dttrack = new DtoUserTrack();
                        dttrack.UserId = user;
                        dttrack.TableName = "School_FeeMaster";
                        dttrack.ActionDate = DateTime.Now;
                        dttrack.ModuleName = "Student";
                        dttrack.Reference = "College Portal";
                        dttrack.Reason = DTFeeMaster.Code;
                        HttpResponseMessage msgTrack = await _IAdditionalFeeMaster.AddSaveUserTrack(dttrack);

                        var jsonString = await response.Content.ReadFromJsonAsync<dtError>();
                        if (jsonString!.Error == null)
                        {
                            IsOpen = true;
                            Success = "Added Successfully";
                        }
                        else
                        {
                            IsOpenDanger = true;
                            Failed = jsonString.Error;
                        }

                        AdditionalFeeList = (await _IAdditionalFeeMaster.Getdata(BranchID, CmbAccYear))!;
                        btnSaveenable = true;
                        ButtonLabel = "New";
                        btnEditenable = false;
                        de1 = false;
                        de2 = false;
                        de3 = false;
                        de4 = false;
                        de5 = false;
                        de6 = false;
                        de7 = false;
                        de8 = false;
                        de9 = false;
                        de10 = false;
                        EVatApplicable = true;
                        EVatInclusive = true;

                        await this.InvokeAsync(StateHasChanged);
                    }
                    else
                    {
                        AdditionalFeeList = (await _IAdditionalFeeMaster.Getdata(BranchID, CmbAccYear))!;

                        IsOpen = true;
                        Success = "Failed ";
                    }
                }
                else
                {
                    IsOpenDanger = true;
                    Failed = "Description does not allow null";
                    await InvokeAsync(StateHasChanged);
                }
            }
            else
            {
                IsOpenDanger = true;
                Failed = "Code does not allow null";
                await InvokeAsync(StateHasChanged);
            }
        }
        else if (mode == "Edit")
        {
            if (DTFeeMaster.Id != Convert.ToInt32(null))
            {
                if (DTFeeMaster.Code != null)
                {
                    if (DTFeeMaster.Description != null)
                    {
                        object id;
                        id = await _IAdditionalFeeMaster.GetID(DTFeeMaster.AccountCode!);

                        SchoolFeeMaster CM = new SchoolFeeMaster();
                        CM.Id = DTFeeMaster.Id;
                        CM.Code = DTFeeMaster.Code;

                        if (DTFeeMaster.PriorityNo == Convert.ToInt32(null))
                        {
                            CM.PriorityNo = Convert.ToInt32(null);
                        }
                        else
                        {
                            CM.PriorityNo = DTFeeMaster.PriorityNo;
                        }
                        CM.AcademicYear = DTFeeMaster.AcademicYear;
                        CM.Amount = DTFeeMaster.Amount;
                        // if (id == null || id == "")
                        if (id == null)
                        {
                            CM.PostTo = Convert.ToInt32(System.DBNull.Value);
                        }
                        else
                        {
                            CM.PostTo = Convert.ToInt32(id);
                        }
                        CM.Description = DTFeeMaster.Description;
                        CM.ReceiptType = DTFeeMaster.ReceiptType;
                        CM.VatPercent = DTFeeMaster.VatPercent;
                        CM.Taxcode = DTFeeMaster.Taxcode;
                        CM.VatApplicable = DTFeeMaster.VatApplicable;
                        CM.VatInclusive = DTFeeMaster.VatInclusive;
                        CM.BranchId = Convert.ToInt32(BranchID);
                        CM.Type = "AdditionalPayment";

                        HttpResponseMessage response = await _IAdditionalFeeMaster.UpdateMaster(CM);
                        if (response.IsSuccessStatusCode)
                        {
                            DtoUserTrack dttrack = new DtoUserTrack();
                            dttrack.UserId = user;
                            dttrack.TableName = "School_FeeMaster";
                            dttrack.ActionDate = DateTime.Now;
                            dttrack.ModuleName = "Student";
                            dttrack.Reference = "College Portal";
                            dttrack.Reason = DTFeeMaster.Code;
                            HttpResponseMessage msgTrack = await _IAdditionalFeeMaster.AddSaveUserTrack(dttrack);

                            var jsonString = await response.Content.ReadFromJsonAsync<dtError>();
                            if (jsonString!.Error == null)
                            {
                                IsOpen = true;
                                Success = "Updated Successfully";
                            }
                            else
                            {
                                IsOpenDanger = true;
                                Failed = jsonString.Error;
                            }
                            AdditionalFeeList = (await _IAdditionalFeeMaster.Getdata(BranchID, CmbAccYear))!;
                            btnSaveenable = true;
                            EditButtonLabel = "Edit";
                            btnAddenable = false;

                            de1 = false;
                            de2 = false;
                            de3 = false;
                            de4 = false;
                            de5 = false;
                            de6 = false;
                            de7 = false;
                            de8 = false;
                            de9 = false;
                            de10 = false;
                            EVatApplicable = true;
                            EVatInclusive = true;

                            await this.InvokeAsync(StateHasChanged);
                        }
                        else
                        {
                            AdditionalFeeList = (await _IAdditionalFeeMaster.Getdata(BranchID, CmbAccYear))!;

                            IsOpen = true;
                            Success = "Failed ";
                        }
                    }
                    else
                    {
                        IsOpenDanger = true;
                        Failed = "Description does not allow null";
                        await InvokeAsync(StateHasChanged);
                    }
                }
                else
                {
                    IsOpenDanger = true;
                    Failed = "Code does not allow null";
                    await InvokeAsync(StateHasChanged);
                }
            }
        }
    }

    public async Task Edit_Click()
    {
        if (Category == "Administrator")
        {
            await BtnEdit_Click();
        }
        else
        {
            try
            {
                objUserRight = (await _UserRights.GetUserRights(user, "AdditionalFeeMaster", "Students", BranchID))!;
                if (objUserRight.AllowEdit == true)
                {
                    await BtnEdit_Click();
                }
                else
                {
                    IsOpenDanger = true;
                    Failed = "Permission Denied";
                }
            }
            catch (Exception Ex)
            {
                Console.WriteLine(Ex);
            }
        }
    }

    public async Task BtnEdit_Click()
    {
        mode = "Edit";
        if (EditButtonLabel == "Edit")
        {
            de1 = true;
            de2 = true;
            de3 = true;
            de4 = true;
            de5 = true;
            de6 = true;
            de7 = true;
            de8 = true;
            de9 = true;
            de10 = true;
            EVatApplicable = false;
            EVatInclusive = false;

            btnSaveenable = false;
            EditButtonLabel = "Cancel";
            btnAddenable = true;
            btnDeleteenable = true;
        }
        else
        {
            de1 = false;
            de2 = false;
            de3 = false;
            de4 = false;
            de5 = false;
            de6 = false;
            de7 = false;
            de8 = false;
            de9 = false;
            de10 = false;
            EVatApplicable = true;
            EVatInclusive = true;

            DTFeeMaster.Code = "";
            DTFeeMaster.Description = "";
            DTFeeMaster.AcademicYear = "";
            DTFeeMaster.PriorityNo = Convert.ToInt32(null);
            DTFeeMaster.Amount = Convert.ToInt32(null);
            DTFeeMaster.AccountCode = "";
            DTFeeMaster.AccountName = "";
            DTFeeMaster.ReceiptType = "";
            DTFeeMaster.Taxcode = "";
            DTFeeMaster.VatPercent = "";
            DTFeeMaster.VatApplicable = false;
            DTFeeMaster.VatInclusive = false;
            btnSaveenable = true;
            EditButtonLabel = "Edit";
            btnAddenable = false;
            btnDeleteenable = false;
        }
        await InvokeAsync(StateHasChanged);
    }

    public async Task Delete_Click(int ID)
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure? you want to delete");
        if (confirmed)
        {
            if (Category == "Administrator")
            {
                await BtnDelete_Click(ID);
            }
            else
            {
                try
                {
                    objUserRight = (await _UserRights.GetUserRights(user, "AdditionalFeeMaster", "Students", BranchID))!;
                    if (objUserRight.AllowDelete == true)
                    {
                        await BtnDelete_Click(ID);
                    }
                    else
                    {
                        IsOpenDanger = true;
                        Failed = "Permission Denied";
                    }
                }
                catch (Exception Ex)
                {
                    Console.WriteLine(Ex);
                }
            }
        }
    }

    public async Task BtnDelete_Click(int ID)
    {
        HttpResponseMessage response = await _IAdditionalFeeMaster.DeleteAdditional(ID);
        if (response.IsSuccessStatusCode)
        {
            DtoUserTrack dttrack = new DtoUserTrack();
            dttrack.UserId = user;
            dttrack.TableName = "School_FeeMaster";
            dttrack.ActionDate = DateTime.Now;
            dttrack.ModuleName = "Student";
            dttrack.Reference = "college Portal";
            dttrack.Reason = DTFeeMaster.Code;
            HttpResponseMessage msgTrack = await _IAdditionalFeeMaster.DeleteSaveUserTrack(dttrack);

            AdditionalFeeList = (await _IAdditionalFeeMaster.Getdata(BranchID, CmbAccYear))!;
            IsOpen = true;
            Success = "Deleted Successfully";
            await this.InvokeAsync(StateHasChanged);
        }
    }

    public async Task OnPostToFiltering(Syncfusion.Blazor.DropDowns.FilteringEventArgs args)
    {
        args.PreventDefaultAction = true;
        var pre = new WhereFilter();
        var predicate = new List<WhereFilter>();
        predicate.Add(new WhereFilter() { Condition = "or", Field = "AccountCode", value = args.Text, Operator = "contains", IgnoreAccent = true, IgnoreCase = true });
        predicate.Add(new WhereFilter() { Condition = "or", Field = "AccountName", value = args.Text, Operator = "contains", IgnoreAccent = true, IgnoreCase = true });
        predicate.Add(new WhereFilter() { Condition = "or", Field = "Id", value = args.Text, Operator = "contains", IgnoreAccent = true, IgnoreCase = true });
        predicate.Add(new WhereFilter() { Condition = "or", Field = "AccCategory", value = args.Text, Operator = "contains", IgnoreAccent = true, IgnoreCase = true });

        pre = WhereFilter.Or(predicate);
        var query = new Query().Where(pre).Take(40);
        await this.SfPostToObj!.FilterAsync(PostTo, query);
        await InvokeAsync(StateHasChanged);
    }

    // public void Vat_KeyPress(object sender, KeyboardEventArgs e)
    // {
    //     var letter = e.Key;
    //     if (!char.IsDigit(Convert.ToChar(letter)) && !char.IsControl(Convert.ToChar(letter)))
    //         e.MetaKey = true;
    // }

    public async Task KeyPress(KeyboardEventArgs e)
    {
        var letter = e.Key;
        //char Let = Convert.ToChar(letter);
        if (!char.IsLetterOrDigit(Convert.ToChar(letter)) && !char.IsControl(Convert.ToChar(letter)))
        {
            string vat = DTFeeMaster.VatPercent!;
            Failed = "Special character not allowed !";
            PopupError = true;
            await InvokeAsync(StateHasChanged);
            string vatpct = vat.Replace(letter, "");
            DTFeeMaster.VatPercent = vatpct;
        }
        await InvokeAsync(StateHasChanged);
    }
    public void onCreateSearch()
    {
        this.search!.AddIconAsync("append", "e-upload-picture");
    }

    SfTextBox? search;
    public void OnSearch(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        if (args.Value != null)
        {
                AdditionalFeeLists!.SearchAsync(args.Value);
                this.StateHasChanged();
        }
    }

    public void OnInput(InputEventArgs args)
    {
        this.AdditionalFeeLists!.SearchAsync(args.Value);
        this.StateHasChanged();
    }

    private async Task GetLoginInfo()
    {
        try
        {
            string param = await Http.GetStringAsync("API/Encryption/Decrypt?Text=" + HttpUtility.UrlEncode(await SessionStorage.GetItemAsync<string>("token")));
            if (!string.IsNullOrEmpty(param))
                info = JsonConvert.DeserializeObject<DtoLoginModel>(param)!;
        }
        catch (Exception ex)
        {
            this.ToastService.ShowToast(new ToastOption()
                {
                    Title = "Something went wrong...",
                    Content = ex.Message,
                    CssClass = "e-toast-danger",
                    Icon = "e-error toast-icons",
                    Timeout = 2000,
                    X = "Right",
                    Y = "Top",
                    CloseButton = true
                });
            Console.WriteLine(ex);
            await JsRuntime.InvokeVoidAsync("window.history.back");
        }
    }

}
