@page "/ParentFee"
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Popups
@using OrisonCollegePortal.Shared.Entities

@using OrisonCollegePortal.Shared.Entities.General
@using OrisonCollegePortal.Shared.Entities.Finance
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Spinner
@using Microsoft.Extensions.Localization
@using Newtonsoft.Json
@using OrisonCollegePortal.Shared.Entities.BoldReport
@using OrisonCollegePortal.Client.Services
@using System.Dynamic
@using RestSharp
@using System.Net
@using System.IO;
@using Newtonsoft.Json.Linq
@using System.Data
@using System.Net.Http.Json
@using System.Web

@inject OrisonCollegePortal.Client.Contracts.Finance.IStudentFeeManager StudentService
@inject OrisonCollegePortal.Client.Contracts.Finance.IStudentMaster StudentMasterService
@inject HttpClient Http
@inject ToastService ToastService
@inject NavigationManager uriHelper
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@*@inject Blazored.LocalStorage.ILocalStorageService localStorage*@
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IJSRuntime JsRuntime
@inject OrisonCollegePortal.Client.Services.UserRightsService _UserRights
@inject OrisonCollegePortal.Client.Contracts.BoldReport.IBoldReportManager _BoldReport
@inject OrisonCollegePortal.Client.Contracts.Finance.IPostingManager _IPostingManager
@inject OrisonCollegePortal.Client.Services.GeneralServices generalServ
@using OrisonCollegePortal.Client.Resources
@inject IStringLocalizer<SfResources> Localizer
<head>
    <link href="css/OrisonSyncfusionStyles.css" rel="stylesheet" />
</head>

@if (AllowOpen == true)
{
    <div class="box-card-shadow">
        <div class="row">
            <div class="col-md-9">
                <SfButton @onclick="ExcelExport" IconCss="Icon excel" CssClass="e-btn" title="Excel" />
                <SfButton @onclick="ExportPdf" IconCss="Icon pdf" CssClass="e-btn" title="PDF" />
                <SfComboBox TValue="string" TItem="ComboFields" PopupHeight="230px" Placeholder="" @bind-Value="@ComboBoxValue" DataSource="@ComboValue" Width="150px">
                    <ComboBoxEvents TValue="string" TItem="ComboFields" ValueChange="OnChange"></ComboBoxEvents>
                    <ComboBoxFieldSettings Text="Text" Value="ID"></ComboBoxFieldSettings>
                </SfComboBox>
                <SfComboBox TValue="string" TItem="ComboFields" PopupHeight="230px" Placeholder="" @bind-Value="@ComboBoxValueStatus" DataSource="@ComboValueStatus" Width="125px">
                    <ComboBoxEvents TValue="string" TItem="ComboFields" ValueChange="OnChangeStatus"></ComboBoxEvents>
                    <ComboBoxFieldSettings Text="Text" Value="ID"></ComboBoxFieldSettings>
                </SfComboBox>
                <SfComboBox TValue="string" TItem="SchoolAcademicYear" PopupHeight="230px" Placeholder="" @bind-Value="@CmbAccYear" DataSource="@CmbYear" Width="110px">
                    <ComboBoxFieldSettings Text="AcademicYear" Value="AcademicYear"></ComboBoxFieldSettings>
                </SfComboBox>

                <SfButton IsPrimary="false" IconCss="Icon filter" CssClass="e-btn4" Content=" " HtmlAttributes="@ClearFilter" @onclick="@Clear_Click"></SfButton>
                <SfButton OnClick="ShowColumnChooser" IconCss="Icon columnchooser" CssClass="e-btn4" Content=" " HtmlAttributes="@ColumnChooser"></SfButton>
                <SfTextBox @ref="search" Input="OnInput" Placeholder=@Localizer["Global Search"] Width="200px" ShowClearButton="true" CssClass="e-btn2" ValueChange="OnSearch" Created="@onCreateSearch"></SfTextBox>

                <BlazorStrap.BSAlert Color="BlazorStrap.Color.Danger" @bind-IsOpen="@IsOpen" AutoHide="true">
                    @Success
                </BlazorStrap.BSAlert>
            </div>
            <div class="col-md-3">
                <div class="header-div-style">
                    <label class="header-label">@Localizer["PARENT FEE REGISTER"]</label>
                </div>
            </div>
        </div>
    </div>
    <div class="box-card-shadow">
        <div class="row">
            <div class="col-md-2">
                <label class="label">From</label>
                <SfDatePicker TValue="DateTime" ShowClearButton="true" @bind-Value="@FromDate" Format="dd/MM/yyyy" Width="100%">
                </SfDatePicker>
            </div>
            <div class="col-md-2">
                <label class="label">To</label>
                <SfDatePicker TValue="DateTime" ShowClearButton="true" @bind-Value="@ToDate" Format="dd/MM/yyyy" Width="100%">
                </SfDatePicker>
            </div>
            <div class="col-md-8" style="padding-top:14px">
                <SfButton Content=@Localizer["Go"] OnClick="@Go_Click" CssClass="e-btn e-btn4"></SfButton>
            </div>
        </div>
    </div>
    <div class="box-card-shadow">
        <div class="table-responsive" style="position: relative; min-height:600px; min-width: 300px ">
            @if (ChangeValue == "Default")
            {
                @if (StudFeeRegister == null)
                {
                    <p><em>Loading...</em></p>
                }
                else
                {
                    <SfGrid DataSource="@StudFeeRegister" ID="gv_StudentFeeRegister" @ref="gv_StudentFeeRegister"
                            GridLines="GridLine.Both"
                            AllowFiltering="true"
                            AllowPaging="true"
                            AllowExcelExport="true"
                            AllowPdfExport="true"
                            Height="550"
                            Width="100%"
                            ShowColumnChooser="true"
                            AllowResizing="true"
                            AllowSorting="true"
                            EnableAltRow="true"
                            RowHeight="25">
                        <GridEvents OnToolbarClick="ToolbarClick" TValue="dtStudentFeeRegister"></GridEvents>
                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
                        <GridPageSettings PageSize="50"></GridPageSettings>

                        <GridColumns>
                            <GridColumn Field=@nameof(dtStudentFeeRegister.AccountID) IsPrimaryKey="true" HeaderText=@Localizer["AccountID"] Width="120" Visible="false"></GridColumn>
                            <GridColumn Field=@nameof(dtStudentFeeRegister.AccountCode) HeaderText=@Localizer["ParentCode"] Width="90"></GridColumn>
                            <GridColumn Field=@nameof(dtStudentFeeRegister.AccountName) HeaderText=@Localizer["Parent Name"] Width="180"></GridColumn>
                            <GridColumn Field=@nameof(dtStudentFeeRegister.Opening) CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr" }})" HeaderText=@Localizer["Opening"] TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left" Format="n2" Width="90"></GridColumn>
                            <GridColumn Field=@nameof(dtStudentFeeRegister.Debit) HeaderText=@Localizer["Fee"] CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr" }})" TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left" Width="100" Format="n2"></GridColumn>
                            <GridColumn Field=@nameof(dtStudentFeeRegister.Credit) HeaderText=@Localizer["Paid"] CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr" }})" TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left" Width="80" Format="n2"></GridColumn>
                            <GridColumn Field=@nameof(dtStudentFeeRegister.Balance) HeaderText=@Localizer["Balance"] CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr" }})" TextAlign="TextAlign.Right" HeaderTextAlign="TextAlign.Left" Width="90" Format="n2"></GridColumn>

                            <GridColumn Field=@nameof(dtStudentFeeRegister.PerMobile) HeaderText=@Localizer["Mobile"] Width="120"></GridColumn>
                            <GridColumn Field=@nameof(dtStudentFeeRegister.PerTel) HeaderText=@Localizer["Tel"] Width="100"></GridColumn>
                            <GridColumn Field=@nameof(dtStudentFeeRegister.SmsNumber) HeaderText=@Localizer["SmsNumber"] Width="120"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                }
                <style>
                    .e-grid .e-gridheader .e-headercell.e-attr .e-headercelldiv {
                        text-align: left !important;
                    }
                </style>
            }
        </div>
    </div>
}
else
{
    <div class="container-fluid p-0" style="padding-right:0px">
        <div class="form-row">
            <div class="col-md-12">
                <BlazorStrap.BSAlert Color=" BlazorStrap.Color.Danger" @bind-IsOpen="@Open">
                    Permission Denied
                </BlazorStrap.BSAlert>
            </div>
        </div>
    </div>
}

@code {
    [CascadingParameter]
    public MainLayout Layout { get; set; }
    int BranchID, user;
    public string? Category, AcademicYear, Status = "", Success, Con, CompanyCode;
    bool AllowOpen = true, Open, OpenError, visible = false;
    public bool IsOpen = false;
    DtoLoginModel info = new DtoLoginModel();


    private Dictionary<string, object> ColumnChooser = new Dictionary<string, object>()
    {
           { "title", "Column Chooser"}
    };
    private Dictionary<string, object> ClearFilter = new Dictionary<string, object>()
    {
        { "title", "Clear Filter"}
    };

    public SfGrid<dtStudentFeeRegister>? gv_StudentFeeRegister { get; set; }

    public class ComboFields
    {
        public string? ID { get; set; }
        public string? Text { get; set; }
    }
    public List<ComboFields> ComboValue = new List<ComboFields>()
{
        new ComboFields(){ ID= "Default", Text= "Default" },

    };
    public string ComboBoxValue = "Default";
    public string ChangeValue { get; set; } = "Default";

    public List<ComboFields> ComboValueStatus = new List<ComboFields>()
{
        new ComboFields(){ ID= "Studying", Text= "Studying" },
           new ComboFields(){ ID= "All", Text= "All" }

    };
    public string ComboBoxValueStatus = "Studying";
    public string ChangeValueStatus { get; set; } = "Studying";


    public void OnChange(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, ComboFields> args)
    {
        this.ChangeValue = args.ItemData?.Text!;
    }

    public async Task OnChangeStatus(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, ComboFields> args)
    {
        this.ChangeValueStatus = args.ItemData?.Text!;
        StudFeeRegister = (await StudentService.GetParentFee(CmbAccYear!, BranchID, FromDate.ToString("MM/dd/yyyy"), ToDate.ToString("MM/dd/yyyy"), ComboBoxValueStatus, ComboBoxValue))!.ToList();
        await InvokeAsync(StateHasChanged);
    }

    public List<SchoolAcademicYear> CmbYear = new List<SchoolAcademicYear>();
    public string? CmbAccYear = "";
    public IList<dtStudentFeeRegister> StudFeeRegister = new List<dtStudentFeeRegister>();
    dtStudentFeeRegister objStudentFeeRegister = new dtStudentFeeRegister();
    SchoolAcademicYear? objAccYear = new SchoolAcademicYear();

    public IList<SchoolAcademicYear> ActivityStartDate = new List<SchoolAcademicYear>();
    SchoolAcademicYear activitystartdate = new SchoolAcademicYear();
    public DateTime cmbActivityStartDate;
    public DateTime FromDate = DateTime.Now;

    public IList<SchoolAcademicYear> ActivityEndDate = new List<SchoolAcademicYear>();
    SchoolAcademicYear activityenddate = new SchoolAcademicYear();
    public DateTime cmbActivityEndDate;
    public DateTime ToDate = DateTime.Now;

    UserRights? objUserRight = new UserRights();

    public async Task Go_Click()
    {
        StudFeeRegister = (await StudentService.GetParentFee(CmbAccYear!, BranchID, FromDate.ToString("MM/dd/yyyy"), ToDate.ToString("MM/dd/yyyy"), ComboBoxValueStatus, ComboBoxValue))!.ToList();
    }
    private async Task GetLoginInfo()
    {
        try
        {
            string param = await Http.GetStringAsync("API/Encryption/Decrypt?Text=" + HttpUtility.UrlEncode(await SessionStorage.GetItemAsync<string>("token")));
            if (!string.IsNullOrEmpty(param))
                info = JsonConvert.DeserializeObject<DtoLoginModel>(param)!;
        }
        catch (Exception ex)
        {
            this.ToastService.ShowToast(new ToastOption()
                {
                    Title = "Something went wrong...",
                    Content = ex.Message,
                    CssClass = "e-toast-danger",
                    Icon = "e-error toast-icons",
                    Timeout = 2000,
                    X = "Right",
                    Y = "Top",
                    CloseButton = true
                });
            Console.WriteLine(ex);
            await JsRuntime.InvokeVoidAsync("window.history.back");
        }
    }


    protected override async Task OnInitializedAsync()
    {
        await Layout.VersionChecker();
        await GetLoginInfo();
        if (info != null)
        {
            user = (int)info.UserID!;
            BranchID = (int)info.BranchID!;
            Category = info.Category;
            CmbYear = (await StudentService.GetAcademicYear(info.BranchID))!.ToList();
            objAccYear = CmbYear.Where(b => b.Status!.Trim() == "Current").FirstOrDefault();
            CmbAccYear = objAccYear!.AcademicYear!.ToString()!;
            FromDate = Convert.ToDateTime(objAccYear.StartDate.ToString());
            //if (CompanyCode == "ARCADIA")
            //{
            DateTime NextDate = Convert.ToDateTime(objAccYear.StartDate.ToString()).AddYears(1);
            ToDate = NextDate.AddDays(-1);

        }

        CompanyCode = await SessionStorage.GetItemAsync<string>("Company");




        if (Category == "Administrator")
        {
            AllowOpen = true;
            Open = false;
            StudFeeRegister = (await StudentService.GetParentFee(CmbAccYear!, BranchID, FromDate.ToString("MM/dd/yyyy"), ToDate.ToString("MM/dd/yyyy"), ComboBoxValueStatus, ComboBoxValue))!.ToList();
        }
        else
        {
            try
            {
                objUserRight = await _UserRights.GetUserRights(user, "ParentFeeRegister", "Students", BranchID);

                if (objUserRight!.AccessDenied == true)
                {
                    AllowOpen = false;
                    Open = true;
                }
                else if (objUserRight.AllowOpen == true)
                {
                    AllowOpen = true;
                    Open = false;

                    StudFeeRegister = (await StudentService.GetParentFee(CmbAccYear!, BranchID, FromDate.ToString("MM/dd/yyyy"), ToDate.ToString("MM/dd/yyyy"), ComboBoxValueStatus, ComboBoxValue))!.ToList();
                }
                else
                {
                    AllowOpen = false;
                    Open = true;
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex);
                AllowOpen = false;
                Open = true;
                throw;
            }
        }
    }

    public void ExcelExport()
    {
        ExcelExportProperties ExcelProperties = new ExcelExportProperties();
        ExcelProperties.IncludeTemplateColumn = true;
        ExcelProperties.FileName = "ParentFeeRegister.xlsx";
        this.gv_StudentFeeRegister!.ExportToExcelAsync(ExcelProperties);

    }
    public void ExportPdf()
    {

        PdfExportProperties PdfProperties = new PdfExportProperties();
        PdfProperties.IncludeTemplateColumn = true;
        PdfProperties.FileName = "ParentFeeRegister.pdf";
        this.gv_StudentFeeRegister!.ExportToPdfAsync(PdfProperties);
    }

    public async Task Clear_Click()
    {
        await gv_StudentFeeRegister!.SearchAsync("");
        await gv_StudentFeeRegister.ClearFilteringAsync();
        search.Value = null;
    }
    public void ToolbarClick(Syncfusion.Blazor.Navigations.ClickEventArgs args)
    {
        if (args.Item.Id == "gv_StudentFeeRegister_pdfexport")
        {
            this.gv_StudentFeeRegister!.ExportToPdfAsync();
        }
        else if (args.Item.Id == "gv_StudentFeeRegister_excelexport")
        {
            this.gv_StudentFeeRegister!.ExportToExcelAsync();
        }
    }

    public void ShowColumnChooser()
    {
        if (ChangeValue == "Default")
        {
            this.gv_StudentFeeRegister!.OpenColumnChooserAsync(200, 50);
        }
    }


    public SfTextBox? search;
    public void OnSearch(Syncfusion.Blazor.Inputs.ChangedEventArgs args)
    {
        if (args.Value != null)
        {
            if (ChangeValue == "Default")
            {
                gv_StudentFeeRegister!.SearchAsync(args.Value);
                this.StateHasChanged();
            }
        }
    }


    public void onCreateSearch()
    {
        this.search!.AddIconAsync("append", "e-upload-picture");
    }
    public void OnInput(InputEventArgs args)
    {
        this.gv_StudentFeeRegister!.SearchAsync(args.Value);
        this.StateHasChanged();
    }

}

