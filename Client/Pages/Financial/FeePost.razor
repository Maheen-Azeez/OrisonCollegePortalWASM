@page "/FeePost"

@page "/FeePost/{AccountID:int}"
@using Syncfusion.Blazor.Buttons;
@using Syncfusion.Blazor.Calendars;
@using Syncfusion.Blazor.DropDowns;
@using Syncfusion.Blazor.Grids;
@using Syncfusion.Blazor.Inputs;
@using Syncfusion.Blazor.Popups

@using OrisonCollegePortal.Shared.Entities.General
@using OrisonCollegePortal.Shared.Entities
@using OrisonCollegePortal.Shared.Entities.Finance
@using Syncfusion.Blazor.Data
@using Syncfusion.Blazor.Spinner
@using Microsoft.Extensions.Localization
@using Newtonsoft.Json
@* @using OrisonCollegePortal.Shared.Entities.BoldReport *@
@using OrisonCollegePortal.Client.Services
@using System.Dynamic
@using RestSharp
@using System.Net
@using System.IO;
@using Newtonsoft.Json.Linq
@using System.Data
@using System.Net.Http.Json
@using System.Web

@inject OrisonCollegePortal.Client.Contracts.Finance.IStudentManager StudentsService
@inject OrisonCollegePortal.Client.Contracts.Finance.IStudentFeeManager StudentService
@inject OrisonCollegePortal.Client.Contracts.Finance.IStudentMaster StudentMasterService
@inject OrisonCollegePortal.Client.Contracts.Finance.IStudentManager Student
@inject HttpClient Http
@inject ToastService ToastService
@inject NavigationManager uriHelper
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@*@inject Blazored.LocalStorage.ILocalStorageService localStorage*@
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject IJSRuntime JsRuntime
@inject OrisonCollegePortal.Client.Services.UserRightsService _UserRights
@* @inject IStringLocalizer<SfResources?> Localizer *@
@* @inject OrisonCollegePortal.Client.Contracts.BoldReport.IBoldReportManager _BoldReport *@
@inject OrisonCollegePortal.Client.Contracts.Finance.IPostingManager _IPostingManager
@inject OrisonCollegePortal.Client.Services.GeneralServices generalServ
@inject OrisonCollegePortal.Client.Contracts.Finance.IStudentMaster StudentMasterService
@inject OrisonCollegePortal.Client.Contracts.Finance.IVoucherAllocationManagers _IVoucherAllocationManagers
@inject OrisonCollegePortal.Client.Contracts.Finance.IClassMaster _IClassMaster
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject Blazored.SessionStorage.ISessionStorageService SessionStorage
@inject NavigationManager _NavManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject OrisonCollegePortal.Client.Contracts.Finance.IStudentFeeManager StudentService
@inject OrisonCollegePortal.Client.Contracts.Finance.IInvAccounts _IInvAccounts
@inject OrisonCollegePortal.Client.Contracts.Finance.IInvoiceRegisterManager _IInvoiceRegisterManagers


@using OrisonCollegePortal.Client.Resources
@inject IStringLocalizer<SfResources> Localizer
@inject GlobalStudentService globalStudentServ


@using Microsoft.AspNetCore.Components;
@using System.Xml;
@using System.Xml.Serialization;
@using Syncfusion.Blazor.Navigations
@using System.Collections.ObjectModel;
@using BlazorInputFile;
@using System.ComponentModel.DataAnnotations;
@inject IJSRuntime IJS
@inject IJSRuntime JsRuntime
@inject IJSRuntime JsRuntime;




@inject IJSRuntime IJS
@inject HttpClient Http
@inject NavigationManager uriHelper


<head>
    <link href="css/OrisonSyncfusionStyles.css" rel="stylesheet" />
    <style>
        .e-btn .e-btn-icon, .e-css.e-btn .e-btn-icon {
            color: white;
        }
    </style>
</head>
@if (AllowOpen == true)
{
    <div class="box-card-shadow">
        <div class="row">
            <div class="col-md-7">
                <SfButton @onclick="@BtnSearch_Click" IconCss="Icon search" CssClass="e-btn" Content=@Localizer["Search"] />
               @*  <SfButton IconCss="Icon search" CssClass="e-btn e-btn7" Content=@GlobalBtn OnClick="@AllStudent_Click" style="width:12%"></SfButton> *@
                <SfButton IconCss="Icon Reload" CssClass="e-btn e-btn7" Content=@Localizer["Refresh"] OnClick="@Refresh_Click"></SfButton>
                <SfButton IconCss="Icon back" CssClass="e-btn" @onclick="@Back_Click" Content=@Localizer["Back"] IconPosition=@IconPosition.Left></SfButton>

            </div>
            <div class="col-md-3">
                <BlazorStrap.BSAlert Color="BlazorStrap.Color.Success" @bind-IsOpen="@IsOpen" AutoHide="true">
                    Successfully Edited <a><i class="fa fa-check" aria-hidden="true"></i></a>
                </BlazorStrap.BSAlert>
                <BlazorStrap.BSAlert Color="BlazorStrap.Color.Success" @bind-IsOpen="@IsOpenAdd" AutoHide="true">
                    Successfully Saved <a><i class="fa fa-check" aria-hidden="true"></i></a>
                </BlazorStrap.BSAlert>
                <BlazorStrap.BSAlert Color="BlazorStrap.Color.Danger" @bind-IsOpen="@IsOpenUpdateFailed" AutoHide="true">
                    Failed to Update <a><i aria-hidden="true"></i></a>
                </BlazorStrap.BSAlert>
                <BlazorStrap.BSAlert Color="BlazorStrap.Color.Danger" @bind-IsOpen="@IsOpenDangers" AutoHide="true">
                    @Faileds
                </BlazorStrap.BSAlert>

            </div>
            <div class="col-md-2">
                <div class="header-div-style">
                    <label class="header-label">FEE POSTING</label>
                </div>
            </div>
        </div>
    </div>

    <div>
        <div class="row" style="padding-top:0px;">
            <div class="col-xl-12 col-md-12 col-lg-12">
                <EditForm Model="@EditContext"
                          OnValidSubmit="@HandleValidSubmit"
                          OnInvalidSubmit="@HandleInvalidSubmit"
                          class="w-800">
                    <DataAnnotationsValidator />
                    <ValidationSummary></ValidationSummary>
                    <div class="box-card-shadow">
                        <div class="pt-1">
                            <div class="row">
                                <div class="col-md-3">
                                    <label class="label">@Localizer["Student Code"]</label>
                                    <SfTextBox @bind-Value="@DTAccount.AccountCode" CssClass="textbox" Enabled="false">
                                    </SfTextBox>
                                </div>
                                <div class="col-md-9">
                                    <label class="label">@Localizer["Student Name"]</label>
                                    <SfTextBox @bind-Value="@DTAccount.AccountName" CssClass="textbox" Enabled="false">
                                    </SfTextBox>
                                </div>
                            </div>
                            <div class="row">
                                <div class="col-md-3">
                                    <label class="label">@Localizer["Mode"]</label>
                                    <SfTextBox @bind-Value="@DTStudentTrans.ModeOfStudy" CssClass="textbox" Enabled="false"></SfTextBox>
                                </div>
                                <div class="col-md-3">
                                    <label class="label">@Localizer["Programme"]</label>
                                    <SfTextBox @bind-Value="@DTStudentTrans.Class" CssClass="textbox" Enabled="false"></SfTextBox>
                                </div>
                                <div class="col-md-3">
                                    <label class="label">@Localizer["Programme Year"]</label>
                                    <SfTextBox @bind-Value="@DTStudentTrans.Division" CssClass="textbox" Enabled="false"></SfTextBox>
                                </div>
                                <div class="col-md-3">
                                    <label class="label">@Localizer["Status"]</label>
                                    <SfTextBox @bind-Value="@DTStudentTrans.Status" CssClass="textbox" Enabled="false"></SfTextBox>

                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="box-card-shadow">
                        <div class="pl-2" style="background-color: #d0ddf680; height: 23px;">
                            <label style="font-size:medium;color:#0a1971">Fees Summary</label>
                        </div>
                        <div class="pt-1">
                            <div class="row">
                                <div class="col-md-2">
                                    <label class="label">@Localizer["Current Fee"]</label>
                                    <SfNumericTextBox TValue="decimal" Placeholder="CurrentFee" CssClass="e-custom" ShowSpinButton="false" Decimals="2" Min="0" @bind-Value="@StudFeeSummary.CurrentFee" Enabled="false" EnableRtl="true">
                                    </SfNumericTextBox>
                                </div>
                                <div class="col-md-2">
                                    <label class="label">@Localizer["Total Fee"]</label>
                                    <SfNumericTextBox TValue="decimal" Placeholder="TotalFee" CssClass="e-custom" CustomAttributes="@(new Dictionary<string, object>() { { "class", "e-attr" } })" TextAlign="TextAlign.Right" ShowSpinButton="false" Decimals="2" Min="0" @bind-Value="@StudFeeSummary.TotalFee" Enabled="false" EnableRtl="true">
                                    </SfNumericTextBox>
                                </div>
                                <div class="col-md-2">
                                    <label class="label">@Localizer["Total Discount"]</label>
                                    <SfNumericTextBox TValue="decimal" Placeholder="Discount" CssClass="e-custom" CustomAttributes="@(new Dictionary<string, object>() { { "class", "e-attr" } })" TextAlign="TextAlign.Right" ShowSpinButton="false" Decimals="2" Min="0" @bind-Value="@StudFeeSummary.Discount" Enabled="false" EnableRtl="true">
                                    </SfNumericTextBox>
                                </div>
                                <div class="col-md-2">
                                    <label class="label">@Localizer["Paid"]</label>
                                    <SfNumericTextBox TValue="decimal" Placeholder="Paid" CssClass="e-custom" CustomAttributes="@(new Dictionary<string, object>() { { "class", "e-attr" } })" TextAlign="TextAlign.Right" ShowSpinButton="false" Decimals="2" Min="0" @bind-Value="@StudFeeSummary.Paid" Enabled="false" EnableRtl="true">
                                    </SfNumericTextBox>
                                </div>
                                <div class="col-md-2">
                                    <label class="label">@Localizer["Total Balance"]</label>
                                    <SfNumericTextBox TValue="decimal" Placeholder="TotalBalance" CssClass="e-custom" CustomAttributes="@(new Dictionary<string, object>() { { "class", "e-attr" } })" TextAlign="TextAlign.Right" ShowSpinButton="false" Decimals="2" Min="0" @bind-Value="@StudFeeSummary.TotalBalance" Enabled="false" EnableRtl="true">
                                    </SfNumericTextBox>

                                </div>
                                <div class="col-md-2">
                                    <label class="label">@Localizer["Current Balance"]</label>
                                    @if (StudFeeSummary.CurrentBalance > 0)
                                    {
                                        <SfNumericTextBox TValue="decimal" Placeholder="CurrentBalance" CssClass="@ValidCss" @attributes="@(new Dictionary<string, object>() { { "style", "color: #e00f0f;" } })" ShowSpinButton="false" Decimals="2" Min="0" @bind-Value="@StudFeeSummary.CurrentBalance" Enabled="false" EnableRtl="true">
                                        </SfNumericTextBox>
                                    }
                                    else
                                    {
                                        <SfNumericTextBox TValue="decimal" Placeholder="CurrentBalance" CssClass="@ValidCss" ShowSpinButton="false" Decimals="2" Min="0" @bind-Value="@StudFeeSummary.CurrentBalance" Enabled="false" EnableRtl="true">
                                        </SfNumericTextBox>
                                    }
                                    @*<SfNumericTextBox TValue="decimal" Placeholder="CurrentBalance" CssClass="e-custom" CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr" }})" TextAlign="TextAlign.Right" ShowSpinButton="false" Decimals="2" Min="0" @bind-Value="@StudFeeSummary.CurrentBalance" Enabled="false" EnableRtl="true">
                                </SfNumericTextBox>*@
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="box-card-shadow">
                        <div class="pl-2" style="background-color: #d0ddf680; height: 23px;">
                            <label style="font-size:medium;color:#0a1971">Fees</label>
                        </div>
                        <div class="pt-1">
                            <SfTab CssClass="e-tab">
                                <TabEvents Selected="TabSelected"></TabEvents>
                                <TabAnimationSettings>
                                    <TabAnimationPrevious Effect="Syncfusion.Blazor.AnimationEffect.None"></TabAnimationPrevious>
                                    <TabAnimationNext Effect="Syncfusion.Blazor.AnimationEffect.None"></TabAnimationNext>
                                </TabAnimationSettings>
                                <TabItems>
                                    <TabItem CssClass="tabs-menu1">
                                        <ChildContent>
                                            <TabHeader Text=@Localizer["Fee Posting"]></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            <div class="box-card-background">
                                                <div class="row">
                                                    <div class="col-md-6 col-sm-6">
                                                        <div class="row" style="padding-left:15px;">
                                                            <fieldset class="fieldset fieldsetclass">
                                                                <legend class="legentclass">Fees Schedule</legend>



                                                                <div class="row">
                                                                    <div class="col-md-2">
                                                                        <SfButton IconCss="Icon save" Disabled="@btnSave" @onclick="@Save_Clicks" Content=@Localizer["Save"] CssClass="e-btn" />
                                                                    </div>
                                                                    <div class="col-md-2">

                                                                        <SfButton IconCss="Icon edit" Disabled="@editab" @onclick="@Edit_Clicks" Content=@Localizer["Edit"] CssClass="e-btn" />
                                                                    </div>
                                                                </div>
                                                                <div class="row">
                                                                    <div class="col-md-5">
                                                                        <label class="label">@Localizer["From"]</label>
                                                                        <SfDatePicker TValue="DateTime" ShowClearButton="true" @bind-Value="@StatementFromDate" Format="dd/MM/yyyy">
                                                                        </SfDatePicker>
                                                                    </div>
                                                                    <div class="col-md-5">
                                                                        <label class="label">@Localizer["To"]</label>
                                                                        <SfDatePicker TValue="DateTime" ShowClearButton="true" @bind-Value="@StatementEndDate" Format="dd/MM/yyyy">
                                                                        </SfDatePicker>
                                                                    </div>
                                                                </div>
                                                                <div class="row">
                                                                    @*<div class="form-group">*@
                                                                    <div class="col-md-6">
                                                                        <label class="label">@Localizer["Fee"]</label>
                                                                        <SfComboBox TValue="string" TItem="SchoolFeeSchedule" Enabled="btnenable" @bind-Value="@DTStudentTrans.FeeSchedule" DataSource="Fee">
                                                                            <ComboBoxFieldSettings Text="FeeSchedule" Value="FeeSchedule"></ComboBoxFieldSettings>
                                                                        </SfComboBox>
                                                                    </div>

                                                                    <div class="col-md-6" style="padding-top:15px">

                                                                        <SfButton Content=@Localizer["Post"] CssClass="e-btn" OnClick="@FeeSchedulePost_Click"></SfButton>
                                                                        <SfButton Content=@Localizer["Depost"] CssClass="e-btn" OnClick="@DepostFee_Click">></SfButton>
                                                                    </div>
                                                                </div>
                                                                @*</div>*@
                                                                <div class="row" style="padding-top:0px;">
                                                                    <div class="col-md-6">
                                                                        <label class="label">@Localizer["Transportation"]</label>
                                                                        <SfComboBox Enabled="btnenable" TValue="string" TItem="SchoolFeeSchedule" @bind-Value="@DTStudentTrans.TransSchedule" DataSource="Transport">
                                                                            <ComboBoxFieldSettings Text="FeeSchedule" Value="FeeSchedule"></ComboBoxFieldSettings>
                                                                        </SfComboBox>
                                                                    </div>
                                                                    <div class="col-md-6" style="padding-top:15px">

                                                                        <SfButton Content=@Localizer["Post"] CssClass="e-btn" OnClick="@TransSchedulePost_Click"></SfButton>
                                                                        <SfButton Content=@Localizer["Depost"] CssClass="e-btn" OnClick="@DepostTrans_Click">></SfButton>

                                                                    </div>
                                                                </div>
                                                                <div class="row" style="padding-top:0px;">
                                                                    <div class="col-md-6">
                                                                        <label class="label">@Localizer["Admission"]</label>
                                                                        <SfComboBox TValue="string" Enabled="btnenable" TItem="SchoolFeeSchedule" @bind-Value="@DTStudentTrans.AdmissionSchedule" DataSource="Admission">
                                                                            <ComboBoxFieldSettings Text="FeeSchedule" Value="FeeSchedule"></ComboBoxFieldSettings>
                                                                        </SfComboBox>
                                                                    </div>
                                                                    <div class="col-md-6" style="padding-top:15px">

                                                                        <SfButton Content=@Localizer["Post"] CssClass="e-btn" OnClick="@AdmnSchedulePost_Click"></SfButton>
                                                                        <SfButton Content=@Localizer["Depost"] CssClass="e-btn" OnClick="@DepostAdmn_Click">></SfButton>

                                                                    </div>
                                                                </div>
                                                                <div class="row" style="padding-top:0px;">
                                                                    <div class="col-md-6">
                                                                        <label class="label">@Localizer["Discount"]</label>
                                                                    </div>
                                                                </div>
                                                                <div class="row" style="padding-top:0px;">
                                                                    <div class="col-md-6">
                                                                        <SfCheckBox @bind-Checked="@DTStudentTrans.FeeDiscount">Fee Discount</SfCheckBox>
                                                                        <SfComboBox TValue="string" Enabled="btnenable" TItem="SchoolDiscountSchedule" @bind-Value="@DTStudentTrans.DiscountSchedule" DataSource="FeeDiscount">
                                                                            <ComboBoxFieldSettings Text="Schedule" Value="Schedule"></ComboBoxFieldSettings>
                                                                        </SfComboBox>
                                                                    </div>
                                                                    <div class="col-md-6" style="padding-top:15px">

                                                                        <SfButton Content=@Localizer["Post"] CssClass="e-btn" OnClick="@FeeDiscountSchedulePost_ClickDiscount1Post"></SfButton>
                                                                        <SfButton Content=@Localizer["Depost"] IsPrimary="true" CssClass="e-btn" OnClick="@DepostFeeDiscount_Click">></SfButton>

                                                                    </div>
                                                                </div>
                                                                <div class="row" style="padding-top:0px;">
                                                                    <div class="col-md-6">
                                                                        <label class="label">@Localizer["Discount 2"]</label>
                                                                    </div>
                                                                </div>
                                                                <div class="row" style="padding-top:0px;">
                                                                    <div class="col-md-6">
                                                                        <SfComboBox TValue="string" Enabled="btnenable" TItem="SchoolDiscountSchedule" @bind-Value="@DTStudentTrans.DiscountSchedule2" DataSource="FeeDiscount">
                                                                            <ComboBoxFieldSettings Text="Schedule" Value="Schedule"></ComboBoxFieldSettings>
                                                                        </SfComboBox>
                                                                    </div>
                                                                    <div class="col-md-6" style="padding-top:0px">

                                                                        <SfButton Content=@Localizer["Post"] CssClass="e-btn" OnClick="@FeeDiscountSchedulePost_ClickDiscount2Post"></SfButton>
                                                                        <SfButton Content=@Localizer["Depost"] IsPrimary="true" CssClass="e-btn" OnClick="@DepostFeeDiscount_Click2">></SfButton>

                                                                    </div>
                                                                </div>

                                                                <div class="row" style="padding-top:0px;">
                                                                    <div class="col-md-6">
                                                                        <label class="label">@Localizer["Discount 3"]</label>
                                                                    </div>
                                                                </div>
                                                                <div class="row" style="padding-top:0px;">
                                                                    <div class="col-md-6">
                                                                        <SfComboBox TValue="string" Enabled="btnenable" TItem="SchoolDiscountSchedule" @bind-Value="@DTStudentTrans.DiscountSchedule3" DataSource="FeeDiscount">
                                                                            <ComboBoxFieldSettings Text="Schedule" Value="Schedule"></ComboBoxFieldSettings>
                                                                        </SfComboBox>
                                                                    </div>
                                                                    <div class="col-md-6" style="padding-top:0px">

                                                                        <SfButton Content=@Localizer["Post"] CssClass="e-btn" OnClick="@FeeDiscountSchedulePost_ClickDiscount3Post"></SfButton>
                                                                        <SfButton Content=@Localizer["Depost"] IsPrimary="true" CssClass="e-btn" OnClick="@DepostFeeDiscount_Click3">></SfButton>

                                                                    </div>
                                                                </div>
                                                                <div class="row" style="padding-top:0px;">
                                                                    <div class="col-md-6">
                                                                        <SfCheckBox @bind-Checked="@DTStudentTrans.TranDiscount">@Localizer["Tran Discount"]</SfCheckBox>
                                                                        <SfComboBox Enabled="btnenable" TValue="string" TItem="SchoolDiscountSchedule" @bind-Value="@DTStudentTrans.TranDiscountSchedule" DataSource="TranDiscount">
                                                                            <ComboBoxFieldSettings Text="Schedule" Value="Schedule"></ComboBoxFieldSettings>
                                                                        </SfComboBox>
                                                                    </div>
                                                                    <div class="col-md-6" style="padding-top:15px">

                                                                        <SfButton Content=@Localizer["Post"] CssClass="e-btn" OnClick="@TranDiscountPost_Click"></SfButton>
                                                                        @*<SfButton Content="Depost" IsPrimary="true" CssClass="e-btn" OnClick="@DepostTranDiscount_Click">></SfButton>*@

                                                                    </div>
                                                                </div>
                                                                <div class="row" style="padding-top:15px;">
                                                                    <div class="col-md-6" style="padding-top:15px">
                                                                        @*<BSAlert Color="BlazorStrap.Color.Success" @bind-IsOpen="@IsOpen" AutoHide="true">
                                                                    @ImportMessages
                                                                    </BSAlert>*@
                                                                        <SfButton Content=@Localizer["Post All"] CssClass="e-btn" OnClick="@PostAll_Click"></SfButton>
                                                                        <SfButton Content=@Localizer["Depost All"] CssClass="e-btn" OnClick="@DepostAll_Click"></SfButton>
                                                                    </div>

                                                                </div>
                                                            </fieldset>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </ContentTemplate>
                                    </TabItem>
                                    <TabItem CssClass="tabs-menu1">
                                        <ChildContent>
                                            <TabHeader Text=@Localizer["Tax Invoice"]></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            <div class="panel-body tabs-menu-body hremp-tabs1 p-0">
                                                <div class="tab-content">
                                                    <div class="box-card-background tab-pane active" id="tab5">
                                                        <div class="row" style="padding-top:5px">
                                                            <div class="col-md-6">
                                                                <label class="label">@Localizer["From Date"]</label>
                                                                <SfDatePicker AllowEdit="false" TValue="DateTime" @bind-Value="@StatementFromDate" ShowClearButton="true" Format="dd/MM/yyyy">
                                                                </SfDatePicker>
                                                            </div>
                                                            <div class="col-md-6">
                                                                <label class="label">@Localizer["To Date"]</label>
                                                                <SfDatePicker AllowEdit="false" TValue="DateTime" @bind-Value="@StatementEndDate" ShowClearButton="true" Format="dd/MM/yyyy">
                                                                </SfDatePicker>
                                                            </div>
                                                        </div>
                                                        <div class="row">
                                                            <div class="col-md-6">
                                                                <label class="label">@Localizer["Invoice Date"]</label>
                                                                <SfDatePicker AllowEdit="false" @bind-Value="@Taxvoicedate" TValue="DateTime" ShowClearButton="true" Format="dd/MM/yyyy">
                                                                </SfDatePicker>
                                                            </div>
                                                            <div class="col-md-1" style="padding-top:10px;">
                                                                <label class="label" style="font-weight: bolder; padding-top: 10px;">Generate</label>
                                                                <BlazorStrap.BSAlert Color="BlazorStrap.Color.Success" @bind-IsOpen="@IsOpen" AutoHide="true">
                                                                    @ImportMessage2
                                                                </BlazorStrap.BSAlert>
                                                                <BlazorStrap.BSAlert Color="BlazorStrap.Color.Danger" @bind-IsOpen="@IsOpenDanger" AutoHide="true">
                                                                    @ImportMessage7
                                                                </BlazorStrap.BSAlert>
                                                            </div>

                                                            <div class="col-md-1" style="padding-top:10px;">

                                                                <SfButton CssClass="e-btn2" OnClick="@Taxinvoicegenerate_Click">@Localizer["InvoiceWise"]</SfButton>
                                                            </div>

                                                            @*<div class="col-md-3" style="padding-top:10px;">
                                                        <SfButton CssClass="e-btn">Collected</SfButton>
                                                        </div>*@
                                                        </div>

                                                        <div class="row" style="padding-top:10px;">
                                                            <div class="col-md-12 col-sm-12">

                                                                <div class="table-responsive" style="position: relative; min-width: 300px ">
                                                                    <SfGrid DataSource="@GetSchoolTaxInvoice" ID="feerevss" @ref="GetSchoolTaxInvoices"
                                                                            GridLines="GridLine.Both"
                                                                            AllowFiltering="true"
                                                                            AllowPaging="true"
                                                                            AllowExcelExport="true"
                                                                            AllowPdfExport="true"
                                                                            Width="100%"
                                                                            ShowColumnChooser="true"
                                                                            AllowResizing="true"
                                                                            AllowSorting="true"
                                                                            EnableAltRow="true"
                                                                            RowHeight="25">
                                                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
                                                                        <GridPageSettings PageSize="50"></GridPageSettings>
                                                                        <GridSelectionSettings PersistSelection="true" CheckboxOnly="true" Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Multiple" EnableToggle=true></GridSelectionSettings>
                                                                        <GridColumns>
                                                                            <GridColumn Type="ColumnType.CheckBox" AllowFiltering="false" AllowSorting="false" Index="0" Width="30">
                                                                            </GridColumn>
                                                                            <GridColumn Field=@nameof(SchoolTaxInvoicedt.InvoiceNo) HeaderText=@Localizer["InvoiceNo"] Width="80"></GridColumn>
                                                                            <GridColumn Field=@nameof(SchoolTaxInvoicedt.Date) HeaderText=@Localizer["InvoiceDate"] Width="80" Format="dd/MM/yyyy"></GridColumn>

                                                                            <GridColumn Field=@nameof(SchoolTaxInvoicedt.accountcode) HeaderText=@Localizer["AccountCode"] Width="80"></GridColumn>
                                                                            <GridColumn Field=@nameof(SchoolTaxInvoicedt.accountname) HeaderText=@Localizer["Name"] Width="90"></GridColumn>
                                                                            <GridColumn Field=@nameof(SchoolTaxInvoicedt.Class) HeaderText=@Localizer["Class"] Width="70"></GridColumn>
                                                                            <GridColumn Field=@nameof(SchoolTaxInvoicedt.division) HeaderText=@Localizer["Division"] Width="60"></GridColumn>
                                                                            <GridColumn Field=@nameof(SchoolTaxInvoicedt.Username) HeaderText=@Localizer["Username"] Width="60"></GridColumn>

                                                                            @*<GridColumn Field=@nameof(SchoolTaxInvoicedt.invno) HeaderText="Vno" Width="80"></GridColumn>*@
                                                                            @*<GridColumn Field=@nameof(SchoolTaxInvoicedt.invoicedate) HeaderText="VDate" Width="80" Format="dd/MM/yyyy"></GridColumn>*@
                                                                            <GridColumn Field=@nameof(SchoolTaxInvoicedt.amount) HeaderText=@Localizer["Amount"] Width="80" Format="0.00"></GridColumn>

                                                                            <GridColumn Field=@nameof(SchoolTaxInvoicedt.email) HeaderText=@Localizer["Email"] Width="100"></GridColumn>
                                                                            <GridColumn Width="30px" HeaderText="Show">
                                                                                <Template Context="MasterContext">
                                                                                    @{
                                                                                        var id = (MasterContext as SchoolTaxInvoicedt).id;
                                                                                        <a @onclick="@(() => { OnShow(id); })"><img src="Images/Forward.png" style="height:20px;width:20px; cursor:pointer;" /></a>
                                                                                    }
                                                                                </Template>
                                                                            </GridColumn>
                                                                        </GridColumns>
                                                                    </SfGrid>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </ContentTemplate>
                                    </TabItem>

                                    <TabItem CssClass="tabs-menu1">
                                        <ChildContent>
                                            <TabHeader Text=@Localizer["Additional Fee"]></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            <div class="panel-body tabs-menu-body hremp-tabs1 p-0">
                                                <div class="tab-content">
                                                    <div class="tab-pane active" id="tab5">
                                                        <div class="box-card-background">
                                                            <div class="row">


                                                                <div class="col-md-12">
                                                                    @*<SfButton IconCss="Icon add" Disabled="@btnAdd" @onclick="@New_Click" Content="New" CssClass="e-btn" />
                                                                <SfButton IconCss="Icon save" Disabled="@btnSave" @onclick="@Save_Click" Content="Save" CssClass="e-btn" />
                                                                <SfButton IconCss="Icon edit" Disabled="@btnEdit" @onclick="@Edit_Click" Content="Edit" CssClass="e-btn" />*@



                                                                </div>
                                                                <div class="form-group col-md-3">
                                                                    <label class="label">@Localizer["Date"]</label>
                                                                    <SfDatePicker TValue="DateTime" CssClass="textbox" @bind-Value="@FeeDetails.FromDate" Format="dd/MM/yyyy"></SfDatePicker>
                                                                </div>
                                                                <div class="form-group col-md-3">
                                                                    <label class="label">@Localizer["Fee Name"]</label>
                                                                    <SfComboBox TValue="string" TItem="dtAdditionalFee" @bind-Value="@FeeDetails.Activity" DataSource="AdditionalFee">
                                                                        <ComboBoxFieldSettings Text="Description" Value="Description"></ComboBoxFieldSettings>
                                                                        <ComboBoxEvents TValue="string" TItem="dtAdditionalFee" ValueChange="onChangeAdditionalFeeCategory"></ComboBoxEvents>
                                                                    </SfComboBox>
                                                                </div>
                                                                <div class="form-group col-md-3">
                                                                    <label class="label">@Localizer["Amount"]</label>
                                                                    <SfNumericTextBox TValue="decimal" ShowSpinButton="false" Decimals="2" Min="0" @bind-Value="@FeeDetails.Amount" Placeholder="@FeeDetailsAmount" EnableRtl="true">
                                                                    </SfNumericTextBox>
                                                                </div>
                                                                <div class="form-group col-md-3" style="padding-top:15px">
                                                                    <SfButton Content=@Localizer["Post"] OnClick="@postfee" CssClass="e-btn w-100"></SfButton>


                                                                </div>

                                                                @*<div class="box-card-shadow">
                                                            <div class="table-responsive" style="position: relative; min-width: 300px ">
                                                            <SfGrid DataSource="@StudAdditionalPayment" ID="FeeGrid"
                                                            @ref="FeeGrid"
                                                            GridLines="GridLine.Both"
                                                            AllowResizing="true"
                                                            AllowSorting="true"
                                                            EnableAltRow="true"
                                                            RowHeight="25">

                                                            <GridSelectionSettings PersistSelection="true" Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
                                                            <GridPageSettings PageSize="100" PageSizes="true"></GridPageSettings>
                                                            <GridEvents TValue="SchoolAdditionalPayment"></GridEvents>

                                                            <GridColumns>
                                                            <GridColumn Field=@nameof(SchoolAdditionalPayment.Id) IsPrimaryKey="true" Visible="false" Width="120" />
                                                            <GridColumn Field=@nameof(SchoolAdditionalPayment.FromDate) HeaderText="Date" Format="dd/MM/yyyy" Type="ColumnType.Date" Width="150" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right"></GridColumn>
                                                            <GridColumn Field=@nameof(SchoolAdditionalPayment.Activity) HeaderText="Description" Width="150" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right"></GridColumn>
                                                            <GridColumn Field=@nameof(SchoolAdditionalPayment.Amount) HeaderText="Amount" Width="150" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00"></GridColumn>
                                                            <GridColumn Field=@nameof(SchoolAdditionalPayment.PostTo) HeaderText="PostTo" Width="150" Visible="false"></GridColumn>
                                                            <GridColumn Field=@nameof(SchoolAdditionalPayment.Type) HeaderText="Type" Width="150" Visible="false"></GridColumn>
                                                            <GridColumn Field=@nameof(SchoolAdditionalPayment.Repeat) HeaderText="Repeat" Width="150" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right"></GridColumn>

                                                            <GridColumn Width="40px" HeaderText="Show" TextAlign="TextAlign.Center">

                                                            <Template Context="ContextNoteS">
                                                            @{ var ID = (ContextNoteS as SchoolAdditionalPayment).Id;
                                                            <a @onclick="@(() => { EditShows(ID); })"><img src="Images/View.png" style="height:20px;width:20px; cursor:pointer;" /></a>
                                                            }
                                                            </Template>
                                                            </GridColumn>
                                                            <GridColumn Width="40px" HeaderText="Post" TextAlign="TextAlign.Center">

                                                            <Template Context="ContextNote">
                                                            @{ var FeeID = (ContextNote as SchoolAdditionalPayment).Id;
                                                            <a @onclick="@(() => { AdditionalFeePost(FeeID); })"><img src="Images/post.png" style="height:20px;width:20px" title="Post"></a>
                                                            }
                                                            </Template>
                                                            </GridColumn>

                                                            </GridColumns>
                                                            </SfGrid>
                                                            </div>

                                                            </div>*@
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </ContentTemplate>
                                    </TabItem>

                                    <TabItem CssClass="tabs-menu1">
                                        <ChildContent>
                                            <TabHeader Text=@Localizer["Additional Discount"]></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            <div class="panel-body tabs-menu-body hremp-tabs1 p-0">
                                                <div class="tab-content">
                                                    <div class="tab-pane active" id="tab5">
                                                        <div class="box-card-background">
                                                            <div class="row">
                                                                <div class="col-md-12">
                                                                    <div>
                                                                        <div class="row">


                                                                            <div class="col-md-12">
                                                                                @*<SfButton IconCss="Icon add" Disabled="@btnAdd" @onclick="@New_Click" Content="New" CssClass="e-btn" />
                                                                            <SfButton IconCss="Icon save" Disabled="@btnSave" @onclick="@Save_Click" Content="Save" CssClass="e-btn" />
                                                                            <SfButton IconCss="Icon edit" Disabled="@btnEdit" @onclick="@Edit_Click" Content="Edit" CssClass="e-btn" />*@



                                                                            </div>
                                                                            <div class="form-group col-md-3">
                                                                                <label class="label">@Localizer["Date"]</label>
                                                                                <SfDatePicker TValue="DateTime" CssClass="textbox" @bind-Value="@FeeDetails.FromDate" Format="dd/MM/yyyy"></SfDatePicker>
                                                                            </div>
                                                                            <div class="form-group col-md-3">
                                                                                <label class="label">@Localizer["Discount Name"]</label>
                                                                                <SfComboBox TValue="string" TItem="dtAdditionalFee" @bind-Value="@FeeDetails.Activity" DataSource="AdditionalDiscount">
                                                                                    <ComboBoxFieldSettings Text="Description" Value="Description"></ComboBoxFieldSettings>
                                                                                    <ComboBoxEvents TValue="string" TItem="dtAdditionalFee" ValueChange="onChangeAdditionalFeeCategory"></ComboBoxEvents>
                                                                                </SfComboBox>
                                                                            </div>
                                                                            <div class="form-group col-md-3">
                                                                                <label class="label">@Localizer["Amount"]</label>
                                                                                <SfNumericTextBox TValue="decimal" ShowSpinButton="false" Decimals="2" Min="0" @bind-Value="@FeeDetails.Amount" Placeholder="@FeeDetailsAmount" EnableRtl="true">
                                                                                </SfNumericTextBox>
                                                                            </div>
                                                                            <div class="form-group col-md-3" style="padding-top:15px">
                                                                                <SfButton Content=@Localizer["Post"] OnClick="@postdiscount" CssClass="e-btn w-100"></SfButton>

                                                                            </div>

                                                                            <!--<div class="box-card-shadow">
                                                                            <div class="table-responsive" style="position: relative; min-width: 300px ">
                                                                                <SfGrid DataSource="@StudAdditionalDiscount" ID="FeeGrid"
                                                                            @ref="FeeGrid"
                                                                                        GridLines="GridLine.Both"
                                                                                        AllowResizing="true"
                                                                                        AllowSorting="true"
                                                                                        EnableAltRow="true"
                                                                                        RowHeight="25">

                                                                                    <GridSelectionSettings PersistSelection="true" Type="Syncfusion.Blazor.Grids.SelectionType.Multiple"></GridSelectionSettings>
                                                                                    <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
                                                                                    <GridPageSettings PageSize="100" PageSizes="true"></GridPageSettings>
                                                                                    <GridEvents TValue="SchoolAdditionalPayment"></GridEvents>-->
                                                                            @*<Template Context="DialogContext">
                                                                        @{ FeeDetails = (DialogContext as SchoolAdditionalPayment); }
                                                                        <div>
                                                                        @if (AddMode == "Add")
                                                                        {
                                                                        <div class="form-row" style="padding-left:20px; padding-right:20px;">
                                                                        <div class="form-group col-md-4">
                                                                        <label class="label">Date</label>
                                                                        <SfDatePicker @bind-Value="@FeeDetails.FromDate" CssClass="textbox" Format="dd/MM/yyyy"></SfDatePicker>
                                                                        </div>
                                                                        <div class="form-group col-md-4">
                                                                        <label class="label">Category</label>
                                                                        <SfComboBox TValue="string" TItem="dtAdditionalFee" @bind-Value="@FeeDetails.Activity" DataSource="AdditionalDiscount">
                                                                        <ComboBoxFieldSettings Text="Description" Value="Description"></ComboBoxFieldSettings>
                                                                        <ComboBoxEvents TValue="string" TItem="dtAdditionalFee" ValueChange="onChangeAdditionalFeeCategory"></ComboBoxEvents>
                                                                        </SfComboBox>
                                                                        </div>
                                                                        </div> }
                                                                        else
                                                                        {
                                                                        <div class="form-group col-md-4">
                                                                        <label class="label">Amount</label>
                                                                        <SfNumericTextBox TValue="decimal" ShowSpinButton="false" Decimals="2" Min="0" @bind-Value="@FeeDetails.Amount" Placeholder="@FeeDetailsAmount" EnableRtl="true">
                                                                        </SfNumericTextBox>
                                                                        </div>}
                                                                        </div>
                                                                        </Template>*@
                                                                            <!--<GridColumns>
                                                                                            <GridColumn Field=@nameof(SchoolAdditionalPayment.Id) IsPrimaryKey="true" Visible="false" Width="120" />

                                                                                            <GridColumn Field=@nameof(SchoolAdditionalPayment.FromDate) HeaderText="Date" Format="dd/MM/yyyy" Type="ColumnType.Date" Width="150" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right"></GridColumn>
                                                                                            <GridColumn Field=@nameof(SchoolAdditionalPayment.Activity) HeaderText="Description" Width="150" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right"></GridColumn>
                                                                                            <GridColumn Field=@nameof(SchoolAdditionalPayment.Amount) HeaderText="Amount" Width="150" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right" Format="0.00"></GridColumn>
                                                                                            <GridColumn Field=@nameof(SchoolAdditionalPayment.Repeat) HeaderText="Repeat" Width="150" HeaderTextAlign="TextAlign.Left" TextAlign="TextAlign.Right"></GridColumn>

                                                                                            <GridColumn Field=@nameof(SchoolAdditionalPayment.PostTo) HeaderText="PostTo" Width="150" Visible="false"></GridColumn>
                                                                                            <GridColumn Field=@nameof(SchoolAdditionalPayment.Type) HeaderText="Type" Width="150" Visible="false"></GridColumn>
                                                                                            <GridColumn Width="40px" HeaderText="Show" TextAlign="TextAlign.Center">
                                                                                                <Template Context="ContextNoteS">
                                                                            @{
                                                                                var ID = (ContextNoteS as SchoolAdditionalPayment).Id;
                                                                                                                <a @onclick="@(() => { EditShow(ID); })"><img src="Images/View.png" style="height:20px;width:20px; cursor:pointer;" /></a>
                                                                            }
                                                                                                </Template>

                                                                                            </GridColumn>
                                                                                            <GridColumn Width="40px" HeaderText="Post" TextAlign="TextAlign.Center">

                                                                                                <Template Context="ContextNote">
                                                                            @{
                                                                                var FeeID = (ContextNote as SchoolAdditionalPayment).Id;
                                                                                                                <a @onclick="@(() => { AdditionalDiscountPost(FeeID); })"><img src="Images/post.png" style="height:20px;width:20px" title="Post" /></a>
                                                                            }
                                                                                                </Template>
                                                                                            </GridColumn>

                                                                                        </GridColumns>
                                                                                    </SfGrid>
                                                                                </div>

                                                                            </div>-->
                                                                        </div>


                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </ContentTemplate>
                                    </TabItem>
                                    <TabItem CssClass="tabs-menu1">
                                        <ChildContent>
                                            <TabHeader Text=@Localizer["Fee Edit"]></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            <div class="panel-body tabs-menu-body hremp-tabs1 p-0">
                                                <div class="tab-content">
                                                    <div class="tab-pane active" id="tab5">
                                                        <div class="box-card-background">
                                                            <div class="row" style="padding-top:5px">
                                                                <div class="col-md-4">
                                                                    <BlazorStrap.BSAlert Color="BlazorStrap.Color.Danger" @bind-IsOpen="@IsVoucherAllocation" AutoHide="true">
                                                                        VoucherAllocation already exist <a><i aria-hidden="true"></i></a>
                                                                    </BlazorStrap.BSAlert>
                                                                    <BlazorStrap.BSAlert Color="BlazorStrap.Color.Success" @bind-IsOpen="@IsOpenUpdate" AutoHide="true">
                                                                        Successfully Updated <a><i class="fa fa-check" aria-hidden="true"></i></a>
                                                                    </BlazorStrap.BSAlert>
                                                                    <BlazorStrap.BSAlert Color="BlazorStrap.Color.Danger" @bind-IsOpen="@IsOpenUpdateFailed" AutoHide="true">
                                                                        Failed to Update <a><i aria-hidden="true"></i></a>
                                                                    </BlazorStrap.BSAlert>
                                                                    <BlazorStrap.BSAlert Color="BlazorStrap.Color.Success" @bind-IsOpen="@IsOpenDelete" AutoHide="true">
                                                                        Successfully Deleted <a><i class="fa fa-check" aria-hidden="true"></i></a>
                                                                    </BlazorStrap.BSAlert>
                                                                    <BlazorStrap.BSAlert Color="BlazorStrap.Color.Danger" @bind-IsOpen="@IsOpenDeleteFailed" AutoHide="true">
                                                                        Failed to Delete <a><i aria-hidden="true"></i></a>
                                                                    </BlazorStrap.BSAlert>
                                                                </div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col-md-12 col-sm-12">
                                                                    @*<div class="row" style="padding-top:0px;">*@
                                                                    <div class="table-responsive" style="position: relative; min-width: 300px ">
                                                                        @if (StudFeeDetails.Count() <= 0 || StudFeeDetails == null)
                                                                        {
                                                                            <p><em>No Data...</em></p>
                                                                        }
                                                                        else
                                                                        {
                                                                            <SfGrid DataSource="@StudFeeDetails" ID="gridFee"
                                                                                    @ref="GridFee"
                                                                                    GridLines="GridLine.Both"
                                                                                    Width="100%"
                                                                                    AllowResizing="true">
                                                                                <GridEditSettings AllowAdding="true" AllowDeleting="true" AllowEditing="true"></GridEditSettings>
                                                                                <GridEvents OnActionBegin="OnActionBegin" TValue="dtStudentFeeDetails"></GridEvents>
                                                                                @*<GridAggregates>
                                                                        <GridAggregate>
                                                                        <GridAggregateColumns>


                                                                        <GridAggregateColumn Field=@nameof(dtStudentFeeDetails.Balance) Type="AggregateType.Custom" Format="n2">
                                                                        <FooterTemplate Context="FooterContext">
                                                                        @{ var aggregate = (FooterContext as AggregateTemplateContext);

                                                                        <div>
                                                                        <p>@GetBalanceAggregates()</p>
                                                                        </div>
                                                                        }
                                                                        </FooterTemplate>
                                                                        </GridAggregateColumn>
                                                                        </GridAggregateColumns>
                                                                        </GridAggregate>
                                                                        </GridAggregates>*@

                                                                                <GridAggregates>
                                                                                    <GridAggregate>
                                                                                        <GridAggregateColumns>
                                                                                            @*   <GridAggregateColumn Field=@nameof(dtStudentFeeDetails.FeeAmount) Type="AggregateType.Sum" Format="n2">
                                                                                    <FooterTemplate Context="FooterContext">
                                                                                    @{
                                                                                    var aggregate = (FooterContext as AggregateTemplateContext);
                                                                                    <div>
                                                                                    <p> @aggregate.Sum</p>
                                                                                    </div>
                                                                                    }
                                                                                    </FooterTemplate>
                                                                                    </GridAggregateColumn>*@
                                                                                            <GridAggregateColumn Field=@nameof(dtStudentFeeDetails.Allocated) Type="AggregateType.Sum" Format="n2">
                                                                                                <FooterTemplate Context="FooterContext">
                                                                                                    @{
                                                                                                        var aggregate = (FooterContext as AggregateTemplateContext);
                                                                                                        <div>
                                                                                                            <p> @aggregate.Sum</p>
                                                                                                        </div>
                                                                                                    }
                                                                                                </FooterTemplate>
                                                                                            </GridAggregateColumn>
                                                                                            <GridAggregateColumn Field=@nameof(dtStudentFeeDetails.Paid) Type="AggregateType.Sum" Format="n2">
                                                                                                <FooterTemplate Context="FooterContext">
                                                                                                    @{
                                                                                                        var aggregate = (FooterContext as AggregateTemplateContext);
                                                                                                        <div>
                                                                                                            <p> @aggregate.Sum</p>
                                                                                                        </div>
                                                                                                    }
                                                                                                </FooterTemplate>
                                                                                            </GridAggregateColumn>
                                                                                            <GridAggregateColumn Field=@nameof(dtStudentFeeDetails.Discount) Type="AggregateType.Sum" Format="n2">
                                                                                                <FooterTemplate Context="FooterContext">
                                                                                                    @{
                                                                                                        var aggregate = (FooterContext as AggregateTemplateContext);
                                                                                                        <div>
                                                                                                            <p> @aggregate.Sum</p>
                                                                                                        </div>
                                                                                                    }
                                                                                                </FooterTemplate>
                                                                                            </GridAggregateColumn>
                                                                                            <GridAggregateColumn Field=@nameof(dtStudentFeeDetails.Vat) Type="AggregateType.Sum" Format="n2">
                                                                                                <FooterTemplate Context="FooterContext">
                                                                                                    @{
                                                                                                        var aggregate = (FooterContext as AggregateTemplateContext);
                                                                                                        <div>
                                                                                                            <p> @aggregate.Sum</p>
                                                                                                        </div>
                                                                                                    }
                                                                                                </FooterTemplate>
                                                                                            </GridAggregateColumn>

                                                                                        </GridAggregateColumns>
                                                                                    </GridAggregate>
                                                                                </GridAggregates>
                                                                                <GridColumns>
                                                                                    <GridColumn Field=@nameof(dtStudentFeeDetails.ID) Visible="false" Width="120" IsPrimaryKey="true" />

                                                                                    <GridColumn Field=@nameof(dtStudentFeeDetails.VNo) Visible="true" Width="70" />
                                                                                    <GridColumn Field=@nameof(dtStudentFeeDetails.VDate) Visible="true" HeaderText=@Localizer["Date"] Width="80" Format="dd/MM/yyyy" AllowEditing="false" />
                                                                                    @*@<GridColumn Field=@nameof(dtStudentFeeDetails.VoucherAgainst) Visible="true" Width="100" AllowEditing="false" />@*@
                                                                                    <GridColumn Field=@nameof(dtStudentFeeDetails.CommonNarration) HeaderText=@Localizer["Description"] Visible="true" Width="200" AllowEditing="false" />
                                                                                    <GridColumn Field=@nameof(dtStudentFeeDetails.FeeAmount) HeaderText=@Localizer["Amount"] EditType="EditType.NumericEdit" EditorSettings="@PriceEditParams" CustomAttributes="@(new Dictionary<string, object>() { { "class", "e-attr" } })" TextAlign="TextAlign.Right" Format="n2" Visible="true" Width="100" />
                                                                                    <GridColumn Field=@nameof(dtStudentFeeDetails.Allocated) EditType="EditType.NumericEdit" EditorSettings="@PriceEditParams" HeaderText=@Localizer["Allocated"] Visible="false" Width="60" AllowEditing="false" />
                                                                                    @*<GridColumn Field=@nameof(dtStudentFeeDetails.Paid) EditType="EditType.NumericEdit" EditorSettings="@PriceEditParams" HeaderText="Paid" CustomAttributes="@(new Dictionary<string, object>() { { "class", "e-attr" } })" TextAlign="TextAlign.Right" Format="n2" Visible="true" Width="80" />*@

                                                                                    @*<GridColumn Field=@nameof(dtStudentFeeDetails.Vat) CustomAttributes="@(new Dictionary<string, object>() { { "class", "e-attr" } })" TextAlign="TextAlign.Right" Format="n2" Visible="true" Width="120" AllowEditing="false" />*@
                                                                                    @*<GridColumn Field=@nameof(dtStudentFeeDetails.VatType) Visible="true" Width="70" AllowEditing="false" />*@

                                                                                    @*<GridColumn Field=@nameof(dtStudentFeeDetails.Discount) EditType="EditType.NumericEdit" EditorSettings="@PriceEditParams" HeaderText="Discount" CustomAttributes="@(new Dictionary<string, object>() { { "class", "e-attr" } })" TextAlign="TextAlign.Right" Format="n2" Visible="true" Width="80" />*@



                                                                                    @*<GridColumn Field=@nameof(dtStudentFeeDetails.Balance) EditType="EditType.NumericEdit" EditorSettings="@PriceEditParams" HeaderText="Balance" Width="80" CustomAttributes="@(new Dictionary<string, object>() { { "class", "e-attr" } })" TextAlign="TextAlign.Right" Format="n2"></GridColumn>*@
                                                                                    @*<GridColumn Field=@nameof(dtStudentFeeDetails.Balance) HeaderText="Balance" Format="n2" TextAlign="TextAlign.Right" Width="120">
                                                                            <Template Context="ContextBalance">
                                                                            @{
                                                                            var value = (ContextBalance as dtStudentFeeDetails);
                                                                            var finalAmount = (value.FeeAmount - value.AllocatedAmount).ToString("0.00");
                                                                            <div>@finalAmount</div>
                                                                            }
                                                                            </Template>
                                                                            </GridColumn>*@
                                                                                    <GridColumn HeaderText="Manage Records" Width="100">
                                                                                        <GridCommandColumns>
                                                                                            <GridCommandColumn Type="CommandButtonType.Edit" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-edit" })"></GridCommandColumn>
                                                                                            <GridCommandColumn Type="CommandButtonType.Delete" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-delete" })"></GridCommandColumn>
                                                                                            <GridCommandColumn Type="CommandButtonType.Save" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-save" })"></GridCommandColumn>
                                                                                            <GridCommandColumn Type="CommandButtonType.Cancel" ButtonOption="@(new CommandButtonOptions() { IconCss = "e-icons e-cancel-icon" })"></GridCommandColumn>
                                                                                        </GridCommandColumns>
                                                                                    </GridColumn>

                                                                                    @*<GridColumn Width="30">
                                                                            <Template Context="DialogContext">
                                                                            @{ var VNo = (DialogContext as dtStudentFeeDetails).VNo;
                                                                            <div>
                                                                            <a @onclick="@(() => { Edit_Click(VNo); })"><img src="Images/Pencil.png" style="height: 20px; width: 20px; cursor: pointer;" /></a>
                                                                            </div> }
                                                                            </Template>
                                                                            </GridColumn>
                                                                            <GridColumn Width="30">
                                                                            <Template Context="DialogContext">
                                                                            @{ var VNo = (DialogContext as dtStudentFeeDetails).VNo;
                                                                            <div>
                                                                            <a @onclick="@(() => { Edit_Click(VNo); })"><img src="Images/Delete.jpeg" style="height: 20px; width: 20px; cursor: pointer;" /></a>
                                                                            </div> }
                                                                            </Template>
                                                                            </GridColumn>*@
                                                                                </GridColumns>
                                                                            </SfGrid>
                                                                        }
                                                                    </div>
                                                                    @*</div>*@
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </ContentTemplate>
                                    </TabItem>


                                    <TabItem CssClass="tabs-menu1">
                                        <ChildContent>
                                            <TabHeader Text=@Localizer["FeeWise"]></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            <div class="panel-body tabs-menu-body hremp-tabs1 p-0">
                                                <div class="tab-content">
                                                    <div class="tab-pane active" id="tab5">
                                                        <div class="box-card-background">
                                                            <div class="row" style="padding-top:5px">
                                                                <div class="col-md-4">
                                                                    <BlazorStrap.BSAlert Color="BlazorStrap.Color.Danger" @bind-IsOpen="@IsVoucherAllocation" AutoHide="true">
                                                                        VoucherAllocation already exist <a><i aria-hidden="true"></i></a>
                                                                    </BlazorStrap.BSAlert>
                                                                    <BlazorStrap.BSAlert Color="BlazorStrap.Color.Success" @bind-IsOpen="@IsOpenUpdate" AutoHide="true">
                                                                        Successfully Updated <a><i class="fa fa-check" aria-hidden="true"></i></a>
                                                                    </BlazorStrap.BSAlert>
                                                                    <BlazorStrap.BSAlert Color="BlazorStrap.Color.Danger" @bind-IsOpen="@IsOpenUpdateFailed" AutoHide="true">
                                                                        Failed to Update <a><i aria-hidden="true"></i></a>
                                                                    </BlazorStrap.BSAlert>
                                                                    <BlazorStrap.BSAlert Color="BlazorStrap.Color.Success" @bind-IsOpen="@IsOpenDelete" AutoHide="true">
                                                                        Successfully Deleted <a><i class="fa fa-check" aria-hidden="true"></i></a>
                                                                    </BlazorStrap.BSAlert>
                                                                    <BlazorStrap.BSAlert Color="BlazorStrap.Color.Danger" @bind-IsOpen="@IsOpenDeleteFailed" AutoHide="true">
                                                                        Failed to Delete <a><i aria-hidden="true"></i></a>
                                                                    </BlazorStrap.BSAlert>
                                                                </div>
                                                            </div>
                                                            <div class="row">
                                                                <div class="col-md-12 col-sm-12">
                                                                    <div class="table-responsive" style="position: relative; min-width: 300px ">
                                                                        @*@if (StudFeeDetails.Count() <= 0 || StudFeeDetails == null)
                                                                    {
                                                                    <p><em>No Data...</em></p>
                                                                    }
                                                                    else
                                                                    {*@
                                                                        <SfGrid DataSource="@StudFeeRegisters" ID="gv_StudentFeeRegister" @ref="gv_StudentFeeRegisters"
                                                                                GridLines="GridLine.Both"
                                                                                AllowFiltering="true"
                                                                                AllowPaging="true"
                                                                                AllowExcelExport="true"
                                                                                AllowPdfExport="true"
                                                                                Width="100%"
                                                                                ShowColumnChooser="true"
                                                                                AllowResizing="true"
                                                                                AllowSorting="true"
                                                                                EnableAltRow="true"
                                                                                RowHeight="20">
                                                                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
                                                                            <GridPageSettings PageSize="50"></GridPageSettings>

                                                                            <GridAggregates>
                                                                                <GridAggregate>
                                                                                    <GridAggregateColumns>
                                                                                        <GridAggregateColumn Format="0.00" Field=@nameof(dtStudentFeeRegister.Debit) Type="AggregateType.Sum">
                                                                                            <FooterTemplate Context="cont">
                                                                                                @{
                                                                                                    var aggregate = (cont as AggregateTemplateContext);
                                                                                                    <div style="padding-top:5px;">
                                                                                                        <div style="font-size:13px; position: absolute; left: 7px;">TOTAL AMOUNT </div> <div style="align-items:end;">@aggregate.Sum</div>
                                                                                                    </div>
                                                                                                }
                                                                                            </FooterTemplate>
                                                                                        </GridAggregateColumn>

                                                                                        <GridAggregateColumn Format="0.00" Field=@nameof(dtStudentFeeRegister.Credit) Type="AggregateType.Sum">
                                                                                            <FooterTemplate Context="cont">
                                                                                                @{
                                                                                                    var aggregate = (cont as AggregateTemplateContext);
                                                                                                    <div>
                                                                                                        <div style="align-items:end;">@aggregate.Sum</div>

                                                                                                    </div>
                                                                                                }
                                                                                            </FooterTemplate>
                                                                                        </GridAggregateColumn>

                                                                                        <GridAggregateColumn Format="0.00" Field=@nameof(dtStudentFeeRegister.Paid) Type="AggregateType.Sum">
                                                                                            <FooterTemplate Context="cont">
                                                                                                @{
                                                                                                    var aggregate = (cont as AggregateTemplateContext);
                                                                                                    <div>
                                                                                                        <div style="align-items:end;">@aggregate.Sum</div>

                                                                                                    </div>
                                                                                                }
                                                                                            </FooterTemplate>
                                                                                        </GridAggregateColumn>
                                                                                        <GridAggregateColumn Format="0.00" Field=@nameof(dtStudentFeeRegister.Balance) Type="AggregateType.Sum">
                                                                                            <FooterTemplate Context="cont">
                                                                                                @{
                                                                                                    var aggregate = (cont as AggregateTemplateContext);
                                                                                                    <div>

                                                                                                        <div style="align-items:end;">@aggregate.Sum</div>

                                                                                                    </div>
                                                                                                }
                                                                                            </FooterTemplate>
                                                                                        </GridAggregateColumn>
                                                                                    </GridAggregateColumns>
                                                                                </GridAggregate>
                                                                            </GridAggregates>

                                                                            <GridColumns>

                                                                                <GridColumn Field=@nameof(dtStudentFeeRegister.VID) Width="120" Visible="false"></GridColumn>
                                                                                <GridColumn Field=@nameof(dtStudentFeeRegister.VNo) Width="80" Visible="false"></GridColumn>

                                                                                <GridColumn Field=@nameof(dtStudentFeeRegister.Date) HeaderText=@Localizer["Date"] Width="120" Format="dd/MM/yyyy"></GridColumn>

                                                                                <GridColumn Field=@nameof(dtStudentFeeRegister.Description) HeaderText=@Localizer["Description"] Width="180"></GridColumn>

                                                                                <GridColumn Field=@nameof(dtStudentFeeRegister.Debit) HeaderText=@Localizer["Amount"] CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr" }})" TextAlign="TextAlign.Right" Width="100" Format="n2" HeaderTextAlign="TextAlign.Left"></GridColumn>
                                                                                <GridColumn Field=@nameof(dtStudentFeeRegister.Credit) HeaderText=@Localizer["Discount"] CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr" }})" TextAlign="TextAlign.Right" Width="100" Format="n2" HeaderTextAlign="TextAlign.Left"></GridColumn>
                                                                                <GridColumn Field=@nameof(dtStudentFeeRegister.Paid) CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr" }})" HeaderText="Paid" TextAlign="TextAlign.Right" Format="n2" Width="100" HeaderTextAlign="TextAlign.Left"></GridColumn>

                                                                                <GridColumn Field=@nameof(dtStudentFeeRegister.Balance) HeaderText=@Localizer["Balance"] CustomAttributes="@(new Dictionary<string, object>(){ { "class", "e-attr" }})" TextAlign="TextAlign.Right" Width="100" Format="n2" HeaderTextAlign="TextAlign.Left">

                                                                                </GridColumn>
                                                                                @*<GridColumn Width="40" TextAlign="TextAlign.Center" Index="9">
                                                                            <Template Context="MasterContext">
                                                                            @{
                                                                            string Vid = (MasterContext as dtStudentFeeRegister).ID.ToString();
                                                                            string Debit = (MasterContext as dtStudentFeeRegister).Debit.ToString();

                                                                            {
                                                                            <a @onclick="@(async () => { await NoAllocationAlert(Convert.ToInt32(Vid),Convert.ToDecimal(Debit)); })" title="Voucher Allocation"><img src="Images/OFEnter.png" style="height:20px;width:30px; cursor:pointer;" /></a>
                                                                            }
                                                                            }
                                                                            </Template>
                                                                            </GridColumn>*@

                                                                            </GridColumns>
                                                                        </SfGrid>
                                                                        @*}*@
                                                                    </div>
                                                                </div>
                                                            </div>
                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </ContentTemplate>
                                    </TabItem>


                                    <TabItem CssClass="tabs-menu1">
                                        <ChildContent>
                                            <TabHeader Text=@Localizer["Statement"]></TabHeader>
                                        </ChildContent>
                                        <ContentTemplate>
                                            <div class="panel-body tabs-menu-body hremp-tabs1 p-0">
                                                <div class="tab-content">
                                                    <div class="tab-pane active" id="tab5">
                                                        <div class="box-card-background">

                                                            <div>
                                                                <div class="row" style="padding-top: 10px; padding-bottom: 10px;">
                                                                    <div class="col-md-3">
                                                                        <SfDatePicker TValue="DateTime" Width="100%" Format="dd/MM/yyyy" @bind-Value="@StatementFromDate" Placeholder=@Localizer["Start Date"]></SfDatePicker>
                                                                    </div>
                                                                    <div class="col-md-3">
                                                                        <SfDatePicker TValue="DateTime" Width="100%" Format="dd/MM/yyyy" @bind-Value="@StatementEndDate" Placeholder=@Localizer["End Date"]></SfDatePicker>
                                                                        @*<SfButton @onclick="ExcelExport" IconCss="Icon excel" CssClass="e-btn4" title="Excel" />

                                                                    <SfButton @onclick="ExportPdf" IconCss="Icon pdf" CssClass="e-btn4" title="PDF" />*@
                                                                        @*<SfButton @onclick="ExcelExport" IconCss="Icon excel" CssClass="e-btn" title="Excel" Content="Excel" />
                                                                    <SfButton @onclick="ExportPdf" IconCss="Icon pdf" CssClass="e-btn" title="PDF" Content="Pdf" />*@
                                                                    </div>
                                                                    <div class="col-md-3">
                                                                        <SfButton IconCss="" CssClass="e-btn e-btn" OnClick="@Go_Clickss" Content=@Localizer["Go"]></SfButton>
                                                                    </div>
                                                                </div>
                                                                @if (StudStatement.Count() <= 0 || StudStatement == null)
                                                                {
                                                                    <p><em>No data...</em></p>
                                                                }
                                                                else
                                                                {

                                                                    @*Height="300" EnableStickyHeader="true"*@
                                                                    <SfGrid DataSource="@StudStatement" ID="gridStatement" @ref="StudStatementGrid"
                                                                            GridLines="GridLine.Both"
                                                                            AllowFiltering="true"
                                                                            AllowPaging="true"
                                                                            AllowExcelExport="true"
                                                                            AllowPdfExport="true"
                                                                            Width="100%"
                                                                            ShowColumnChooser="true"
                                                                            AllowResizing="true"
                                                                            AllowSorting="true"
                                                                            EnableAltRow="true"
                                                                            RowHeight="25">
                                                                        <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
                                                                        <GridPageSettings PageSize="50"></GridPageSettings>
                                                                        <GridEvents Created="ActionCompletedHandler" TValue="dtStudentStatement"></GridEvents>
                                                                        <GridAggregates>
                                                                            <GridAggregate>
                                                                                <GridAggregateColumns>
                                                                                    <GridAggregateColumn Field=@nameof(dtStudentStatement.Debit) Type="AggregateType.Sum" Format="n2">
                                                                                        <FooterTemplate Context="FooterContext">
                                                                                            @{
                                                                                                var aggregate = (FooterContext as AggregateTemplateContext);
                                                                                                <div>
                                                                                                    <p> @aggregate.Sum</p>
                                                                                                </div>
                                                                                            }
                                                                                        </FooterTemplate>
                                                                                    </GridAggregateColumn>
                                                                                    <GridAggregateColumn Field=@nameof(dtStudentStatement.Credit) Type="AggregateType.Sum" Format="n2">
                                                                                        <FooterTemplate Context="FooterContext">
                                                                                            @{
                                                                                                var aggregate = (FooterContext as AggregateTemplateContext);
                                                                                                <div>
                                                                                                    <p> @aggregate.Sum</p>
                                                                                                </div>
                                                                                            }
                                                                                        </FooterTemplate>
                                                                                    </GridAggregateColumn>
                                                                                    <GridAggregateColumn Field=@nameof(dtStudentStatement.Balance) Type="AggregateType.Custom" Format="n2">
                                                                                        <FooterTemplate Context="FooterContext">
                                                                                            @{
                                                                                                var aggregate = (FooterContext as AggregateTemplateContext);

                                                                                                <div>
                                                                                                    <p>@GetBalanceAggregate()</p>
                                                                                                </div>
                                                                                            }
                                                                                        </FooterTemplate>
                                                                                    </GridAggregateColumn>
                                                                                </GridAggregateColumns>
                                                                            </GridAggregate>
                                                                        </GridAggregates>
                                                                        <GridColumns>
                                                                            <GridColumn Field=@nameof(dtStudentStatement.Vid) IsPrimaryKey="true" Visible="false" Width="120" />
                                                                            <GridColumn Field=@nameof(dtStudentStatement.EffectiveDate) HeaderText=@Localizer["Date"] Format="dd/MM/yyyy" Type="ColumnType.Date" Width="30">
                                                                                <Template Context="FooterContext">
                                                                                    @{
                                                                                        var RowStmt = (FooterContext as dtStudentStatement);
                                                                                        var date = RowStmt.EffectiveDate.ToString("dd/MM/yyyy");
                                                                                        if (RowStmt.Narration != "Previous Balance b/f")
                                                                                        {

                                                                                            <span>@date</span>
                                                                                        }
                                                                                        else
                                                                                        {
                                                                                            <span></span>
                                                                                        }
                                                                                    }
                                                                                </Template>
                                                                            </GridColumn>
                                                                            <GridColumn Field=@nameof(dtStudentStatement.Vno) IsPrimaryKey="true" Width="35" />
                                                                            <GridColumn Field=@nameof(dtStudentStatement.Description) HeaderText=@Localizer["Description"] Width="120"></GridColumn>
                                                                            <GridColumn Field=@nameof(dtStudentStatement.Debit) HeaderText=@Localizer["Debit"] Width="30" Format="n2"></GridColumn>
                                                                            <GridColumn Field=@nameof(dtStudentStatement.Credit) HeaderText=@Localizer["Credit"] Width="30" Format="n2"></GridColumn>
                                                                            <GridColumn Field=@nameof(dtStudentStatement.Balance) HeaderText=@Localizer["Balance"] Width="30" Format="n2"></GridColumn>
                                                                        </GridColumns>

                                                                    </SfGrid>
                                                                }
                                                            </div>


                                                        </div>
                                                    </div>
                                                </div>
                                            </div>
                                        </ContentTemplate>
                                    </TabItem>
                                </TabItems>
                            </SfTab>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}
else
{
    <div class="container-fluid p-0" style="padding-right:0px">
        <div class="form-row">
            <div class="col-md-12">
                <BlazorStrap.BSAlert Color=" BlazorStrap.Color.Danger" @bind-IsOpen="@Open">
                    Permission Denied
                </BlazorStrap.BSAlert>
            </div>
        </div>
    </div>
}
@{
    <SfDialog Width="700px" IsModal="true" @bind-Visible="PopupVisible" ShowCloseIcon="true">
        <DialogTemplates>
            <Header>
            </Header>
            <Content>
                <div>
                    <p style="color:green">
                        Posted Successfully !!!
                    </p>
                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="OK" IsPrimary="true" @onclick="@popClose_Click" />
        </DialogButtons>
        <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
    </SfDialog>
    <SfDialog Width="700px" IsModal="true" @bind-Visible="PopupDeVisible" ShowCloseIcon="true">
        <DialogTemplates>
            <Header>
            </Header>
            <Content>
                <div>
                    <p style="color:green">
                        Depost successful !!!
                    </p>
                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="OK" IsPrimary="true" @onclick="@popClose_Click" />
        </DialogButtons>
        <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
    </SfDialog>
    <SfDialog Width="700px" IsModal="true" @bind-Visible="PopupDeVisibletrue" ShowCloseIcon="true">
        <DialogTemplates>
            <Header>
            </Header>
            <Content>
                <div>
                    <p style="color:green">
                        @ImportMessage2
                    </p>
                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="OK" IsPrimary="true" @onclick="@popClose_Click" />
        </DialogButtons>
        <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
    </SfDialog>

    <SfDialog Width="700px" IsModal="true" @bind-Visible="PopupSendError" ShowCloseIcon="true">
        <DialogTemplates>
            <Header>
            </Header>
            <Content>
                <div>
                    <p style="color:red">
                        Please Reduce The Discount And Try Again !!!
                    </p>
                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="OK" IsPrimary="true" @onclick="@(() => PopupSendError = false)" />
        </DialogButtons>
        <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
    </SfDialog>
    <SfDialog Width="700px" IsModal="true" @bind-Visible="PopupError" ShowCloseIcon="true">
        <DialogTemplates>
            <Header>
            </Header>
            <Content>
                <div>
                    <p style="color:red">
                        Something went wrong !!!
                    </p>
                    <p style="color:red">
                        Check Invoice No !!!
                    </p>
                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="OK" IsPrimary="true" @onclick="@(() => PopupError = false)" />
        </DialogButtons>
        <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
    </SfDialog>
    <SfDialog Width="700px" IsModal="true" @bind-Visible="PopupSaveError" ShowCloseIcon="true">
        <DialogTemplates>
            <Header>
            </Header>
            <Content>
                <div>
                    <p style="color:red">
                        Fee Posting Already Exist!!!
                    </p>

                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="OK" IsPrimary="true" @onclick="@(() => PopupSaveError = false)" />
        </DialogButtons>
        <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
    </SfDialog>
    <SfDialog Width="700px" IsModal="true" @bind-Visible="PopupFeeError" ShowCloseIcon="true">
        <DialogTemplates>
            <Header>
            </Header>
            <Content>
                <div>
                    <p style="color:red">
                        Please Select FeeSchedule!!!
                    </p>

                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="OK" IsPrimary="true" @onclick="@(() => PopupFeeError = false)" />
        </DialogButtons>
        <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
    </SfDialog>
    <SfDialog Width="700px" IsModal="true" @bind-Visible="PopupFeeCheck" ShowCloseIcon="true">
        <DialogTemplates>
            <Header>
            </Header>
            <Content>
                <div>
                    <p style="color:red">
                        Please select the FeeSchedule!!!
                    </p>

                </div>
            </Content>
        </DialogTemplates>
        <DialogButtons>
            <DialogButton Content="OK" IsPrimary="true" @onclick="@(() => PopupFeeCheck = false)" />
        </DialogButtons>
        <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
    </SfDialog>
    <SfDialog Width="700px" IsModal="true" @bind-Visible="PopupLoading" ShowCloseIcon="true">
        <DialogTemplates>
            <Header>
            </Header>
            <Content>
                <div>
                    <p style="color:black">
                        Loading...
                    </p>
                </div>
            </Content>
        </DialogTemplates>
        <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
    </SfDialog>
}

<div style="position: relative; min-height: auto; padding: 10px 10px;overflow-x:hidden">
    <SfDialog Target="#gd2" Width="600px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsVoucherAllocationDelete">
        <div class="modal">
            <DialogTemplates>
                <Header>Change Fee Amount</Header>

                <Content>

                    <div class="modal-body">
                        <div class="container" style="width:100%">
                            <BlazorStrap.BSAlert Color="BlazorStrap.Color.Success" @bind-IsOpen="@IsOpenUpdate" AutoHide="true">
                                Successfully Updated <a><i class="fa fa-check" aria-hidden="true"></i></a>
                            </BlazorStrap.BSAlert>
                            <BlazorStrap.BSAlert Color="BlazorStrap.Color.Danger" @bind-IsOpen="@IsOpenUpdateFailed" AutoHide="true">
                                Failed to Update <a><i aria-hidden="true"></i></a>
                            </BlazorStrap.BSAlert>
                            <BlazorStrap.BSAlert Color="BlazorStrap.Color.Success" @bind-IsOpen="@IsOpenDelete" AutoHide="true">
                                Successfully Deleted <a><i class="fa fa-check" aria-hidden="true"></i></a>
                            </BlazorStrap.BSAlert>
                            <BlazorStrap.BSAlert Color="BlazorStrap.Color.Danger" @bind-IsOpen="@IsOpenDeleteFailed" AutoHide="true">
                                Failed to Delete <a><i aria-hidden="true"></i></a>
                            </BlazorStrap.BSAlert>
                            <div>
                                Do You Want Delete this Fee Amount?
                            </div>


                            <div class="form-group" style="margin-top: 14px; text-align: right;">
                                <SfButton CssClass="button" OnClick="VDeleteYes_Click">Yes</SfButton>
                                <SfButton CssClass="button" OnClick="VDeleteNo_Click">No</SfButton>
                            </div>
                        </div>
                    </div>
                </Content>
            </DialogTemplates>
        </div>

    </SfDialog>

</div>

<div style="position: relative; min-height: auto; padding: 10px 10px;overflow-x:hidden">
    <SfDialog Target="#gd2" Width="600px" ShowCloseIcon="true" IsModal="true" @bind-Visible="@IsVisibleUpdateV">
        <div class="modal">
            <DialogTemplates>
                <Header>Change Fee Amount</Header>

                <Content>

                    <div class="modal-body">
                        <div class="container" style="width:100%">
                            <BlazorStrap.BSAlert Color="BlazorStrap.Color.Success" @bind-IsOpen="@IsVUpdate" AutoHide="true">
                                Successfully Updated<a><i class="fa fa-check" aria-hidden="true"></i></a>
                            </BlazorStrap.BSAlert>


                            <div>
                                Do You Want Change this Fee Amount?
                            </div>


                            <div class="form-group" style="margin-top: 14px; text-align: right;">
                                <SfButton CssClass="button" OnClick="VUpdateYes_Click">Yes</SfButton>
                                <SfButton CssClass="button" OnClick="VUpdateNo_Click">No</SfButton>
                            </div>
                        </div>
                    </div>
                </Content>
            </DialogTemplates>
        </div>

    </SfDialog>

</div>


<SfDialog Width="800px" IsModal="true" @bind-Visible="@popSearch" ShowCloseIcon="true">
    <DialogTemplates>
        <Header>
            "Search Students"
        </Header>
        <Content>
            <div class="container-fluid">
                <div class="pb-2">
                    @*<SfTextBox @ref="search" Input="OnInput" Placeholder="Global Search" Width="100%" ShowClearButton="true" CssClass="e-btn2" ValueChange="OnSearch" Created="@onCreateSearch" EnablePersistence="true"></SfTextBox>*@
                    <SfTextBox @ref="search" Input="OnInput" Placeholder="Global Search" Width="100%" ShowClearButton="true" CssClass="e-btn2" Created="@onCreateSearch" EnablePersistence="true"></SfTextBox>
                </div>
                <div>
                    @if (StudentList != null)
                    {
                        <SfGrid DataSource="@StudentList" ID="gv_studentList" @ref="gv_studentList"
                                GridLines="GridLine.Both"
                                AllowFiltering="true"
                                AllowPaging="true"
                                AllowExcelExport="true"
                                AllowPdfExport="true"
                                Height="350"
                                Width="100%"
                                AllowSelection="true"
                                ShowColumnChooser="true"
                                AllowResizing="true"
                                AllowSorting="true"
                                EnableAltRow="true"
                                RowHeight="25">
                            <GridEvents Created="CreatedHandler" RowSelecting="RowSelectingHandler" TValue="dtoStudentRegisterDefault"></GridEvents>
                            <GridFilterSettings Type="Syncfusion.Blazor.Grids.FilterType.Excel" ShowFilterBarStatus="true"></GridFilterSettings>
                            <GridPageSettings PageSize="50"></GridPageSettings>

                            <GridColumns>
                                @*<GridColumn Width="40px" HeaderText="" Index="0">
                            <Template Context="StudContext">
                            @{ var StudID = (StudContext as dtStudentRegister).AccountID;
                            <a @onclick="@(() => { OnGo(StudID); })"><img src="Images/Forward.png" style="height:20px;width:20px; cursor:pointer;" /></a>
                            }
                            </Template>
                            </GridColumn>*@
                                @*<GridColumn Width="30" HeaderText="" HeaderTextAlign="TextAlign.Center" Index="0">
                            <GridCommandColumns>
                            <GridCommandColumn ButtonOption="@(new CommandButtonOptions() { CssClass="oi oi-pencil grid-edit btn-width"})" Title="Edit"></GridCommandColumn>
                            </GridCommandColumns>
                            </GridColumn>*@
                                <GridColumn HeaderText="S.No" Width="50" Context="context1" Index="1">
                                    <Template>
                                        @{
                                            var con = (context1 as dtoStudentRegisterDefault);
                                            var Index = GetRowCounter(con.AccountID);
                                        }
                                        <span>@(Index.Result)</span>
                                    </Template>

                                </GridColumn>

                                <GridColumn Field=@nameof(dtoStudentRegisterDefault.AccountID) IsPrimaryKey="true" HeaderText="AccountID" Width="120" Visible="false"></GridColumn>
                                <GridColumn Field=@nameof(dtoStudentRegisterDefault.AccountCode) HeaderText=@Localizer["SCode"] Width="90" Index="2"></GridColumn>
                                <GridColumn Field=@nameof(dtoStudentRegisterDefault.AccountName) HeaderText=@Localizer["Student Name"] Width="180" Index="3"></GridColumn>
                                <GridColumn Field=@nameof(dtoStudentRegisterDefault.Class) HeaderText=@Localizer["Class"] Width="90" Index="4"></GridColumn>
                                <GridColumn Field=@nameof(dtoStudentRegisterDefault.Division) HeaderText=@Localizer["Section"] Width="80" Index="5"></GridColumn>
                                <GridColumn Field=@nameof(dtoStudentRegisterDefault.ParentCode) HeaderText=@Localizer["Parent Code"] Width="100" Index="6"></GridColumn>
                                <GridColumn Field=@nameof(dtoStudentRegisterDefault.ParentName) HeaderText=@Localizer["Parent Name"] Width="180" Index="7"></GridColumn>
                                <GridColumn Field=@nameof(dtoStudentRegisterDefault.Mobile) HeaderText=@Localizer["Mobile"] Width="120" Index="8"></GridColumn>
                            </GridColumns>
                        </SfGrid>
                    }
                </div>
            </div>
        </Content>
    </DialogTemplates>
    <DialogButtons>
        @*<DialogButton Content="Proceed" IsPrimary="true" @onclick="@Proceed_Click" />*@
        <DialogButton Content="Cancel" IsPrimary="true" @onclick="@(()=>popSearch=false)" />
    </DialogButtons>
    <DialogAnimationSettings Effect="@DialogEffect.None"></DialogAnimationSettings>
</SfDialog>
<div>
</div>



@code {

    [Parameter]
    public int AccountID { get; set; }
    private EditContext? EditContext;
    public bool enable, IsOpen = false, IsOpenAdd = false, IsOpenDangers = false;
    string? mode, UserName, UserCategory, Faileds;
    public string? ImportMessage;
    public string? ImportMessages;
    public string? ImportMessage1;
    public string? ImportMessage2;
    public string? ImportMessage3;
    public string? ImportMessage4;
    public string? ImportMessage5;
    public string? ImportMessage6;
    public string? ImportMessage7;
    public string? ImportMessage8;
    bool ShowGlobalAll { get; set; } = false;


    [CascadingParameter]
    public MainLayout Layout { get; set; }

    UserRights objUserRight = new UserRights();

    string? GlobalBtn = "ShowOthers";

    public IList<dtStudentFeeRegister> StudFeeRegisters = new List<dtStudentFeeRegister>();
    public SfGrid<dtStudentFeeRegister>? gv_StudentFeeRegisters { get; set; }





    private DialogSettings DialogParams = new DialogSettings { MinHeight = "400px", Width = "450px" };
    public dtVoucherEntry[]? dtVoucherEntry;
    public dtPostingVoucher[]? objpostvoucher;
    public bool btnAddenable { get; set; }
    public bool btnSaveenable { get; set; }
    public bool btnEditenable { get; set; }
    public bool btnCancelenable { get; set; }
    public bool btnBackenable { get; set; }
    public bool btnenable { get; set; }

    public bool save = false;
    public bool edit = false;

    public bool showedite = false;

    string? sumagg, amount;
    bool VoucherMatching = false;
    public long vID, Vids, Vid, VIDE;
    public string? FeeType, VID;
    int vtype, Addvtype, feeexist;
    Decimal DecimalValue { get; set; } = 1;
    DateTime DateTimeValue { get; set; }
    bool PopupLoading { get; set; }
    bool PopupVisible { get; set; }
    public bool PopupDeVisible { get; set; }
    public bool PopupDeVisibletrue { get; set; }

    bool PopupError { get; set; }
    bool PopupSaveError { get; set; }
    bool PopupFeeError { get; set; }
    bool PopupFeeCheck { get; set; }
    bool PopupImport { get; set; }
    bool PopupSendError { get; set; }
    bool PopupImportError { get; set; }
    private Boolean Check = false;
    public string TextBoxValue = "";
    private bool isChecked = true;
    string StudentImage = "Images/student.png";
    decimal Credits, unalloting;
    public DateTime? DateValue;
    int UserID, user, AdvVatId;
    int BranchID;
    public DateTime Taxvoicedate;

    public List<dtoStudentRegisterDefault> StudentList = new List<dtoStudentRegisterDefault>();
    public string CmbStudentList = "";
    public List<dtStudentStatement> Statemnt = new List<dtStudentStatement>();

    public dtStudentStatement Objstatement = new dtStudentStatement();

    public SchoolTaxInvoicedt SchoolTaxInvoicedts = new SchoolTaxInvoicedt();
    public List<SchoolTaxInvoicedt> GetSchoolTaxInvoice = new List<SchoolTaxInvoicedt>();
    public SfGrid<SchoolTaxInvoicedt>? GetSchoolTaxInvoices { get; set; }
    public SfGrid<SchoolAdditionalPayment>? FeeGrid { get; set; }
    public DateTime? FromDate, ToDate, invoicedate;

    private List<SchoolAdditionalPayment>? StudAdditionalPayment { get; set; }
    private List<SchoolAdditionalPayment>? StudAdditionalDiscount { get; set; }
    private List<dtAdditionalFee>? AdditionalFee { get; set; }
    private List<dtAdditionalFee>? AdditionalDiscount { get; set; }

    public SchoolAdditionalPayment FeeDetails = new SchoolAdditionalPayment();
    private bool CheckAllIsChecked = false;
    public bool Headchecked = false;
    public bool Head = false;
    public bool btnAdd = false;
    public bool btnSave = true;
    public bool btnEdit = true;
    public bool editab = false;


    public int HomeLoad = 0;

    public IEnumerable<Accounts>? Accounts;
    public Accounts DTAccount = new Accounts();
    public Accounts DTParentAccount = new Accounts();
    public Accounts DTStaff = new Accounts();
    public int? objParentID;

    public IEnumerable<SchoolStudent>? SchoolStudent;
    public SchoolStudent DTStudent = new SchoolStudent();

    public IEnumerable<SchoolStudentTran>? SchoolStudentTran;
    public SchoolStudentTran DTStudentTrans = new SchoolStudentTran();
    public dtFeeSchedule AddFees = new dtFeeSchedule();
    public IList<dtFeeSchedule> FeeSchedule = new List<dtFeeSchedule>();
    public IList<dtDiscountSchedule> DiscountScheduleName = new List<dtDiscountSchedule>();


    public IEnumerable<dtStudentFeeSummary>? dtStudentFeeSummary;
    public dtStudentFeeSummary StudFeeSummary = new dtStudentFeeSummary();
    public IList<dtStudentFeeDetails> StudFeeDetails = new List<dtStudentFeeDetails>();
    public IList<dtStudentFeeDetails> StudFeeDetailsNew = new List<dtStudentFeeDetails>();

    public IEnumerable<SchoolParentMaster>? SchoolParentMaster;
    public SchoolParentMaster DTParent = new SchoolParentMaster();
    public int? objStaffParent;

    public IList<dtStudentStatement> StudStatement = new List<dtStudentStatement>();
    SfGrid<dtStudentStatement> StudStatementGrid { get; set; }
    public IList<dtStudentStatement> StudStatements = new List<dtStudentStatement>();
    SfGrid<dtStudentStatement> StudStatementGrids { get; set; }
    SfGrid<dtStudentStatement> gridStatement { get; set; }
    public IList<dtStudentStatement> StudStatementss = new List<dtStudentStatement>();


    dtStudentStatement objStudentStatement = new dtStudentStatement();

    public IEnumerable<SchoolImage> SchoolImage;
    public SchoolImage DTImages = new SchoolImage();

    public List<SchoolAcademicYear> CmbYear = new List<SchoolAcademicYear>();
    public string CmbAccYear = "";
    SchoolAcademicYear objAccYear = new SchoolAcademicYear();

    public IList<MastDesignation> Status = new List<MastDesignation>();
    MastDesignation status = new MastDesignation();
    public string cmbStatus = "";

    public IList<MastDesignation> Shift = new List<MastDesignation>();
    MastDesignation shift = new MastDesignation();
    public string cmbShift = "";

    public IList<SchoolClassMaster> Class = new List<SchoolClassMaster>();
    SchoolClassMaster stclass = new SchoolClassMaster();
    public string cmbClass = "";
    public string cmbPrevClass = "";
    public string cmbJoiningClass = "";

    public IList<SchoolClass> Division = new List<SchoolClass>();
    SchoolClass division = new SchoolClass();
    public string cmbDivision = "";
    public string cmbOpDivision = "";
    public string cmbPrevOpDivision = "";
    public string cmbJoiningDivision = "";

    public IList<MastDesignation> SubStatus = new List<MastDesignation>();
    MastDesignation substatus = new MastDesignation();
    public string cmbSubStatus = "";

    public IList<MastDesignation> Country = new List<MastDesignation>();
    MastDesignation country = new MastDesignation();
    public string cmbCountry = "";
    public string cmbSecondCountry = "";
    public string cmbThirdCountry = "";

    public IList<SchoolFeeSchedule> Fee = new List<SchoolFeeSchedule>();
    SchoolFeeSchedule fee = new SchoolFeeSchedule();
    public string cmbFee = "";

    public IList<SchoolFeeSchedule> Transport = new List<SchoolFeeSchedule>();
    SchoolFeeSchedule transport = new SchoolFeeSchedule();
    public string cmbTransport = "";

    public IList<SchoolFeeSchedule>? Admission = new List<SchoolFeeSchedule>();
    SchoolFeeSchedule admission = new SchoolFeeSchedule();
    public string cmbAdmission = "";

    public IList<SchoolDiscountSchedule>? FeeDiscount = new List<SchoolDiscountSchedule>();
    SchoolFeeSchedule feediscount = new SchoolFeeSchedule();
    public string cmbFeeDiscount = "";

    public IList<SchoolDiscountSchedule> TranDiscount = new List<SchoolDiscountSchedule>();
    SchoolDiscountSchedule trandiscount = new SchoolDiscountSchedule();
    public string cmbTranDiscount = "";

    public IList<SchoolFeeSchedule> Activity = new List<SchoolFeeSchedule>();
    SchoolFeeSchedule activity = new SchoolFeeSchedule();
    public string cmbActivity = "";

    public IList<SchoolAcademicYear> ActivityStartDate = new List<SchoolAcademicYear>();
    SchoolAcademicYear activitystartdate = new SchoolAcademicYear();
    public DateTime cmbActivityStartDate;
    public DateTime StatementFromDate;

    public IList<SchoolAcademicYear> ActivityEndDate = new List<SchoolAcademicYear>();
    SchoolAcademicYear activityenddate = new SchoolAcademicYear();
    public DateTime cmbActivityEndDate;
    public DateTime StatementEndDate;

    public IList<MastDesignation> Relation = new List<MastDesignation>();
    MastDesignation relation = new MastDesignation();
    public string cmbRelation = "";
    public string cmbSecondRelation = "";
    public string cmbRelation1and2 = "";
    public string cmbThirdRelation = "";

    public IList<MastDesignation> Company = new List<MastDesignation>();
    MastDesignation company = new MastDesignation();
    public string cmbCompany = "";
    public string cmbSecondCompany = "";
    public int ID;
    public IList<MastDesignation> Profession = new List<MastDesignation>();
    MastDesignation profession = new MastDesignation();
    public string cmbProfession = "";
    public string cmbSecondProfession = "";
    public bool IsOpenDanger = false;

    public IList<MastDesignation> ParentType = new List<MastDesignation>();
    MastDesignation parenttype = new MastDesignation();
    public string cmbParentType = "";

    public IList<MastDesignation> CompanyPlace = new List<MastDesignation>();
    MastDesignation companyplace = new MastDesignation();
    public string cmbCompanyPlace = "";
    public string cmbWorkPlace = "";
    public dtStudentStatement RowData = new dtStudentStatement();

    public IList<MastDesignation> ParentEmirates = new List<MastDesignation>();
    MastDesignation parentemirates = new MastDesignation();
    public string cmbParentEmirates = "";
    public bool IsInitial { get; set; }

    List<double>? SelectIndex { get; set; }



    public IList<MastDesignation> State = new List<MastDesignation>();
    MastDesignation state = new MastDesignation();
    public string cmbThirdState = "";

    public IList<MastDesignation> TranMode = new List<MastDesignation>();
    MastDesignation tranmode = new MastDesignation();

    public IList<MastDesignation> Area = new List<MastDesignation>();
    MastDesignation area = new MastDesignation();

    public IList<MastDesignation> TcType = new List<MastDesignation>();
    MastDesignation tctype = new MastDesignation();

    public int? branch;

    ObservableCollection<dtVoucherEntry> objvTemp = new ObservableCollection<dtVoucherEntry>();
    ObservableCollection<dtVoucherEntry> objvTempDisc = new ObservableCollection<dtVoucherEntry>();
    ObservableCollection<dtPostingVoucher> objpostvoucherTemp = new ObservableCollection<dtPostingVoucher>();
    public List<double> RowIndexesBranch = new List<double>();
    private List<string> ToolbarItems = new List<string>() { "Edit" };
    public List<double> SelectedNodeIndex = new List<double>();
    public decimal sumallo, s, allo, notallo;
    public List<dtStudentStatement> savelist = new List<dtStudentStatement>();
    public List<dtStudentStatement> deletelist = new List<dtStudentStatement>();
    public List<dtStudentStatement> editlist = new List<dtStudentStatement>();
    public List<dtStudentStatement> oldlist = new List<dtStudentStatement>();
    public decimal Creditstotal;
    public DateTime effect = DateTime.Now;
    SfGrid<dtStudentStatement>? StudVouchAlloc { get; set; }
    public IList<dtStudentStatement> StudVouchrAlloc = new List<dtStudentStatement>();

    private string ValidCss = "";

    public void ActionBeginHandler(ActionEventArgs<dtStudentStatement> args)
    {
        //  if (args.RequestType.ToString() == "Paging")
        {
            SelectedNodeIndex.Clear();
        }
    }
    public string GetBalanceAggregate()
    {
        // Here, you can calculate custom aggregate operations and return the result.

        var Scredit = StudStatement.Sum(X => X.Credit);
        var Sdebit = StudStatement.Sum(X => X.Debit);
        return (Sdebit - Scredit).ToString("0.00");
    }
    public string GetBalanceAggregates()
    {
        // Here, you can calculate custom aggregate operations and return the result.

        var Scredit = StudStatement.Sum(X => X.Credit);
        var Sdebit = StudStatement.Sum(X => X.Debit);
        return (Sdebit - Scredit).ToString("0.00");
    }
    public async void OnCommandClicked(CommandClickEventArgs<dtStudentStatement> args)
    {
        await StudVouchAlloc.EndEditAsync();

        if (args.CommandColumn.Type == CommandButtonType.Save)
        {
        }
        if (args.CommandColumn.Type == CommandButtonType.Delete)
        {

            Vids = args.RowData.ID;
            await _IVoucherAllocationManagers.Delete(Convert.ToInt32(Vids));

            StudVouchrAlloc = (await _IVoucherAllocationManagers.GetStatements(Convert.ToInt32(VIDE), AccountID, BranchID)).ToList();
            await InvokeAsync(StateHasChanged);
        }
    }
    public async Task Back_ClickS()
    {
        IJS.InvokeVoidAsync("history.back", -1);
        //navigationManager.NavigateTo(_NavManager.BaseUri + "Post/" + AccountID);
    }
    public async Task Save_Clicks()
    {
        HttpResponseMessage response = await _IVoucherAllocationManagers.Savefee(DTStudentTrans);
        if (response.IsSuccessStatusCode)
        {
            ImportMessage2 = "Save Success";

            PopupDeVisibletrue = true;


            btnenable = false;
            editab = false;
        }
    }

    public async Task Go_Clickss()
    {
        StudStatement = (await StudentMasterService.GetStatement(StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), AccountID, BranchID)).ToList();
        StudStatement = StudStatement.OrderBy(m => m.EffectiveDate).ThenByDescending(n => n.Debit).ThenByDescending(x => x.Credit).ToList();
        GetBalanceAggregate();
        await CalculateBalance();

        DTAccount = await StudentMasterService.GetDTAccount(AccountID);
        objParentID = DTAccount.Parent;

        DTStudent = await StudentMasterService.GetDTStudent(AccountID);

        DTStudentTrans = await StudentMasterService.GetDTStudentTrans(AccountID, BranchID, CmbAccYear);

        DTParent = await StudentMasterService.GetDTParent(Convert.ToInt32(objParentID));
        objStaffParent = DTParent.StaffParent;

        DTParentAccount = await StudentMasterService.GetDTAccount(Convert.ToInt32(objParentID));
        StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
        //StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear, Con)).ToList();
        //GetFeeBalanceAggregate(StudFeeDetails);

        //StudAdditionalPayment = (await StudentMasterService.GetAdditionalPayment(AccountID, Con)).ToList();
        //StudAdditionalDiscount = (await StudentMasterService.GetAdditionalDiscount(AccountID, Con)).ToList();

        Fee = (await StudentMasterService.GetFee(CmbAccYear, BranchID)).ToList();
        Transport = (await StudentMasterService.GetTransport(CmbAccYear, BranchID)).ToList();
        Admission = (await StudentMasterService.GetAdmission(CmbAccYear, BranchID)).ToList();
        FeeDiscount = (await StudentMasterService.GetFeeDiscount(BranchID)).ToList();
        TranDiscount = (await StudentMasterService.GetFeeDiscount(BranchID)).ToList();
       Accyear = await sessionStorage.GetItemAsync<string>("AcademicYear");
        //if (Accyear != null)
        //{
        //    CmbYear = (await StudentMasterService.GetAcademicYear(BranchID)).ToList();
        //    objAccYear = CmbYear.Where(b => b.Status.Trim() == "Current").FirstOrDefault();
        //    CmbAccYear = Accyear;
        //    Academicyear = await _accountsmain.GetAcademicyear();
        //}
        //else
        //{
        //    Academicyear = await _accountsmain.GetAcademicyear();
        //    CmbAccYear = Academicyear[0];
        //}
        //StudentList = (await StudentMasterService.GetStudentList(CmbAccYear, BranchID)).ToList();
        StudentList = globalStudentServ.GlobalStudentList;

        StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));

        string cmdtext;
        cmdtext = "Vat Received In Advance";
        AdvVatId = await _IPostingManager.getUniqueAccID(cmdtext);



        FeeDetails.FromDate = DateTime.Now;

        if (AccountID != null)
        {
            //await Edit_Click();
        }
        else
        {

        }
        Class = (await StudentMasterService.GetClass(BranchID, CmbAccYear)).ToList();
        Division = (await StudentMasterService.GetDivision(BranchID)).ToList();
        Fee = (await StudentMasterService.GetFee(CmbAccYear, BranchID)).ToList();
        Transport = (await StudentMasterService.GetTransport(CmbAccYear, BranchID)).ToList();
        Admission = (await StudentMasterService.GetAdmission(CmbAccYear, BranchID)).ToList();
        FeeDiscount = (await StudentMasterService.GetFeeDiscount(BranchID)).ToList();
        TranDiscount = (await StudentMasterService.GetFeeDiscount(BranchID)).ToList();


        DTAccount = await StudentMasterService.GetDTAccount(AccountID);
        objParentID = DTAccount.Parent;

        DTStudent = await StudentMasterService.GetDTStudent(AccountID);

        DTStudentTrans = await StudentMasterService.GetDTStudentTrans(AccountID, BranchID, CmbAccYear);

        DTParent = await StudentMasterService.GetDTParent(Convert.ToInt32(objParentID));
        objStaffParent = DTParent.StaffParent;

        DTParentAccount = await StudentMasterService.GetDTAccount(Convert.ToInt32(objParentID));
        StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));

        AdditionalFee = (await _IPostingManager.GetAdditionalFee(CmbAccYear, "AdditionalPayment", BranchID)).ToList();
        AdditionalDiscount = (await _IPostingManager.GetAdditionalFee(CmbAccYear, "AdditionalDiscount", BranchID)).ToList();

        edit = false;
        btnenable = false;



        //Additional Fee
        //StudStatement = (await StudentMasterService.GetStatement(StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), AccountID, BranchID, Con)).ToList();
        //StudStatement = StudStatement.OrderBy(m => m.EffectiveDate).ThenByDescending(n => n.Debit).ThenByDescending(x => x.Credit).ToList();
        //await CalculateBalance();
        AdditionalFee = (await _IPostingManager.GetAdditionalFee(CmbAccYear, "AdditionalPayment", BranchID)).ToList();
        AdditionalDiscount = (await _IPostingManager.GetAdditionalFee(CmbAccYear, "AdditionalDiscount", BranchID)).ToList();
        edit = false;
        btnenable = false;

        //StudFeeDetails = StudFeeDetails.OrderBy(m => m.VDate).ToList();

        GetSchoolTaxInvoice = await _IPostingManager.Getdatass(BranchID, CmbAccYear, AccountID);



        StudStatement = (await StudentMasterService.GetStatement(StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), AccountID, BranchID)).ToList();
        StudStatement = StudStatement.OrderBy(m => m.EffectiveDate).ThenByDescending(n => n.Debit).ThenByDescending(x => x.Credit).ToList();
        StudFeeRegisters = (await StudentService.GetParentStudentFeeWise(CmbAccYear, BranchID, "Student", Convert.ToInt32(AccountID), StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Studying")).ToList();
        await CalculateBalance();

        StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();

        GetFeeBalanceAggregate(StudFeeDetails);


    }
    public async Task save_ClickS()
    {

        savelist = await this.StudVouchAlloc.GetSelectedRecordsAsync();
        if (savelist.Count != null)

        {

            foreach (var item in oldlist)
            {
                var itm = savelist.Where(x => x.Vid == item.Vid).FirstOrDefault();
                if (itm == null)
                {

                    await _IVoucherAllocationManagers.Delete(Convert.ToInt32(item.ID));
                    StudVouchrAlloc = (await _IVoucherAllocationManagers.GetStatements(Convert.ToInt32(VIDE), AccountID, BranchID)).ToList();

                }

            }

            foreach (var SA in savelist)
            {
                //    subts = subts + ssubtt.SubjectName.Substring(0, 3) + ",";
                var update = oldlist.Where(x => x.Vid == SA.Vid).FirstOrDefault();
                // if(SA.Receipt<= SA.Receipt)
                if (Credits >= allo && SA.Receipt != 0.0000M)
                {
                    if (update == null)
                    {

                        dtStudentStatement MM = new dtStudentStatement();
                        MM.Vid = VIDE;

                        MM.Veid = SA.Veid;
                        MM.AccountId = AccountID;
                        MM.Amount = SA.Receipt;


                        HttpResponseMessage response = await _IVoucherAllocationManagers.Savestatement(MM);

                        StudVouchrAlloc = (await _IVoucherAllocationManagers.GetStatements(Convert.ToInt32(VIDE), AccountID, BranchID)).ToList();
                    }
                    else
                    {
                        HttpResponseMessage response = await _IVoucherAllocationManagers.Updatestatement(SA);
                        StudVouchrAlloc = (await _IVoucherAllocationManagers.GetStatements(Convert.ToInt32(VIDE), AccountID, BranchID)).ToList();

                    }
                }
                else
                {
                    StudVouchrAlloc = (await _IVoucherAllocationManagers.GetStatements(Convert.ToInt32(VIDE), AccountID, BranchID)).ToList();

                }

            }
        }


    }
    //public async Task  ActionBegin(ActionEventArgs<dtStudentStatement> args)

    //{

    //    if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save && args.Action == "Edit")

    //    {
    //        dtStudentStatement ord = StudStatements.First(x => x.Vid == args.Data.Vid);
    //        dtStudentStatement MM = new dtStudentStatement();
    //        MM.ID = ord.ID;

    //        MM.Vid = Vid;

    //        MM.Veid = ord.Veid;
    //        MM.AccountId = AccountID;
    //        MM.Amount = ord.Amount;
    //        HttpResponseMessage response = await StudentMasterService.Updatestatement(MM);


    //    }



    //}


    //VoucherMatching
    public async Task Voucher_click(int Vid, decimal Credit)
    {
        oldlist.Clear();
        if (Credit != 0.000000M)
        {
            Credits = Credit;
            // unalloting = Credits - Convert.ToDecimal(sumagg);
            VID = Convert.ToString(Vid);
            VIDE = Vid;

            //AccountID = ObCustomer.ID;
            this.StudVouchrAlloc = (await _IVoucherAllocationManagers.GetStatements(Vid, AccountID, BranchID)).ToList();

            oldlist = StudVouchrAlloc.Where(a => a.Sel == 1).ToList();
            var allocated = oldlist.Sum(x => x.Receipt);
            //ChangeAdded
            unalloting = Credits - allocated;

            VoucherMatching = true;
        }
        else
        {
            IsOpenDangers = true;
            Faileds = "Failed to Access";
            VoucherMatching = false;


        }

        await InvokeAsync(StateHasChanged);

    }
    public async Task OnDataBound(object args)
    {
        {



            //await this.StudStatementGrids.SelectRows(SelectedNodeIndex.ToArray());





        }
    }
    public int sl = 0;

    public async Task OnRowDataBound(RowDataBoundEventArgs<dtStudentStatement> args)
    {

        // Freight values greater than 10 are filtered by comparing the primary column values
        // if (deletecheck == false)

        if (args.Data != null)
        {

            var index = 0;
            //if (valselected != 1)
            //{

            //}


            foreach (var data in StudStatements)
            {
                sumallo = Convert.ToDecimal(sumagg) + args.Data.Balance;


                if (data.Sel == 1 && Credits >= Convert.ToDecimal(sumallo))
                {
                    SelectedNodeIndex.Add(index);


                }
                //else
                //{
                //    SelectedNodeIndex.Remove(index);

                //}
                index++;
                //sl=1;

            }

        }

    }
    public async Task GetSelectedRecords_Posting(RowSelectingEventArgs<dtStudentStatement> args)

    {


        allo = StudVouchrAlloc.Sum(X => X.Receipt);
        unalloting = Credits - allo;

        if (args.IsHeaderCheckboxClicked && Headchecked == false)
        {
            Headchecked = true;
            args.Cancel = true;
            //Head = false;
            await StudVouchAlloc.ClearRowSelectionAsync();
            await StudVouchAlloc.SelectRowsByRangeAsync(0, StudVouchrAlloc.Count() - 1);


        }//end
        if (!args.IsHeaderCheckboxClicked)
        {
            Headchecked = false;
            Head = false;
        }//end


        if (args.Data.Balance > 0)
        {
            //Changes Added
            if (Credits - allo <= 0 && args.Data.Receipt == 0.000000M)
                args.Cancel = true; //enable this to prevent the row selection

        }//end


        if (args.IsHeaderCheckboxClicked)
        {
            //    var selectedKey = args.Data;

            //    if (unalloting < selectedKey.Balance &&  args.Data.Receipt != Credits && Credits!=allo)
            //    {
            //        if (Credits != allo)
            //        {
            //            args.Data.Receipt = Credits - allo;
            //            args.Data.Balance = selectedKey.Balance - (Credits - allo);
            //            //Creditstotal = args.Data.Receipt;
            //            allo = allo + args.Data.Receipt;
            //            unalloting = Credits - allo;
            //            Head = true;
            //            await StudVouchAlloc.SetRowDataAsync(args.Data.Vid, args.Data);
            //            await InvokeAsync(StateHasChanged);
            //            savelist = await this.StudVouchAlloc.GetSelectedRecordsAsync();
            //            //if (args.Data.Receipt > Credits)
            //            //{
            //            //    args.Cancel = true;
            //            //}
            //        }
            //    }
            //    //Change Added
            //    if (selectedKey.Balance == 0)
            //    {
            //        args.Cancel = true;

            //    }

            if (Credits - allo <= 0 && args.Data.Receipt == 0.000000M)
                args.Cancel = true;
            else
            {
                var selectedKey = args.Data;


                if (Credits == selectedKey.Balance && args.Data.Receipt == 0.000000M && Credits != allo)//Balance and credit equal
                {

                    args.Data.Receipt = args.Data.Balance;
                    args.Data.Balance = 0;
                    //Creditstotal = args.Data.Receipt;
                    allo = allo + args.Data.Receipt;
                    unalloting = Credits - allo;
                    await StudVouchAlloc.SetRowDataAsync(args.Data.Vid, args.Data);
                    await InvokeAsync(StateHasChanged);
                    savelist = await this.StudVouchAlloc.GetSelectedRecordsAsync();



                }//end

                else if (unalloting >= selectedKey.Balance && allo != Credits && args.Data.Receipt == 0)
                {
                    //if (selectedKey.Balance <= 0)
                    //{
                    //    args.Data.Receipt = selectedKey.Balance;
                    //    args.Data.Balance = 0;
                    //    //Creditstotal = args.Data.Receipt;
                    //    allo = allo + args.Data.Receipt;
                    //    // unalloting = Credits - allo + s;
                    //    unalloting = Credits - allo;
                    //    await StudVouchAlloc.SetRowDataAsync(args.Data.Vid, args.Data);
                    //    await InvokeAsync(StateHasChanged);

                    //}
                    if (selectedKey.Balance > 0 && allo != Credits)
                    {
                        args.Data.Receipt = selectedKey.Balance;
                        args.Data.Balance = 0;
                        Creditstotal = args.Data.Receipt;
                        allo = allo + args.Data.Receipt;
                        // unalloting = Credits - allo + s;
                        unalloting = Credits - allo;
                        await StudVouchAlloc.SetRowDataAsync(args.Data.Vid, args.Data);
                        await InvokeAsync(StateHasChanged);
                        savelist = await this.StudVouchAlloc.GetSelectedRecordsAsync();
                    }

                }
                else if (unalloting < selectedKey.Balance && args.Data.Receipt == 0.000000M && Credits != allo)
                {

                    args.Data.Receipt = Credits - allo;
                    args.Data.Balance = selectedKey.Balance - (Credits - allo);
                    // Creditstotal = args.Data.Receipt;
                    allo = allo + args.Data.Receipt;
                    unalloting = Credits - allo;
                    savelist = await this.StudVouchAlloc.GetSelectedRecordsAsync();
                    await StudVouchAlloc.SetRowDataAsync(args.Data.Vid, args.Data);
                    await InvokeAsync(StateHasChanged);
                    savelist = await this.StudVouchAlloc.GetSelectedRecordsAsync();

                    //else
                    //{
                    //    args.Cancel = true;
                    //}
                }
                //else if (selectedKey.Balance < 0)
                //{
                //    args.Data.Receipt = selectedKey.Balance;
                //    args.Data.Balance = 0;
                //    //Creditstotal = args.Data.Receipt;
                //    allo = allo + args.Data.Receipt;
                //    // unalloting = Credits - allo + s;
                //    unalloting = Credits - allo;
                //    await StudVouchAlloc.SetRowDataAsync(args.Data.Vid, args.Data);
                //    await InvokeAsync(StateHasChanged);

                //}

                ////if (allo == Credits && Headchecked == true)
                ////{
                ////    args.Cancel = true;
                ////}
            }
        }




        if (args.Event != null && Head == false)
        {
            var selectedKey = args.Data;


            if (Credits == selectedKey.Balance && args.Data.Receipt == 0.000000M && Credits != allo)//Balance and credit equal
            {

                args.Data.Receipt = args.Data.Balance;
                args.Data.Balance = 0;
                //Creditstotal = args.Data.Receipt;
                allo = allo + args.Data.Receipt;
                unalloting = Credits - allo;
                await StudVouchAlloc.SetRowDataAsync(args.Data.Vid, args.Data);
                await InvokeAsync(StateHasChanged);
                savelist = await this.StudVouchAlloc.GetSelectedRecordsAsync();



            }//end

            else if (unalloting >= selectedKey.Balance && allo != Credits && args.Data.Receipt == 0)
            {
                if (selectedKey.Balance <= 0)
                {
                    args.Data.Receipt = selectedKey.Balance;
                    args.Data.Balance = 0;
                    //Creditstotal = args.Data.Receipt;
                    allo = allo + args.Data.Receipt;
                    // unalloting = Credits - allo + s;
                    unalloting = Credits - allo;
                    await StudVouchAlloc.SetRowDataAsync(args.Data.Vid, args.Data);
                    await InvokeAsync(StateHasChanged);

                }
                else if (selectedKey.Balance > 0 && allo != Credits)
                {
                    args.Data.Receipt = selectedKey.Balance;
                    args.Data.Balance = 0;
                    Creditstotal = args.Data.Receipt;
                    allo = allo + args.Data.Receipt;
                    // unalloting = Credits - allo + s;
                    unalloting = Credits - allo;
                    await StudVouchAlloc.SetRowDataAsync(args.Data.Vid, args.Data);
                    await InvokeAsync(StateHasChanged);
                    savelist = await this.StudVouchAlloc.GetSelectedRecordsAsync();
                }

            }
            else if (unalloting < selectedKey.Balance && args.Data.Receipt == 0.000000M && Credits != allo)
            {

                args.Data.Receipt = Credits - allo;
                args.Data.Balance = selectedKey.Balance - (Credits - allo);
                // Creditstotal = args.Data.Receipt;
                allo = allo + args.Data.Receipt;
                unalloting = Credits - allo;
                savelist = await this.StudVouchAlloc.GetSelectedRecordsAsync();
                await StudVouchAlloc.SetRowDataAsync(args.Data.Vid, args.Data);
                await InvokeAsync(StateHasChanged);
                savelist = await this.StudVouchAlloc.GetSelectedRecordsAsync();

                //else
                //{
                //    args.Cancel = true;
                //}
            }
            else if (selectedKey.Balance < 0)
            {
                args.Data.Receipt = selectedKey.Balance;
                args.Data.Balance = 0;
                //Creditstotal = args.Data.Receipt;
                allo = allo + args.Data.Receipt;
                // unalloting = Credits - allo + s;
                unalloting = Credits - allo;
                await StudVouchAlloc.SetRowDataAsync(args.Data.Vid, args.Data);
                await InvokeAsync(StateHasChanged);

            }

            //if (allo == Credits && Headchecked == true)
            //{
            //    args.Cancel = true;
            //}

        }
        allo = StudVouchrAlloc.Sum(X => X.Receipt);
        unalloting = Credits - allo;
        await InvokeAsync(StateHasChanged);
    }
    public async Task DeselectRecords(RowDeselectEventArgs<dtStudentStatement> args)
    {
        Headchecked = false;

        if (args.IsHeaderCheckboxClicked)
        {

            if (args.Event != null)

            {
                allo = 0;
                unalloting = Credits;
                //StudVouchrAlloc = (await _IVoucherAllocationManagers.GetStatements(Convert.ToInt32(VIDE), AccountID, BranchID)).ToList();

                var SelectedRecords = (await StudVouchAlloc.GetSelectedRecordsAsync()).ToList();
                foreach (var itm in SelectedRecords)
                {
                    var Drec = itm.Receipt;
                    StudVouchrAlloc.Where(b => b.Vid == itm.Vid).ToList().ForEach(a => { a.Balance = itm.Receipt + itm.Balance; a.Receipt = Drec - Drec; });
                }

                //args.Event = null;
                //await StudVouchAlloc.ClearRowSelectionAsync();
                await StudVouchAlloc.Refresh();


            }
        }
        else if (args.Event != null && Head == false)
        {
            Vids = args.Data.ID;
            int _vid = Convert.ToInt32(Vids);
            allo = allo - args.Data.Receipt;
            unalloting = Credits - allo;
            args.Data.Balance = args.Data.Balance + args.Data.Receipt;
            args.Data.Receipt = 0;
            await StudVouchAlloc.SetRowDataAsync(args.Data.Vid, args.Data);
            await InvokeAsync(StateHasChanged);


        }
    }

    public async void ClosedHandler(CloseEventArgs args)
    {
        // Here, you can customize your code.
        StudVouchrAlloc.Clear();
        Headchecked = false;
        allo = 0;
        unalloting = 0;



    }

    public async void ActionCompletedHandler(object args)
    //public async Task OnActionBeginStatement(Syncfusion.Blazor.Grids.ActionEventArgs<dtStudentStatement> args)
    {
        //refGrid.Refresh();
        StudStatementGrid.HideSpinnerAsync();
        StudStatement = (StudStatementGrid.GetCurrentViewRecordsAsync()).Result;
        for (int i = 0; i <= StudStatement.Count() - 1; i++)
        {
            if (StudStatement.ToList()[i].Debit != null && StudStatement.ToList()[i].Debit != 0)
            {
                decimal Sum;
                if (i != 0)
                    Sum = StudStatement.ToList()[i - 1].Balance;
                else
                    Sum = 0;
                StudStatement.ToList()[i].Balance = Sum + StudStatement.ToList()[i].Debit;
            }
            if (StudStatement[i].Credit != null && StudStatement.ToList()[i].Credit != 0)
            {
                decimal Sum;
                if (i != 0)
                    Sum = StudStatement.ToList()[i - 1].Balance;
                else
                    Sum = 0;
                StudStatement.ToList()[i].Balance = Sum - StudStatement.ToList()[i].Credit;
            }
        }
        StudStatementGrid.Refresh();
    }

    public async Task Delete_Clicks(int ID)
    {

        {
            await _IVoucherAllocationManagers.Delete(Convert.ToInt32(ID));
            StudStatements = (await _IVoucherAllocationManagers.GetStatements(Convert.ToInt32(VIDE), AccountID, BranchID)).ToList();
            await this.InvokeAsync(StateHasChanged);

        }
        await this.InvokeAsync(StateHasChanged);
    }

    ////public async Task DataBoundBranch()
    //{
    //    var Source = await StudStatementGrids.GetCurrentViewRecordsAsync();
    //    var IndexNum = 0;

    //    SelectIndex = new List<double>();
    //    foreach (var record in Source)
    //    {
    //        if (record.Sel == 1)
    //        {
    //            SelectIndex.Add(IndexNum);

    //        }

    //        IndexNum++;
    //    }

    //    await StudStatementGrids.SelectRows(SelectIndex.ToArray());
    //    StudStatementGrids.PreventRender();
    //}








    bool AllowOpen = true, Open;




    public async Task SelectedValueChanged()
    {
        AccountID = Convert.ToInt32(CmbStudentList);
        await Edit_Click();
        await InvokeAsync(StateHasChanged);
    }
    private async Task GetLoginInfo()
    {
        try
        {
            string param = await Http.GetStringAsync("API/Encryption/Decrypt?Text=" + HttpUtility.UrlEncode(await SessionStorage.GetItemAsync<string>("token")));
            if (!string.IsNullOrEmpty(param))
                info = JsonConvert.DeserializeObject<DtoLoginModel>(param)!;
        }
        catch (Exception ex)
        {
            this.ToastService.ShowToast(new ToastOption()
                {
                    Title = "Something went wrong...",
                    Content = ex.Message,
                    CssClass = "e-toast-danger",
                    Icon = "e-error toast-icons",
                    Timeout = 2000,
                    X = "Right",
                    Y = "Top",
                    CloseButton = true
                });
            Console.WriteLine(ex);
            await JsRuntime.InvokeVoidAsync("window.history.back");
        }
    }


    string Accyear;
    public List<string> Academicyear = new List<string>();
    DtoLoginModel info = new DtoLoginModel();

    public string Category;
    protected override async Task OnInitializedAsync()
    {
        await Layout.VersionChecker();
        EditContext = new EditContext(DTAccount);
        UserID = await SessionStorage.GetItemAsync<int>("UserID");
        UserName = await SessionStorage.GetItemAsync<string>("Username");
        Accyear = await sessionStorage.GetItemAsync<string>("AcademicYear");


        await GetLoginInfo();
        if (info != null)
        {
            user = (int)info.UserID;
            BranchID = (int)info.BranchID;
            UserCategory = info.Category;
            Category = info.Category;
            CmbYear = (await StudentService.GetAcademicYear(info.BranchID)).ToList();
            //objAccYear = CmbYear.Where(b => b.Status.Trim() == "Current").FirstOrDefault();
            objAccYear = CmbYear.Where(b => b.AcademicYear.Trim() == Accyear).FirstOrDefault();

            CmbAccYear = objAccYear.AcademicYear.ToString();

            branch = info.BranchID;
        }

        if (Category == "Administrator")
        {
            AllowOpen = true;
            Open = false;

            vtype = Convert.ToInt32(await _IPostingManager.GetVtype("Student Fee"));
            Addvtype = Convert.ToInt32(await _IPostingManager.GetVtype("Additional Fee"));
            Taxvoicedate = DateTime.Now;
            HomeLoad = 1;

            await LoadData();
            HomeLoad = 0;
            await InvokeAsync(StateHasChanged);


        }
        else
        {
            try
            {
                //StudFeeRegister = (await StudentService.GetFeeConflict(CmbAccYear, BranchID, FromDate.ToString("MM/dd/yyyy"), ToDate.ToString("MM/dd/yyyy"),ComboBoxValueStatus,ComboBoxValue, Con)).ToList();
                objUserRight = await _UserRights.GetUserRights(UserID, "PostFee", "Students", BranchID);

                if (objUserRight.AccessDenied == true)
                {
                    AllowOpen = false;
                    Open = true;
                }
                else if (objUserRight.AllowOpen == true)
                {
                    AllowOpen = true;
                    Open = false;


                    vtype = Convert.ToInt32(await _IPostingManager.GetVtype("Student Fee"));
                    Addvtype = Convert.ToInt32(await _IPostingManager.GetVtype("Additional Fee"));
                    Taxvoicedate = DateTime.Now;
                    HomeLoad = 1;

                    await LoadData();
                    HomeLoad = 0;

                }
                else
                {
                    AllowOpen = false;
                    Open = true;
                }
            }
            catch (Exception ex)
            {
                throw ex;
                AllowOpen = false;
                Open = true;
            }
        }
    }
    public int? bnch;

    public async Task LoadData()
    {
        try
        {
        Accyear = await sessionStorage.GetItemAsync<string>("AcademicYear");
        if (Accyear != null)
        {
            CmbYear = (await StudentMasterService.GetAcademicYear(BranchID)).ToList();
            //objAccYear = CmbYear.Where(b => b.Status.Trim() == "Current").FirstOrDefault();
            objAccYear = CmbYear.Where(b => b.AcademicYear.Trim() == Accyear).FirstOrDefault();

            CmbAccYear = Accyear;
            //Academicyear = await StudentMasterService.GetAcademicYear(bnch);
        }
        else
        {
            //Academicyear = await StudentMasterService.GetAcademicyear(bnch);
            CmbAccYear = Academicyear[0];
        }
        //StudentList = (await StudentMasterService.GetStudentList(CmbAccYear, BranchID)).ToList();
       // StudentList = globalStudentServ.GlobalStudentList;

            StudentList = (await StudentsService.GetStudentsDefault(CmbAccYear!, BranchID, Category, UserID))!.ToList();

        StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));

        string cmdtext;
        cmdtext = "Vat Received In Advance";
        AdvVatId = await _IPostingManager.getUniqueAccID(cmdtext);



        FeeDetails.FromDate = DateTime.Now;

        if (AccountID != null)
        {
            //await Edit_Click();
        }
        else
        {

        }
        Class = (await StudentMasterService.GetClass(BranchID, CmbAccYear)).ToList();
        Division = (await StudentMasterService.GetDivision(BranchID)).ToList();
        Fee = (await StudentMasterService.GetFee(CmbAccYear, BranchID)).ToList();
        Transport = (await StudentMasterService.GetTransport(CmbAccYear, BranchID)).ToList();
        Admission = (await StudentMasterService.GetAdmission(CmbAccYear, BranchID)).ToList();
        FeeDiscount = (await StudentMasterService.GetFeeDiscount(BranchID)).ToList();
        TranDiscount = (await StudentMasterService.GetFeeDiscount(BranchID)).ToList();
        StatementFromDate = Convert.ToDateTime(objAccYear.StartDate.ToString());
        //StatementEndDate = Convert.ToDateTime(objAccYear.EndDate.ToString());
        DateTime NextDate = Convert.ToDateTime(objAccYear.StartDate.ToString()).AddYears(1);
        StatementEndDate = NextDate.AddDays(-1);


        DTAccount = await StudentMasterService.GetDTAccount(AccountID);
            objParentID = AccountID;

        DTStudent = await StudentMasterService.GetDTStudent(AccountID);

        DTStudentTrans = await StudentMasterService.GetDTStudentTrans(AccountID, BranchID, CmbAccYear);

        DTParent = await StudentMasterService.GetDTParent(AccountID);
        objStaffParent = DTParent.StaffParent;

        DTParentAccount = await StudentMasterService.GetDTAccount(Convert.ToInt32(objParentID));
        StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));

        AdditionalFee = (await _IPostingManager.GetAdditionalFee(CmbAccYear, "AdditionalPayment", BranchID)).ToList();
        AdditionalDiscount = (await _IPostingManager.GetAdditionalFee(CmbAccYear, "AdditionalDiscount", BranchID)).ToList();

        edit = false;
        btnenable = false;

        await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
        throw ex;
        }
    }

    public async Task Edit_Click()
    {
        await init_edit();
        mode = "Edit";
        enable = true;
        btnAddenable = false;
        btnSaveenable = false;
        btnEditenable = true;
        btnCancelenable = false;
        btnBackenable = false;
        edit = true;
        btnenable = true;

    }
    public async Task CalculateBalance()
    {
        try
        {
            for (int i = 0; i <= StudStatement.Count() - 1; i++)
            {
                if (StudStatement.ToList()[i].Debit != null && StudStatement.ToList()[i].Debit != 0)
                {
                    decimal Sum;
                    if (i != 0)
                        Sum = StudStatement.ToList()[i - 1].Balance;
                    else
                        Sum = 0;
                    StudStatement.ToList()[i].Balance = Sum + StudStatement.ToList()[i].Debit;
                }
                if (StudStatement[i].Credit != null && StudStatement.ToList()[i].Credit != 0)
                {
                    decimal Sum;
                    if (i != 0)
                        Sum = StudStatement.ToList()[i - 1].Balance;
                    else
                        Sum = 0;
                    StudStatement.ToList()[i].Balance = Sum - StudStatement.ToList()[i].Credit;

                }
            }
            if (StudStatementGrid != null)
                await StudStatementGrid.Refresh();
            await InvokeAsync(StateHasChanged);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    public async Task Edit_Clicks()
    {
        btnenable = true;
        btnSave = false;
    }

    public async Task init_edit()
    {
        DTAccount = await StudentMasterService.GetDTAccount(AccountID);
        objParentID = DTAccount.Parent;

        DTStudent = await StudentMasterService.GetDTStudent(AccountID);

        DTStudentTrans = await StudentMasterService.GetDTStudentTrans(AccountID, BranchID, CmbAccYear);

        DTParent = await StudentMasterService.GetDTParent(Convert.ToInt32(objParentID));
        objStaffParent = DTParent.StaffParent;

        DTParentAccount = await StudentMasterService.GetDTAccount(Convert.ToInt32(objParentID));
        StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
        //StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear, Con)).ToList();
        //GetFeeBalanceAggregate(StudFeeDetails);

        //StudAdditionalPayment = (await StudentMasterService.GetAdditionalPayment(AccountID, Con)).ToList();
        //StudAdditionalDiscount = (await StudentMasterService.GetAdditionalDiscount(AccountID, Con)).ToList();

        Fee = (await StudentMasterService.GetFee(CmbAccYear, BranchID)).ToList();
        Transport = (await StudentMasterService.GetTransport(CmbAccYear, BranchID)).ToList();
        Admission = (await StudentMasterService.GetAdmission(CmbAccYear, BranchID)).ToList();
        FeeDiscount = (await StudentMasterService.GetFeeDiscount(BranchID)).ToList();
        TranDiscount = (await StudentMasterService.GetFeeDiscount(BranchID)).ToList();
        StatementFromDate = Convert.ToDateTime(objAccYear.StartDate.ToString());
        //StatementEndDate = Convert.ToDateTime(objAccYear.EndDate.ToString());
        DateTime NextDate = Convert.ToDateTime(objAccYear.StartDate.ToString()).AddYears(1);
        StatementEndDate = NextDate.AddDays(-1);
        //Additional Fee
        //StudStatement = (await StudentMasterService.GetStatement(StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), AccountID, BranchID, Con)).ToList();
        //StudStatement = StudStatement.OrderBy(m => m.EffectiveDate).ThenByDescending(n => n.Debit).ThenByDescending(x => x.Credit).ToList();
        //await CalculateBalance();
        AdditionalFee = (await _IPostingManager.GetAdditionalFee(CmbAccYear, "AdditionalPayment", BranchID)).ToList();
        AdditionalDiscount = (await _IPostingManager.GetAdditionalFee(CmbAccYear, "AdditionalDiscount", BranchID)).ToList();
        edit = false;
        btnenable = false;

        //StudFeeDetails = StudFeeDetails.OrderBy(m => m.VDate).ToList();

        GetSchoolTaxInvoice = await _IPostingManager.Getdatass(BranchID, CmbAccYear, AccountID);



        StudStatement = (await StudentMasterService.GetStatement(StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), AccountID, BranchID)).ToList();
        StudStatement = StudStatement.OrderBy(m => m.EffectiveDate).ThenByDescending(n => n.Debit).ThenByDescending(x => x.Credit).ToList();
        StudFeeRegisters = (await StudentService.GetParentStudentFeeWise(CmbAccYear, BranchID, "Student", Convert.ToInt32(AccountID), StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Studying")).ToList();
        await CalculateBalance();

        StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();

        GetFeeBalanceAggregate(StudFeeDetails);




    }


    void HandleValidSubmit()
    {
        //  FormValidationState = @"Form data is valid";
    }
    public async Task popClose_Click()
    {

        PopupVisible = false;
        PopupDeVisibletrue = false;
        PopupDeVisible = false;

        await InvokeAsync(StateHasChanged);
    }

    void HandleInvalidSubmit()
    {
        // FormValidationState = @"Form data is invalid";
    }
    public async Task FeeSchedulePost_Click()
    {
        string Criteria = "FeeSchedulePost";
        var response = await _IPostingManager.Postallindividual(AccountID, BranchID, Criteria, CmbAccYear, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"));
        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadFromJsonAsync<dtError>();
            //string msg= JsonConvert.DeserializeObject<string>(jsonString);

            if (jsonString.Error == null)
            {
                ImportMessage2 = "Post Success";

                PopupDeVisibletrue = true;
                StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
                StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();
                StudStatement = (await StudentMasterService.GetStatement(StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), AccountID, BranchID)).ToList();

                GetFeeBalanceAggregate(StudFeeDetails);
                DtoUserTrack dttrack = new DtoUserTrack();
                dttrack.UserId = user;
                dttrack.TableName = "Voucher";
                dttrack.ActionDate = DateTime.Now;
                dttrack.ModuleName = "Student";
                dttrack.Reference = "College Portal";
                dttrack.Reason = DTAccount.AccountCode + "  Post Success";

                HttpResponseMessage msgTrack = await _IClassMaster.AddSaveUserTrack(dttrack);
            }
            else
            {
                ImportMessage2 = jsonString.Error;

                PopupDeVisibletrue = true;

            }
            //ImportMessage2 = jsonString.Error;
        }

        //if (DTStudentTrans.FeeSchedule == null)
        //{
        //    PopupFeeError = true;
        //}
        //else if (DTStudentTrans.FeeSchedule == "")
        //{
        //    PopupFeeError = true;
        //}
        //else if (DTStudentTrans.FeeSchedule == "None")
        //{
        //    PopupFeeError = true;
        //}
        //else
        //{

        //    int monthcount = 0;
        //    decimal totalscheduleamount = 0;
        //    int discschedule = 0;
        //    int discid = 0;
        //    string discdescription = "";
        //    foreach (dtFeeSchedule dt in FeeSchedule)
        //    {
        //        if (dt.DiscountPossible == true)
        //        {
        //            totalscheduleamount = totalscheduleamount + dt.Amount;

        //        }
        //    }

        //    feeexist = Convert.ToInt32(await _IPostingManager.FeePostChecking(AccountID, vtype, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "FEE", Con));
        //    if (!(feeexist == 0))
        //    {
        //        PopupSaveError = true;
        //    }

        //    else
        //    {
        //        PopupLoading = true;
        //        FeeSchedule = (await _IPostingManager.GetFeeSchedule(DTStudentTrans.AcademicYear, BranchID, DTStudentTrans.FeeSchedule, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Fee", Con)).ToList();
        //        DiscountScheduleName = (await _IPostingManager.GetDiscountSchedule(BranchID, DTStudentTrans.DiscountSchedule, Con)).ToList();

        //        string AY = CmbAccYear.Substring(2, 2);
        //        foreach (dtDiscountSchedule dtd in DiscountScheduleName)
        //        {
        //            discschedule = dtd.Discount;
        //            discid = dtd.PostTo;
        //            discdescription = dtd.Description;
        //        }

        //        dtsVoucher dts = new dtsVoucher();
        //        objpostvoucherTemp.Clear();

        //        foreach (dtFeeSchedule dt in FeeSchedule)
        //        {
        //            Decimal totalvatamount = 0;
        //            Decimal DiscountAmount = 0;
        //            if (dt.VatApplicable == true)
        //            {
        //                if (dt.VatInclusive == true)
        //                {

        //                    totalvatamount = ((dt.Amount * dt.VatPercent) / 105);
        //                }
        //                else
        //                {
        //                    totalvatamount = ((dt.Amount * dt.VatPercent) / 100);

        //                }
        //            }

        //            dtPostingVoucher objpostvoucher = new dtPostingVoucher();
        //            objpostvoucher.EffectiveDate = dt.DueDate;
        //            objpostvoucher.VDate = dt.DueDate;
        //            objpostvoucher.DueDate = dt.DueDate;
        //            objpostvoucher.CreatedDate = DateTime.Today;
        //            objpostvoucher.ModifiedDate = DateTime.Today;
        //            objpostvoucher.Remark = DTStudentTrans.FeeSchedule;
        //            objpostvoucher.VType = vtype;
        //            objpostvoucher.BranchID = BranchID;
        //            objpostvoucher.RefNo = "FEE" + AY + DTStudentTrans.AccountId.ToString();
        //            objpostvoucher.AccountID = DTStudentTrans.AccountId;
        //            objpostvoucher.AccountName = null;
        //            objpostvoucher.AccountCode = null;
        //            objpostvoucher.UserTrackID = dt.Priorityno;
        //            objpostvoucher.CommonNarration = dt.Description;
        //            objpostvoucher.VoucherAgainst = "FEE";
        //            objpostvoucher.PreparedBy = dt.Code;
        //            objpostvoucher.VATAmt = totalvatamount;
        //            objpostvoucher.VEDAccountID = DTStudentTrans.AccountId;
        //            objpostvoucher.VECAccountID = dt.PostTo;
        //            objpostvoucher.VEVAccountID = AdvVatId;
        //            objpostvoucher.TaxCode = dt.TAXCode;

        //            if (dt.VatApplicable == true)
        //            {
        //                if (dt.VatInclusive == true)
        //                {
        //                    objpostvoucher.Amount = dt.Amount;
        //                }
        //                else
        //                {
        //                    objpostvoucher.Amount = dt.Amount + totalvatamount;

        //                }
        //            }
        //            else
        //            {
        //                objpostvoucher.Amount = dt.Amount;

        //            }

        //            objpostvoucher.IsCanceled = Convert.ToBoolean(0);
        //            objpostvoucher.Posted = Convert.ToBoolean(1);
        //            objpostvoucher.CreatedUserID = user;
        //            objpostvoucher.ModifiedUserID = user;
        //            objpostvoucher.ExchangeRate = 1;
        //            objpostvoucher.Currency = 1;
        //            objpostvoucher.RowState = "Insert";

        //            vID = 0;
        //            //ventry
        //            objpostvoucher.VID = vID;
        //            objpostvoucher.Description = dt.Description;
        //            objpostvoucher.VECAccountID = dt.PostTo;
        //            if (dt.VatApplicable == true)
        //            {
        //                if (dt.VatInclusive == true)
        //                {
        //                    objpostvoucher.VECAmount = dt.Amount - totalvatamount;
        //                }
        //                else
        //                {
        //                    objpostvoucher.VECAmount = dt.Amount;

        //                }
        //            }
        //            else
        //            {
        //                objpostvoucher.VECAmount = dt.Amount;

        //            }
        //            objpostvoucher.VEDAccountID = DTStudentTrans.AccountId;
        //            objpostvoucher.VEDAmount = dt.Amount;
        //            objpostvoucher.DocSubNo = dt.VatPercent.ToString();
        //            objpostvoucher.SlNo = 1;
        //            if (dt.VatApplicable == true)
        //            {
        //                objpostvoucher.VatApplicable = true;
        //                if (dt.VatInclusive == true)
        //                {
        //                    objpostvoucher.VatInc = true;
        //                }
        //                objpostvoucher.VEVAccountID = AdvVatId;
        //                objpostvoucher.VEVAmount = totalvatamount;
        //            }
        //            objpostvoucherTemp.Add(objpostvoucher);

        //            if (DTStudentTrans.FeeDiscount == true && dt.DiscountPossible == true)
        //            {

        //                DiscountAmount = (dt.Amount * discschedule) / 100;
        //                await VoucherUpdateForDiscount(DTStudentTrans.AccountId, dt.DueDate, vtype, DiscountAmount, discdescription, DTStudentTrans.DiscountSchedule, discid);


        //            }



        //            //await _IPostingManager.CreatePostingVoucher(dts);//await Http.PostAsJsonAsync("api/Inventory", dts);

        //            //int slno = 1;

        //            //await GetUniqueAccounts();


        //        }
        //        dts.objpostvoucherTemp = objpostvoucherTemp.ToList().ToArray();
        //        HttpResponseMessage response = await _IPostingManager.CreatePostingVoucher(dts, Con);//await Http.PostAsJsonAsync("api/Inventory", dts);

        //        if (response.IsSuccessStatusCode)
        //        {
        //            PopupLoading = false;
        //            PopupVisible = true;
        //            StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear, Con));
        //            StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear, Con)).ToList();
        //            GetFeeBalanceAggregate(StudFeeDetails);


        //        }
        //        else
        //        {
        //            PopupLoading = false;
        //            PopupSaveError = true;
        //        }
        //    }
        //}
        //}
    }
    public List<dtInvoiceRegister> getInvoice = new List<dtInvoiceRegister>();

    public async Task Taxinvoicegenerate_Click()
    {


        //string Criteria = "TransSchedulePost";


        GetSchoolTaxInvoice = await _IPostingManager.Getdatass(BranchID, CmbAccYear, AccountID);
        getInvoice = await _IInvoiceRegisterManagers.GetInvoices(CmbAccYear, BranchID, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"));

        foreach (var ithem in getInvoice)
        {
            if (ithem.AccountCode != DTAccount.AccountCode)
            {
                ImportMessage2 = "Please Post The data, There is no  data to Generate Invoice";
                PopupDeVisibletrue = true;
            }
            else
            {
                var response = await _IPostingManager.Invoicegeneration(AccountID, BranchID, CmbAccYear, Taxvoicedate.ToString("MM/dd/yyyy"), StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"));

                if (response.IsSuccessStatusCode)
                {


                    var jsonString = await response.Content.ReadFromJsonAsync<dtError>();
                    //string msg= JsonConvert.DeserializeObject<string>(jsonString);

                    if (jsonString.Error == null)
                    {
                        ImportMessage2 = "Invoice Generate Success";
                        PopupDeVisibletrue = true;
                    }

                    else
                    {
                        ImportMessage2 = jsonString.Error;
                        PopupDeVisibletrue = true;
                    }

                }

            }
        }

    }
    public async Task TransSchedulePost_Click()
    {


        string Criteria = "TransSchedulePost";


        var response = await _IPostingManager.Postallindividual(AccountID, BranchID, Criteria, CmbAccYear, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"));
        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadFromJsonAsync<dtError>();
            //string msg= JsonConvert.DeserializeObject<string>(jsonString);

            if (jsonString.Error == null)
            {
                ImportMessage2 = "Post Success";

                PopupDeVisibletrue = true;
                DtoUserTrack dttrack = new DtoUserTrack();
                dttrack.UserId = user;
                dttrack.TableName = "Voucher";
                dttrack.ActionDate = DateTime.Now;
                dttrack.ModuleName = "Student";
                dttrack.Reference = "College Portal";
                dttrack.Reason = DTAccount.AccountCode + "  Post Success";

                HttpResponseMessage msgTrack = await _IClassMaster.AddSaveUserTrack(dttrack);
            }
            else
            {
                ImportMessage2 = jsonString.Error;

                PopupDeVisibletrue = true;

            }
            //ImportMessage2 = jsonString.Error;
        }
        //if (DTStudentTrans.TransSchedule == null)
        //{
        //    PopupFeeError = true;
        //}
        //else if (DTStudentTrans.TransSchedule == "")
        //{
        //    PopupFeeError = true;
        //}
        //else if (DTStudentTrans.TransSchedule == "None")
        //{
        //    PopupFeeError = true;
        //}
        //else
        //{
        //    decimal totalscheduleamount = 0;
        //    int discschedule = 0;
        //    foreach (dtFeeSchedule dt in FeeSchedule)
        //    {
        //        if (dt.DiscountPossible == true)
        //        {
        //            totalscheduleamount = totalscheduleamount + dt.Amount;

        //        }
        //    }

        //    feeexist = Convert.ToInt32(await _IPostingManager.FeePostChecking(AccountID, vtype, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Transportation", Con));
        //    if (!(feeexist == 0))
        //    {
        //        PopupSaveError = true;
        //    }

        //    else
        //    {
        //        PopupLoading = true;
        //        FeeSchedule = (await _IPostingManager.GetFeeSchedule(DTStudentTrans.AcademicYear, BranchID, DTStudentTrans.TransSchedule, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Fee", Con)).ToList();
        //        DiscountScheduleName = (await _IPostingManager.GetDiscountSchedule(BranchID, DTStudentTrans.TranDiscountSchedule, Con)).ToList();

        //        string AY = CmbAccYear.Substring(2, 2);
        //        foreach (dtDiscountSchedule dtd in DiscountScheduleName)
        //        {
        //            discschedule = dtd.Discount;
        //        }

        //        dtsVoucher dts = new dtsVoucher();
        //        objpostvoucherTemp.Clear();

        //        foreach (dtFeeSchedule dt in FeeSchedule)
        //        {
        //            Decimal totalvatamount = 0;
        //            Decimal DiscountAmount = 0;
        //            if (dt.VatApplicable == true)
        //            {
        //                if (dt.VatInclusive == true)
        //                {

        //                    totalvatamount = ((dt.Amount * dt.VatPercent) / 105);
        //                }
        //                else
        //                {
        //                    totalvatamount = ((dt.Amount * dt.VatPercent) / 100);

        //                }
        //            }

        //            dtPostingVoucher objpostvoucher = new dtPostingVoucher();
        //            objpostvoucher.EffectiveDate = dt.DueDate;
        //            objpostvoucher.VDate = dt.DueDate;
        //            objpostvoucher.DueDate = dt.DueDate;
        //            objpostvoucher.CreatedDate = DateTime.Today;
        //            objpostvoucher.ModifiedDate = DateTime.Today;
        //            objpostvoucher.Remark = DTStudentTrans.TransSchedule;
        //            objpostvoucher.VType = vtype;
        //            objpostvoucher.BranchID = BranchID;
        //            objpostvoucher.RefNo = "FEE" + AY + DTStudentTrans.AccountId.ToString();
        //            objpostvoucher.AccountID = DTStudentTrans.AccountId;
        //            objpostvoucher.AccountName = null;
        //            objpostvoucher.AccountCode = null;
        //            objpostvoucher.UserTrackID = dt.Priorityno;
        //            objpostvoucher.CommonNarration = dt.Description;
        //            objpostvoucher.VoucherAgainst = "Transportation";
        //            objpostvoucher.PreparedBy = dt.Code;
        //            objpostvoucher.VATAmt = totalvatamount;
        //            objpostvoucher.VEDAccountID = DTStudentTrans.AccountId;
        //            objpostvoucher.VECAccountID = dt.PostTo;
        //            objpostvoucher.VEVAccountID = AdvVatId;
        //            objpostvoucher.TaxCode = dt.TAXCode;

        //            if (dt.VatApplicable == true)
        //            {
        //                if (dt.VatInclusive == true)
        //                {
        //                    objpostvoucher.Amount = dt.Amount;
        //                }
        //                else
        //                {
        //                    objpostvoucher.Amount = dt.Amount + totalvatamount;

        //                }
        //            }
        //            else
        //            {
        //                objpostvoucher.Amount = dt.Amount;

        //            }

        //            objpostvoucher.IsCanceled = Convert.ToBoolean(0);
        //            objpostvoucher.Posted = Convert.ToBoolean(1);
        //            objpostvoucher.CreatedUserID = user;
        //            objpostvoucher.ModifiedUserID = user;
        //            objpostvoucher.ExchangeRate = 1;
        //            objpostvoucher.Currency = 1;
        //            objpostvoucher.RowState = "Insert";

        //            vID = 0;
        //            //ventry
        //            objpostvoucher.VID = vID;
        //            objpostvoucher.Description = dt.Description;
        //            objpostvoucher.VECAccountID = dt.PostTo;
        //            if (dt.VatApplicable == true)
        //            {
        //                if (dt.VatInclusive == true)
        //                {
        //                    objpostvoucher.VECAmount = dt.Amount - totalvatamount;
        //                }
        //                else
        //                {
        //                    objpostvoucher.VECAmount = dt.Amount;

        //                }
        //            }
        //            else
        //            {
        //                objpostvoucher.VECAmount = dt.Amount;

        //            }
        //            objpostvoucher.VEDAccountID = DTStudentTrans.AccountId;
        //            objpostvoucher.VEDAmount = dt.Amount;
        //            objpostvoucher.DocSubNo = dt.VatPercent.ToString();
        //            objpostvoucher.SlNo = 1;
        //            if (dt.VatApplicable == true)
        //            {
        //                objpostvoucher.VatApplicable = true;
        //                if (dt.VatInclusive == true)
        //                {
        //                    objpostvoucher.VatInc = true;
        //                }
        //                objpostvoucher.VEVAccountID = AdvVatId;
        //                objpostvoucher.VEVAmount = totalvatamount;
        //            }
        //            objpostvoucherTemp.Add(objpostvoucher);

        //            if (DTStudentTrans.TranDiscount == true && dt.DiscountPossible == true)
        //            {

        //                DiscountAmount = (dt.Amount * discschedule) / 100;
        //                await VoucherUpdateForTranDiscount(DTStudentTrans.AccountId, dt.DueDate, vtype, DiscountAmount, dt.Description, DTStudentTrans.TranDiscountSchedule, dt.Discount);
        //            }

        //        }
        //        dts.objpostvoucherTemp = objpostvoucherTemp.ToList().ToArray();
        //        HttpResponseMessage response = await _IPostingManager.CreatePostingVoucher(dts, Con);//await Http.PostAsJsonAsync("api/Inventory", dts);

        //        if (response.IsSuccessStatusCode)
        //        {
        //            PopupLoading = false;
        //            PopupVisible = true;
        //            StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear, Con));
        //            StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear, Con)).ToList();
        //            GetFeeBalanceAggregate(StudFeeDetails);


        //        }
        //        else
        //        {
        //            PopupLoading = false;
        //            PopupSaveError = true;
        //        }
        //    }
        //}
        //}
    }
    public void Back_Click()
    {
        //uriHelper.NavigateTo("StudentFeeRegister");
        IJS.InvokeVoidAsync("history.back", -1);
    }
    public async Task AdmnSchedulePost_Click()
    {
        string Criteria = "AdmnSchedulePost";


        var response = await _IPostingManager.Postallindividual(AccountID, BranchID, Criteria, CmbAccYear, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"));
        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadFromJsonAsync<dtError>();
            //string msg= JsonConvert.DeserializeObject<string>(jsonString);

            if (jsonString.Error == null)
            {
                ImportMessage2 = "Post Success";

                PopupDeVisibletrue = true;
                StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
                StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();
                StudStatement = (await StudentMasterService.GetStatement(StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), AccountID, BranchID)).ToList();

                GetFeeBalanceAggregate(StudFeeDetails);
                DtoUserTrack dttrack = new DtoUserTrack();
                dttrack.UserId = user;
                dttrack.TableName = "Voucher";
                dttrack.ActionDate = DateTime.Now;
                dttrack.ModuleName = "Student";
                dttrack.Reference = "College Portal";
                dttrack.Reason = DTAccount.AccountCode + "Post Success";

                HttpResponseMessage msgTrack = await _IClassMaster.AddSaveUserTrack(dttrack);

            }
            else
            {
                ImportMessage2 = jsonString.Error;

                PopupDeVisibletrue = true;

            }
            //ImportMessage2 = jsonString.Error;
        }


        //if (DTStudentTrans.AdmissionSchedule == null)
        //{
        //    PopupFeeError = true;
        //}
        //else if (DTStudentTrans.AdmissionSchedule == "")
        //{
        //    PopupFeeError = true;
        //}
        //else if (DTStudentTrans.AdmissionSchedule == "None")
        //{
        //    PopupFeeError = true;
        //}
        //else
        //{


        //    feeexist = Convert.ToInt32(await _IPostingManager.FeePostChecking(AccountID, vtype, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Admission", Con));
        //    if (!(feeexist == 0))
        //    {
        //        PopupSaveError = true;
        //    }

        //    else
        //    {
        //        PopupLoading = true;
        //        FeeSchedule = (await _IPostingManager.GetFeeSchedule(DTStudentTrans.AcademicYear, BranchID, DTStudentTrans.AdmissionSchedule, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Fee", Con)).ToList();

        //        string AY = CmbAccYear.Substring(2, 2);

        //        dtsVoucher dts = new dtsVoucher();
        //        objpostvoucherTemp.Clear();

        //        foreach (dtFeeSchedule dt in FeeSchedule)
        //        {
        //            Decimal totalvatamount = 0;
        //            Decimal DiscountAmount = 0;
        //            if (dt.VatApplicable == true)
        //            {
        //                if (dt.VatInclusive == true)
        //                {

        //                    totalvatamount = ((dt.Amount * dt.VatPercent) / 105);
        //                }
        //                else
        //                {
        //                    totalvatamount = ((dt.Amount * dt.VatPercent) / 100);

        //                }
        //            }

        //            dtPostingVoucher objpostvoucher = new dtPostingVoucher();
        //            objpostvoucher.EffectiveDate = dt.DueDate;
        //            objpostvoucher.VDate = dt.DueDate;
        //            objpostvoucher.DueDate = dt.DueDate;
        //            objpostvoucher.CreatedDate = DateTime.Today;
        //            objpostvoucher.ModifiedDate = DateTime.Today;
        //            objpostvoucher.Remark = DTStudentTrans.AdmissionSchedule;
        //            objpostvoucher.VType = vtype;
        //            objpostvoucher.BranchID = BranchID;
        //            objpostvoucher.RefNo = "FEE" + AY + DTStudentTrans.AccountId.ToString();
        //            objpostvoucher.AccountID = DTStudentTrans.AccountId;
        //            objpostvoucher.AccountName = null;
        //            objpostvoucher.AccountCode = null;
        //            objpostvoucher.UserTrackID = dt.Priorityno;
        //            objpostvoucher.CommonNarration = dt.Description;
        //            objpostvoucher.VoucherAgainst = "Admission";
        //            objpostvoucher.PreparedBy = dt.Code;
        //            objpostvoucher.VATAmt = totalvatamount;
        //            objpostvoucher.VEDAccountID = DTStudentTrans.AccountId;
        //            objpostvoucher.VECAccountID = dt.PostTo;
        //            objpostvoucher.VEVAccountID = AdvVatId;
        //            objpostvoucher.TaxCode = dt.TAXCode;

        //            if (dt.VatApplicable == true)
        //            {
        //                if (dt.VatInclusive == true)
        //                {
        //                    objpostvoucher.Amount = dt.Amount;
        //                }
        //                else
        //                {
        //                    objpostvoucher.Amount = dt.Amount + totalvatamount;

        //                }
        //            }
        //            else
        //            {
        //                objpostvoucher.Amount = dt.Amount;

        //            }

        //            objpostvoucher.IsCanceled = Convert.ToBoolean(0);
        //            objpostvoucher.Posted = Convert.ToBoolean(1);
        //            objpostvoucher.CreatedUserID = user;
        //            objpostvoucher.ModifiedUserID = user;
        //            objpostvoucher.ExchangeRate = 1;
        //            objpostvoucher.Currency = 1;
        //            objpostvoucher.RowState = "Insert";

        //            vID = 0;
        //            //ventry
        //            objpostvoucher.VID = vID;
        //            objpostvoucher.Description = dt.Description;
        //            objpostvoucher.VECAccountID = dt.PostTo;
        //            if (dt.VatApplicable == true)
        //            {
        //                if (dt.VatInclusive == true)
        //                {
        //                    objpostvoucher.VECAmount = dt.Amount - totalvatamount;
        //                }
        //                else
        //                {
        //                    objpostvoucher.VECAmount = dt.Amount;

        //                }
        //            }
        //            else
        //            {
        //                objpostvoucher.VECAmount = dt.Amount;

        //            }
        //            objpostvoucher.VEDAccountID = DTStudentTrans.AccountId;
        //            objpostvoucher.VEDAmount = dt.Amount;
        //            objpostvoucher.DocSubNo = dt.VatPercent.ToString();
        //            objpostvoucher.SlNo = 1;
        //            if (dt.VatApplicable == true)
        //            {
        //                objpostvoucher.VatApplicable = true;
        //                if (dt.VatInclusive == true)
        //                {
        //                    objpostvoucher.VatInc = true;
        //                }
        //                objpostvoucher.VEVAccountID = AdvVatId;
        //                objpostvoucher.VEVAmount = totalvatamount;
        //            }
        //            objpostvoucherTemp.Add(objpostvoucher);

        //        }
        //        dts.objpostvoucherTemp = objpostvoucherTemp.ToList().ToArray();
        //        HttpResponseMessage response = await _IPostingManager.CreatePostingVoucher(dts, Con);//await Http.PostAsJsonAsync("api/Inventory", dts);

        //        if (response.IsSuccessStatusCode)
        //        {
        //            PopupLoading = false;
        //            PopupVisible = true;
        //            StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear, Con));
        //            StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear, Con)).ToList();
        //            GetFeeBalanceAggregate(StudFeeDetails);


        //        }
        //        else
        //        {
        //            PopupLoading = false;
        //            PopupSaveError = true;
        //        }
        //    }
        //}
        //}
    }
    public async Task StudentTransSchedulePost()
    {
        if (DTStudentTrans.TransSchedule == null)
        {

        }
        else if (DTStudentTrans.TransSchedule == "")
        {

        }
        else if (DTStudentTrans.TransSchedule == "None")
        {

        }
        else
        {
            decimal totalscheduleamount = 0;
            int discschedule = 0;
            foreach (dtFeeSchedule dt in FeeSchedule)
            {
                if (dt.DiscountPossible == true)
                {
                    totalscheduleamount = totalscheduleamount + dt.Amount;

                }
            }

            //feeexist = Convert.ToInt32(await _IPostingManager.FeePostChecking(AccountID, vtype, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Transportation", Con));
            //if (!(feeexist == 0))
            //{

            //}

            //else
            {
                PopupLoading = true;
                FeeSchedule = (await _IPostingManager.GetFeeSchedule(DTStudentTrans.AcademicYear, BranchID, DTStudentTrans.TransSchedule, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Fee")).ToList();
                DiscountScheduleName = (await _IPostingManager.GetDiscountSchedule(BranchID, DTStudentTrans.TranDiscountSchedule)).ToList();

                string AY = CmbAccYear.Substring(2, 2);
                foreach (dtDiscountSchedule dtd in DiscountScheduleName)
                {
                    discschedule = dtd.Discount;
                }

                foreach (dtFeeSchedule dt in FeeSchedule)
                {
                    Decimal totalvatamount = 0;
                    Decimal DiscountAmount = 0;
                    if (dt.VatApplicable == true)
                    {
                        if (dt.VatInclusive == true)
                        {

                            totalvatamount = ((dt.Amount * dt.VatPercent) / 105);
                        }
                        else
                        {
                            totalvatamount = ((dt.Amount * dt.VatPercent) / 100);

                        }
                    }

                    dtPostingVoucher objpostvoucher = new dtPostingVoucher();
                    objpostvoucher.EffectiveDate = dt.DueDate;
                    objpostvoucher.VDate = dt.DueDate;
                    objpostvoucher.DueDate = dt.DueDate;
                    objpostvoucher.CreatedDate = DateTime.Today;
                    objpostvoucher.ModifiedDate = DateTime.Today;
                    objpostvoucher.Remark = DTStudentTrans.TransSchedule;
                    objpostvoucher.VType = vtype;
                    objpostvoucher.BranchID = BranchID;
                    objpostvoucher.RefNo = "FEE" + AY + DTStudentTrans.AccountId.ToString();
                    objpostvoucher.AccountID = DTStudentTrans.AccountId;
                    objpostvoucher.AccountName = null;
                    objpostvoucher.AccountCode = null;
                    objpostvoucher.UserTrackID = dt.Priorityno;
                    objpostvoucher.CommonNarration = dt.Description;
                    objpostvoucher.VoucherAgainst = "Transportation";
                    objpostvoucher.PreparedBy = dt.Code;
                    objpostvoucher.VATAmt = totalvatamount;
                    objpostvoucher.VEDAccountID = DTStudentTrans.AccountId;
                    objpostvoucher.VECAccountID = dt.PostTo;
                    objpostvoucher.VEVAccountID = AdvVatId;
                    objpostvoucher.TaxCode = dt.TAXCode;

                    if (dt.VatApplicable == true)
                    {
                        if (dt.VatInclusive == true)
                        {
                            objpostvoucher.Amount = dt.Amount;
                        }
                        else
                        {
                            objpostvoucher.Amount = dt.Amount + totalvatamount;

                        }
                    }
                    else
                    {
                        objpostvoucher.Amount = dt.Amount;

                    }

                    objpostvoucher.IsCanceled = Convert.ToBoolean(0);
                    objpostvoucher.Posted = Convert.ToBoolean(1);
                    objpostvoucher.CreatedUserID = user;
                    objpostvoucher.ModifiedUserID = user;
                    objpostvoucher.ExchangeRate = 1;
                    objpostvoucher.Currency = 1;
                    objpostvoucher.RowState = "Insert";

                    vID = 0;
                    //ventry
                    objpostvoucher.VID = vID;
                    objpostvoucher.Description = dt.Description;
                    objpostvoucher.VECAccountID = dt.PostTo;
                    if (dt.VatApplicable == true)
                    {
                        if (dt.VatInclusive == true)
                        {
                            objpostvoucher.VECAmount = dt.Amount - totalvatamount;
                        }
                        else
                        {
                            objpostvoucher.VECAmount = dt.Amount;

                        }
                    }
                    else
                    {
                        objpostvoucher.VECAmount = dt.Amount;

                    }
                    objpostvoucher.VEDAccountID = DTStudentTrans.AccountId;
                    objpostvoucher.VEDAmount = dt.Amount;
                    objpostvoucher.DocSubNo = dt.VatPercent.ToString();
                    objpostvoucher.SlNo = 1;
                    if (dt.VatApplicable == true)
                    {
                        objpostvoucher.VatApplicable = true;
                        if (dt.VatInclusive == true)
                        {
                            objpostvoucher.VatInc = true;
                        }
                        objpostvoucher.VEVAccountID = AdvVatId;
                        objpostvoucher.VEVAmount = totalvatamount;
                    }
                    objpostvoucherTemp.Add(objpostvoucher);

                    if (DTStudentTrans.TranDiscount == true && dt.DiscountPossible == true)
                    {

                        DiscountAmount = (dt.Amount * discschedule) / 100;
                        await VoucherUpdateForTranDiscount(DTStudentTrans.AccountId, dt.DueDate, vtype, DiscountAmount, dt.Description, DTStudentTrans.TranDiscountSchedule, dt.Discount);

                    }
                }

            }
        }


    }
    public async Task StudentAdmnSchedulePost()
    {

        if (DTStudentTrans.AdmissionSchedule == null)
        {

        }
        else if (DTStudentTrans.AdmissionSchedule == "")
        {

        }
        else if (DTStudentTrans.AdmissionSchedule == "None")
        {

        }
        else
        {
            //feeexist = Convert.ToInt32(await _IPostingManager.FeePostChecking(AccountID, vtype, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Admission", Con));
            //if (!(feeexist == 0))
            //{

            //}

            //else
            {
                PopupLoading = true;
                FeeSchedule = (await _IPostingManager.GetFeeSchedule(DTStudentTrans.AcademicYear, BranchID, DTStudentTrans.AdmissionSchedule, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Fee")).ToList();

                string AY = CmbAccYear.Substring(2, 2);

                foreach (dtFeeSchedule dt in FeeSchedule)
                {
                    Decimal totalvatamount = 0;
                    Decimal DiscountAmount = 0;
                    if (dt.VatApplicable == true)
                    {
                        if (dt.VatInclusive == true)
                        {

                            totalvatamount = ((dt.Amount * dt.VatPercent) / 105);
                        }
                        else
                        {
                            totalvatamount = ((dt.Amount * dt.VatPercent) / 100);

                        }
                    }

                    dtPostingVoucher objpostvoucher = new dtPostingVoucher();
                    objpostvoucher.EffectiveDate = dt.DueDate;
                    objpostvoucher.VDate = dt.DueDate;
                    objpostvoucher.DueDate = dt.DueDate;
                    objpostvoucher.CreatedDate = DateTime.Today;
                    objpostvoucher.ModifiedDate = DateTime.Today;
                    objpostvoucher.Remark = DTStudentTrans.AdmissionSchedule;
                    objpostvoucher.VType = vtype;
                    objpostvoucher.BranchID = BranchID;
                    objpostvoucher.RefNo = "FEE" + AY + DTStudentTrans.AccountId.ToString();
                    objpostvoucher.AccountID = DTStudentTrans.AccountId;
                    objpostvoucher.AccountName = null;
                    objpostvoucher.AccountCode = null;
                    objpostvoucher.UserTrackID = dt.Priorityno;
                    objpostvoucher.CommonNarration = dt.Description;
                    objpostvoucher.VoucherAgainst = "Admission";
                    objpostvoucher.PreparedBy = dt.Code;
                    objpostvoucher.VATAmt = totalvatamount;
                    objpostvoucher.VEDAccountID = DTStudentTrans.AccountId;
                    objpostvoucher.VECAccountID = dt.PostTo;
                    objpostvoucher.VEVAccountID = AdvVatId;
                    objpostvoucher.TaxCode = dt.TAXCode;

                    if (dt.VatApplicable == true)
                    {
                        if (dt.VatInclusive == true)
                        {
                            objpostvoucher.Amount = dt.Amount;
                        }
                        else
                        {
                            objpostvoucher.Amount = dt.Amount + totalvatamount;

                        }
                    }
                    else
                    {
                        objpostvoucher.Amount = dt.Amount;

                    }

                    objpostvoucher.IsCanceled = Convert.ToBoolean(0);
                    objpostvoucher.Posted = Convert.ToBoolean(1);
                    objpostvoucher.CreatedUserID = user;
                    objpostvoucher.ModifiedUserID = user;
                    objpostvoucher.ExchangeRate = 1;
                    objpostvoucher.Currency = 1;
                    objpostvoucher.RowState = "Insert";

                    vID = 0;
                    //ventry
                    objpostvoucher.VID = vID;
                    objpostvoucher.Description = dt.Description;
                    objpostvoucher.VECAccountID = dt.PostTo;
                    if (dt.VatApplicable == true)
                    {
                        if (dt.VatInclusive == true)
                        {
                            objpostvoucher.VECAmount = dt.Amount - totalvatamount;
                        }
                        else
                        {
                            objpostvoucher.VECAmount = dt.Amount;

                        }
                    }
                    else
                    {
                        objpostvoucher.VECAmount = dt.Amount;

                    }
                    objpostvoucher.VEDAccountID = DTStudentTrans.AccountId;
                    objpostvoucher.VEDAmount = dt.Amount;
                    objpostvoucher.DocSubNo = dt.VatPercent.ToString();
                    objpostvoucher.SlNo = 1;
                    if (dt.VatApplicable == true)
                    {
                        objpostvoucher.VatApplicable = true;
                        if (dt.VatInclusive == true)
                        {
                            objpostvoucher.VatInc = true;
                        }
                        objpostvoucher.VEVAccountID = AdvVatId;
                        objpostvoucher.VEVAmount = totalvatamount;
                    }
                    objpostvoucherTemp.Add(objpostvoucher);



                }

            }

            //}
        }
    }

    public async Task VoucherUpdateForDiscount(int StudeAct, DateTime DiscDate, int vtype, Decimal DisAmount, string Description, string DiscountSchedule, int Discount)
    {
        dtPostingVoucher objpostvoucherdisc = new dtPostingVoucher();
        objpostvoucherdisc.EffectiveDate = DiscDate;// DateTime.Today;
        objpostvoucherdisc.VDate = DiscDate;//DateTime.Today;
        objpostvoucherdisc.DueDate = DiscDate;// DateTime.Today;
        objpostvoucherdisc.CreatedDate = DateTime.Today;
        objpostvoucherdisc.ModifiedDate = DateTime.Today;
        objpostvoucherdisc.Remark = DTStudentTrans.DiscountSchedule;
        objpostvoucherdisc.VType = vtype;
        objpostvoucherdisc.BranchID = BranchID;
        objpostvoucherdisc.DisApplicable = true;
        objpostvoucherdisc.RefNo = DTStudentTrans.DiscountSchedule;
        objpostvoucherdisc.AccountID = StudeAct;
        objpostvoucherdisc.CommonNarration = Description;
        objpostvoucherdisc.VoucherAgainst = "FEE Discount";
        objpostvoucherdisc.PreparedBy = DiscountSchedule;
        objpostvoucherdisc.VATAmt = 0;
        objpostvoucherdisc.Amount = DisAmount;
        objpostvoucherdisc.IsCanceled = Convert.ToBoolean(0);
        objpostvoucherdisc.Posted = Convert.ToBoolean(1);
        objpostvoucherdisc.CreatedUserID = user;
        objpostvoucherdisc.ModifiedUserID = user;
        objpostvoucherdisc.ExchangeRate = 1;
        objpostvoucherdisc.Currency = 1;
        objpostvoucherdisc.RowState = "Insert";


        objpostvoucherdisc.RowType = "Cr";
        objpostvoucherdisc.Description = Description + " Discount";
        objpostvoucherdisc.AccountID = StudeAct;
        objpostvoucherdisc.Credit = DisAmount;
        objpostvoucherdisc.Debit = 0;
        objpostvoucherdisc.TranType = "Sub";
        objpostvoucherdisc.Action = "C";
        objpostvoucherdisc.VisibleonPrint = Convert.ToBoolean(1);
        objpostvoucherdisc.Reconciled = Convert.ToBoolean(0);
        objpostvoucherdisc.Active = Convert.ToBoolean(1);
        objpostvoucherdisc.RowState = "Insert";
        objpostvoucherdisc.VEDAccountID = Discount;
        objpostvoucherdisc.VECAccountID = StudeAct;
        objpostvoucherdisc.Reference = "StudentFeeDiscount";

        objpostvoucherTemp.Add(objpostvoucherdisc);
    }
    public async Task VoucherUpdateForTranDiscount(int StudeAct, DateTime DiscDate, int vtype, Decimal DisAmount, string Description, string DiscountSchedule, int Discount)
    {
        dtPostingVoucher objpostvoucherdisc = new dtPostingVoucher();
        objpostvoucherdisc.EffectiveDate = DiscDate;// DateTime.Today;
        objpostvoucherdisc.VDate = DiscDate;//DateTime.Today;
        objpostvoucherdisc.DueDate = DiscDate;// DateTime.Today;
        objpostvoucherdisc.CreatedDate = DateTime.Today;
        objpostvoucherdisc.ModifiedDate = DateTime.Today;
        objpostvoucherdisc.Remark = DTStudentTrans.DiscountSchedule;
        objpostvoucherdisc.VType = vtype;
        objpostvoucherdisc.BranchID = BranchID;
        objpostvoucherdisc.DisApplicable = true;
        objpostvoucherdisc.RefNo = DTStudentTrans.DiscountSchedule;
        objpostvoucherdisc.AccountID = StudeAct;
        objpostvoucherdisc.CommonNarration = Description + " Discount";
        objpostvoucherdisc.VoucherAgainst = "Transportation Discount";
        objpostvoucherdisc.PreparedBy = DiscountSchedule;
        objpostvoucherdisc.VATAmt = 0;
        objpostvoucherdisc.Amount = DisAmount;
        objpostvoucherdisc.IsCanceled = Convert.ToBoolean(0);
        objpostvoucherdisc.Posted = Convert.ToBoolean(1);
        objpostvoucherdisc.CreatedUserID = user;
        objpostvoucherdisc.ModifiedUserID = user;
        objpostvoucherdisc.ExchangeRate = 1;
        objpostvoucherdisc.Currency = 1;
        objpostvoucherdisc.RowState = "Insert";


        objpostvoucherdisc.RowType = "Cr";
        objpostvoucherdisc.Description = Description + " Discount";
        objpostvoucherdisc.AccountID = StudeAct;
        objpostvoucherdisc.Credit = DisAmount;
        objpostvoucherdisc.Debit = 0;
        objpostvoucherdisc.TranType = "Sub";
        objpostvoucherdisc.Action = "C";
        objpostvoucherdisc.VisibleonPrint = Convert.ToBoolean(1);
        objpostvoucherdisc.Reconciled = Convert.ToBoolean(0);
        objpostvoucherdisc.Active = Convert.ToBoolean(1);
        objpostvoucherdisc.RowState = "Insert";
        objpostvoucherdisc.VEDAccountID = Discount;
        objpostvoucherdisc.VECAccountID = StudeAct;
        objpostvoucherdisc.Reference = "StudentFeeDiscount";
        //objpostvoucher.SlNo = 1;
        //objpostvoucher.VID = vID;
        //objpostvoucher.RowType = "Dr";
        //objpostvoucher.Description = Description+" Discount";
        //objpostvoucher.AccountID = Discount;
        //objpostvoucher.Credit = 0;
        //objpostvoucher.Debit = DisAmount;
        //objpostvoucher.TranType = "Main";
        //objpostvoucher.Action = "C";
        //objpostvoucher.VisibleonPrint = Convert.ToBoolean(1);
        //objpostvoucher.Reconciled = Convert.ToBoolean(0);
        //objpostvoucher.Active = Convert.ToBoolean(1);
        //objpostvoucher.RowState = "Insert";

        //objpostvoucher.SlNo = 1;
        objpostvoucherTemp.Add(objpostvoucherdisc);
    }
    public async Task PostAll_Click()



    {
        string Criteria = "PostAll";

        //if (DTStudentTrans.FeeSchedule == null)
        //{
        //    PopupFeeError = true;
        //}
        //else if (DTStudentTrans.FeeSchedule == "")
        //{
        //    PopupFeeError = true;
        //}
        //else if (DTStudentTrans.FeeSchedule == "None")
        //{
        //    PopupFeeError = true;
        //}
        //else
        //{

        //    decimal totalscheduleamount = 0;
        //    int discschedule = 0;
        //    int discid = 0;
        //    string discdescription = "";
        //    foreach (dtFeeSchedule dt in FeeSchedule)
        //    {
        //        if (dt.DiscountPossible == true)
        //        {
        //            totalscheduleamount = totalscheduleamount + dt.Amount;

        //        }
        //    }

        //    feeexist = Convert.ToInt32(await _IPostingManager.FeePostChecking(AccountID, vtype, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "All", Con));
        //    if (!(feeexist == 0))
        //    {
        //        PopupSaveError = true;
        //    }

        //    else
        //    {
        //        PopupLoading = true;
        //        FeeSchedule = (await _IPostingManager.GetFeeSchedule(DTStudentTrans.AcademicYear, BranchID, DTStudentTrans.FeeSchedule, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Fee", Con)).ToList();
        //        DiscountScheduleName = (await _IPostingManager.GetDiscountSchedule(BranchID, DTStudentTrans.DiscountSchedule, Con)).ToList();

        //        string AY = CmbAccYear.Substring(2, 2);
        //        foreach (dtDiscountSchedule dtd in DiscountScheduleName)
        //        {
        //            discschedule = dtd.Discount;
        //            discid = dtd.PostTo;
        //            discdescription = dtd.Description;
        //        }

        //        dtsVoucher dts = new dtsVoucher();
        //        objpostvoucherTemp.Clear();

        //        foreach (dtFeeSchedule dt in FeeSchedule)
        //        {
        //            Decimal totalvatamount = 0;
        //            Decimal DiscountAmount = 0;
        //            if (dt.VatApplicable == true)
        //            {
        //                if (dt.VatInclusive == true)
        //                {

        //                    totalvatamount = ((dt.Amount * dt.VatPercent) / 105);
        //                }
        //                else
        //                {
        //                    totalvatamount = ((dt.Amount * dt.VatPercent) / 100);

        //                }
        //            }

        //            dtPostingVoucher objpostvoucher = new dtPostingVoucher();
        //            objpostvoucher.EffectiveDate = dt.DueDate;
        //            objpostvoucher.VDate = dt.DueDate;
        //            objpostvoucher.DueDate = dt.DueDate;
        //            objpostvoucher.CreatedDate = DateTime.Today;
        //            objpostvoucher.ModifiedDate = DateTime.Today;
        //            objpostvoucher.Remark = DTStudentTrans.FeeSchedule;
        //            objpostvoucher.VType = vtype;
        //            objpostvoucher.BranchID = BranchID;
        //            objpostvoucher.RefNo = "FEE" + AY + DTStudentTrans.AccountId.ToString();
        //            objpostvoucher.AccountID = DTStudentTrans.AccountId;
        //            objpostvoucher.AccountName = null;
        //            objpostvoucher.AccountCode = null;
        //            objpostvoucher.UserTrackID = dt.Priorityno;
        //            objpostvoucher.CommonNarration = dt.Description;
        //            objpostvoucher.VoucherAgainst = "FEE";
        //            objpostvoucher.PreparedBy = dt.Code;
        //            objpostvoucher.VATAmt = totalvatamount;
        //            objpostvoucher.VEDAccountID = DTStudentTrans.AccountId;
        //            objpostvoucher.VECAccountID = dt.PostTo;
        //            objpostvoucher.VEVAccountID = AdvVatId;
        //            objpostvoucher.TaxCode = dt.TAXCode;

        //            if (dt.VatApplicable == true)
        //            {
        //                if (dt.VatInclusive == true)
        //                {
        //                    objpostvoucher.Amount = dt.Amount;
        //                }
        //                else
        //                {
        //                    objpostvoucher.Amount = dt.Amount + totalvatamount;

        //                }
        //            }
        //            else
        //            {
        //                objpostvoucher.Amount = dt.Amount;

        //            }

        //            objpostvoucher.IsCanceled = Convert.ToBoolean(0);
        //            objpostvoucher.Posted = Convert.ToBoolean(1);
        //            objpostvoucher.CreatedUserID = user;
        //            objpostvoucher.ModifiedUserID = user;
        //            objpostvoucher.ExchangeRate = 1;
        //            objpostvoucher.Currency = 1;
        //            objpostvoucher.RowState = "Insert";

        //            vID = 0;
        //            //ventry
        //            objpostvoucher.VID = vID;
        //            objpostvoucher.Description = dt.Description;
        //            objpostvoucher.VECAccountID = dt.PostTo;
        //            if (dt.VatApplicable == true)
        //            {
        //                if (dt.VatInclusive == true)
        //                {
        //                    objpostvoucher.VECAmount = dt.Amount - totalvatamount;
        //                }
        //                else
        //                {
        //                    objpostvoucher.VECAmount = dt.Amount;

        //                }
        //            }
        //            else
        //            {
        //                objpostvoucher.VECAmount = dt.Amount;

        //            }
        //            objpostvoucher.VEDAccountID = DTStudentTrans.AccountId;
        //            objpostvoucher.VEDAmount = dt.Amount;
        //            objpostvoucher.DocSubNo = dt.VatPercent.ToString();
        //            objpostvoucher.SlNo = 1;
        //            if (dt.VatApplicable == true)
        //            {
        //                objpostvoucher.VatApplicable = true;
        //                if (dt.VatInclusive == true)
        //                {
        //                    objpostvoucher.VatInc = true;
        //                }
        //                objpostvoucher.VEVAccountID = AdvVatId;
        //                objpostvoucher.VEVAmount = totalvatamount;
        //            }
        //            objpostvoucherTemp.Add(objpostvoucher);

        //            if (DTStudentTrans.FeeDiscount == true && dt.DiscountPossible == true)
        //            {

        //                DiscountAmount = (dt.Amount * discschedule) / 100;
        //                await VoucherUpdateForDiscount(DTStudentTrans.AccountId, dt.DueDate, vtype, DiscountAmount, discdescription, DTStudentTrans.DiscountSchedule, discid);

        //            }

        //        }
        //        await StudentTransSchedulePost();
        //        await StudentAdmnSchedulePost();

        //        dts.objpostvoucherTemp = objpostvoucherTemp.ToList().ToArray();
        //        HttpResponseMessage response = await _IPostingManager.CreatePostingVoucher(dts, Con);//await Http.PostAsJsonAsync("api/Inventory", dts);

        //        if (response.IsSuccessStatusCode)
        //        {
        //            PopupLoading = false;
        //            PopupVisible = true;
        //            StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear, Con));
        //            StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear, Con)).ToList();
        //            GetFeeBalanceAggregate(StudFeeDetails);


        //        }
        //        else
        //        {
        //            PopupLoading = false;
        //            PopupSaveError = true;
        //        }
        //    }
        //}
        var response = await _IPostingManager.Postallindividual(AccountID, BranchID, Criteria, CmbAccYear, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"));
        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadFromJsonAsync<dtError>();
            //string msg= JsonConvert.DeserializeObject<string>(jsonString);

            if (jsonString.Error == null)
            {
                ImportMessage2 = "Post Success";

                PopupDeVisibletrue = true;
                StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
                StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();
                //StudStatement = (StudStatementGrid.GetCurrentViewRecordsAsync()).Result;
                GetFeeBalanceAggregate(StudFeeDetails);
                StudStatement = (await StudentMasterService.GetStatement(StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), AccountID, BranchID)).ToList();

            }
            else
            {
                ImportMessage2 = jsonString.Error;

                PopupDeVisibletrue = true;

            }
            //ImportMessage2 = jsonString.Error;
        }


    }
    public async Task DepostAll_Click()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure? You want to Depost");
        if (confirmed)
        {
            int feealloc = Convert.ToInt32(await _IPostingManager.FeeAllocChecking(AccountID, vtype, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "All"));
            if ((feealloc == 0))
            {
                dtsVoucher objdepost = new dtsVoucher();
                dtDeleteVoucher objdeletevoucher = new dtDeleteVoucher();
                objdeletevoucher.AccountId = AccountID;
                objdeletevoucher.VType = vtype;
                objdeletevoucher.StartDate = StatementFromDate.ToString("MM/dd/yyyy");
                objdeletevoucher.EndDate = StatementEndDate.ToString("MM/dd/yyyy");
                objdeletevoucher.Type = "All";
                objdepost.objdepostvoucherTemp = objdeletevoucher;
                HttpResponseMessage msg = await _IPostingManager.DeletePostingVoucher(objdepost);
                if (msg.IsSuccessStatusCode)
                {
                    PopupLoading = false;
                    PopupDeVisible = true;
                    StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
                    StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();
                    GetFeeBalanceAggregate(StudFeeDetails);


                }
                else
                {
                    PopupSaveError = true;
                }

            }


        }
    }
    public async Task DepostFee_Click()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure? You want to Depost");
        if (confirmed)
        {
            int feealloc = Convert.ToInt32(await _IPostingManager.FeeAllocChecking(AccountID, vtype, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Fee"));
            if ((feealloc == 0))
            {
                dtsVoucher objdepost = new dtsVoucher();
                dtDeleteVoucher objdeletevoucher = new dtDeleteVoucher();
                objdeletevoucher.AccountId = AccountID;
                objdeletevoucher.VType = vtype;
                objdeletevoucher.StartDate = StatementFromDate.ToString("MM/dd/yyyy");
                objdeletevoucher.EndDate = StatementEndDate.ToString("MM/dd/yyyy");
                objdeletevoucher.Type = "Fee";
                objdepost.objdepostvoucherTemp = objdeletevoucher;
                HttpResponseMessage msg = await _IPostingManager.DeletePostingVoucher(objdepost);
                if (msg.IsSuccessStatusCode)
                {
                    PopupLoading = false;
                    PopupDeVisible = true;
                    StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
                    StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();
                    GetFeeBalanceAggregate(StudFeeDetails);

                    DtoUserTrack dttrack = new DtoUserTrack();
                    dttrack.UserId = user;
                    dttrack.TableName = "Voucher";
                    dttrack.ActionDate = DateTime.Now;
                    dttrack.ModuleName = "Student";
                    dttrack.Reference = "College Portal";
                    dttrack.Reason = DTAccount.AccountCode + "  DePost Success";

                    HttpResponseMessage msgTrack = await _IClassMaster.AddSaveUserTrack(dttrack);

                }
                else
                {
                    PopupSaveError = true;
                }
            }


        }
    }

    public async Task DepostTrans_Click()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure? You want to Depost");
        if (confirmed)
        {
            int feealloc = Convert.ToInt32(await _IPostingManager.FeeAllocChecking(AccountID, vtype, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Transportation"));
            if ((feealloc == 0))
            {
                dtsVoucher objdepost = new dtsVoucher();
                dtDeleteVoucher objdeletevoucher = new dtDeleteVoucher();
                objdeletevoucher.AccountId = AccountID;
                objdeletevoucher.VType = vtype;
                objdeletevoucher.StartDate = StatementFromDate.ToString("MM/dd/yyyy");
                objdeletevoucher.EndDate = StatementEndDate.ToString("MM/dd/yyyy");
                objdeletevoucher.Type = "Transportation";
                objdepost.objdepostvoucherTemp = objdeletevoucher;
                HttpResponseMessage msg = await _IPostingManager.DeletePostingVoucher(objdepost);
                if (msg.IsSuccessStatusCode)
                {
                    PopupLoading = false;
                    PopupDeVisible = true;
                    StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
                    StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();
                    GetFeeBalanceAggregate(StudFeeDetails);

                    DtoUserTrack dttrack = new DtoUserTrack();
                    dttrack.UserId = user;
                    dttrack.TableName = "Voucher";
                    dttrack.ActionDate = DateTime.Now;
                    dttrack.ModuleName = "Student";
                    dttrack.Reference = "College Portal";
                    dttrack.Reason = DTAccount.AccountCode + "  DePost Success";

                    HttpResponseMessage msgTrack = await _IClassMaster.AddSaveUserTrack(dttrack);


                }
                else
                {
                    PopupSaveError = true;
                }
            }


        }
    }

    public IEditorSettings PriceEditParams = new NumericEditCellParams
        {
            Params = new NumericTextBoxModel<object>() { Min = 0, ShowSpinButton = false, Decimals = 2, Format = "n2", ValidateDecimalOnType = true }
        };
    public async Task AdditionalFeePost(int ID)
    {
        AddFees = (await _IPostingManager.GetAddFees(ID, DTStudentTrans.AcademicYear, BranchID));
        feeexist = Convert.ToInt32(await _IPostingManager.FeePostChecking(AccountID, Addvtype, effect.ToString("MM/dd/yyyy"), effect.ToString("MM/dd/yyyy"), "AdditionalPayment", AddFees.FeeSchedule));

        if (!(feeexist == 0))
        {
            PopupSaveError = true;
        }
        else
        {
            string AY = CmbAccYear.Substring(2, 2);

            Decimal totalvatamount = 0;
            if (AddFees.VatApplicable == true)
            {
                if (AddFees.VatInclusive == true)
                {

                    totalvatamount = ((AddFees.Amount * AddFees.VatPercent) / 105);
                }
                else
                {
                    totalvatamount = ((AddFees.Amount * AddFees.VatPercent) / 100);

                }
            }
            dtsVoucher dts = new dtsVoucher();
            objpostvoucherTemp.Clear();
            dtPostingVoucher objpostvoucher = new dtPostingVoucher();
            objpostvoucher.EffectiveDate = AddFees.DueDate;
            objpostvoucher.VDate = AddFees.DueDate;
            objpostvoucher.DueDate = AddFees.DueDate;
            objpostvoucher.CreatedDate = DateTime.Today;
            objpostvoucher.ModifiedDate = DateTime.Today;
            objpostvoucher.Remark = AddFees.FeeSchedule;
            objpostvoucher.VType = Addvtype;
            objpostvoucher.BranchID = BranchID;
            objpostvoucher.RefNo = "FEE" + AY + DTStudentTrans.AccountId.ToString();
            objpostvoucher.AccountID = DTStudentTrans.AccountId;
            objpostvoucher.AccountName = null;
            objpostvoucher.AccountCode = null;
            objpostvoucher.UserTrackID = AddFees.Priorityno;
            objpostvoucher.CommonNarration = AddFees.Description;
            objpostvoucher.VoucherAgainst = "AdditionalPayment";
            objpostvoucher.PreparedBy = AddFees.Code;
            objpostvoucher.VATAmt = totalvatamount;
            objpostvoucher.VEDAccountID = DTStudentTrans.AccountId;
            objpostvoucher.VECAccountID = AddFees.PostTo;
            objpostvoucher.VEVAccountID = AdvVatId;
            objpostvoucher.TaxCode = AddFees.TAXCode;

            //if (AddFees.VatApplicable == true)
            //{
            //    if (AddFees.VatInclusive == true)
            //    {
            //        objpostvoucher.Amount = AddFees.Amount;
            //    }
            //    else
            //    {
            //        objpostvoucher.Amount = AddFees.Amount + totalvatamount;

            //    }
            //}
            //else
            //{
            objpostvoucher.Amount = AddFees.Amount;

            //}

            objpostvoucher.IsCanceled = Convert.ToBoolean(0);
            objpostvoucher.Posted = Convert.ToBoolean(1);
            objpostvoucher.CreatedUserID = user;
            objpostvoucher.ModifiedUserID = user;
            objpostvoucher.ExchangeRate = 1;
            objpostvoucher.Currency = 1;
            objpostvoucher.RowState = "Insert";

            vID = 0;
            //ventry
            objpostvoucher.VID = vID;
            objpostvoucher.Description = AddFees.Description;
            objpostvoucher.VECAccountID = AddFees.PostTo;
            //if (AddFees.VatApplicable == true)
            //{
            //    if (AddFees.VatInclusive == true)
            //    {
            //        objpostvoucher.VECAmount = AddFees.Amount - totalvatamount;
            //    }
            //    else
            //    {
            //        objpostvoucher.VECAmount = AddFees.Amount;

            //    }
            //}
            //else
            //{
            objpostvoucher.VECAmount = AddFees.Amount;

            //}
            objpostvoucher.VEDAccountID = DTStudentTrans.AccountId;
            objpostvoucher.VEDAmount = AddFees.Amount;
            objpostvoucher.DocSubNo = AddFees.VatPercent.ToString();
            objpostvoucher.SlNo = 1;
            if (AddFees.VatApplicable == true)
            {
                objpostvoucher.VatApplicable = true;
                if (AddFees.VatInclusive == true)
                {
                    objpostvoucher.VatInc = true;
                }
                objpostvoucher.VEVAccountID = AdvVatId;
                objpostvoucher.VEVAmount = totalvatamount;
            }
            objpostvoucherTemp.Add(objpostvoucher);
            dts.objpostvoucherTemp = objpostvoucherTemp.ToList().ToArray();
            HttpResponseMessage response = await _IPostingManager.CreatePostingVoucher(dts);//await Http.PostAsJsonAsync("api/Inventory", dts);


            if (response.IsSuccessStatusCode)
            {
                PopupLoading = false;
                PopupVisible = true;

                StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
                StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();
                GetFeeBalanceAggregate(StudFeeDetails);
            }
            else
            {
                PopupLoading = false;
                PopupSaveError = true;
            }

            StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
            StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();
            GetFeeBalanceAggregate(StudFeeDetails);

            PopupVisible = true;
            await InvokeAsync(StateHasChanged);
        }

    }
    public async Task AdditionalDiscountPost(int ID)
    {
        AddFees = (await _IPostingManager.GetAddFees(ID, DTStudentTrans.AcademicYear, BranchID));
        feeexist = Convert.ToInt32(await _IPostingManager.FeePostChecking(AccountID, Addvtype, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "AdditionalPaymentDiscount", AddFees.FeeSchedule));

        if (!(feeexist == 0))
        {
            PopupSaveError = true;
        }
        else
        {

            string AY = CmbAccYear.Substring(2, 2);

            Decimal totalvatamount = 0;
            if (AddFees.VatApplicable == true)
            {
                if (AddFees.VatInclusive == true)
                {

                    totalvatamount = ((AddFees.Amount * AddFees.VatPercent) / 105);
                }
                else
                {
                    totalvatamount = ((AddFees.Amount * AddFees.VatPercent) / 100);

                }
            }
            dtsVoucher dts = new dtsVoucher();
            objpostvoucherTemp.Clear();
            dtPostingVoucher objpostvoucherdisc = new dtPostingVoucher();
            objpostvoucherdisc.EffectiveDate = AddFees.DueDate;// DateTime.Today;
            objpostvoucherdisc.VDate = AddFees.DueDate;//DateTime.Today;
            objpostvoucherdisc.DueDate = AddFees.DueDate;// DateTime.Today;
            objpostvoucherdisc.CreatedDate = DateTime.Today;
            objpostvoucherdisc.ModifiedDate = DateTime.Today;
            objpostvoucherdisc.Remark = AddFees.FeeSchedule;
            objpostvoucherdisc.VType = Addvtype;
            objpostvoucherdisc.BranchID = BranchID;
            objpostvoucherdisc.DisApplicable = true;
            objpostvoucherdisc.RefNo = DTStudentTrans.DiscountSchedule;
            objpostvoucherdisc.AccountID = DTStudentTrans.AccountId;
            objpostvoucherdisc.CommonNarration = AddFees.Description;
            objpostvoucherdisc.VoucherAgainst = "AdditionalPaymentDiscount";
            objpostvoucherdisc.PreparedBy = AddFees.Code;
            objpostvoucherdisc.VATAmt = 0;
            objpostvoucherdisc.Amount = AddFees.Amount;
            objpostvoucherdisc.IsCanceled = Convert.ToBoolean(0);
            objpostvoucherdisc.Posted = Convert.ToBoolean(1);
            objpostvoucherdisc.CreatedUserID = user;
            objpostvoucherdisc.ModifiedUserID = user;
            objpostvoucherdisc.ExchangeRate = 1;
            objpostvoucherdisc.Currency = 1;
            objpostvoucherdisc.RowState = "Insert";


            objpostvoucherdisc.RowType = "Cr";
            objpostvoucherdisc.Description = AddFees.Description;
            objpostvoucherdisc.AccountID = DTStudentTrans.AccountId;
            objpostvoucherdisc.Credit = AddFees.Amount;
            objpostvoucherdisc.Debit = 0;
            objpostvoucherdisc.TranType = "Sub";
            objpostvoucherdisc.Action = "C";
            objpostvoucherdisc.VisibleonPrint = Convert.ToBoolean(1);
            objpostvoucherdisc.Reconciled = Convert.ToBoolean(0);
            objpostvoucherdisc.Active = Convert.ToBoolean(1);
            objpostvoucherdisc.RowState = "Insert";
            objpostvoucherdisc.VEDAccountID = AddFees.PostTo;
            objpostvoucherdisc.VECAccountID = DTStudentTrans.AccountId;
            objpostvoucherdisc.Reference = "StudentFeeDiscount";

            objpostvoucherTemp.Add(objpostvoucherdisc);

            dts.objpostvoucherTemp = objpostvoucherTemp.ToList().ToArray();
            HttpResponseMessage response = await _IPostingManager.CreatePostingVoucher(dts);//await Http.PostAsJsonAsync("api/Inventory", dts);

            if (response.IsSuccessStatusCode)
            {
                PopupLoading = false;
                PopupVisible = true;

                StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
                StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();
                GetFeeBalanceAggregate(StudFeeDetails);
            }
            else
            {
                PopupLoading = false;
                PopupSaveError = true;
            }

            StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
            StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();
            GetFeeBalanceAggregate(StudFeeDetails);

            PopupVisible = true;
            await InvokeAsync(StateHasChanged);
        }
    }

    public async Task DepostAdmn_Click()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure? You want to Depost");
        if (confirmed)
        {
            int feealloc = Convert.ToInt32(await _IPostingManager.FeeAllocChecking(AccountID, vtype, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Admission"));
            if ((feealloc == 0))
            {
                dtsVoucher objdepost = new dtsVoucher();
                dtDeleteVoucher objdeletevoucher = new dtDeleteVoucher();
                objdeletevoucher.AccountId = AccountID;
                objdeletevoucher.VType = vtype;
                objdeletevoucher.StartDate = StatementFromDate.ToString("MM/dd/yyyy");
                objdeletevoucher.EndDate = StatementEndDate.ToString("MM/dd/yyyy");
                objdeletevoucher.Type = "Admission";
                objdepost.objdepostvoucherTemp = objdeletevoucher;
                HttpResponseMessage msg = await _IPostingManager.DeletePostingVoucher(objdepost);
                if (msg.IsSuccessStatusCode)
                {
                    PopupLoading = false;
                    PopupDeVisible = true;
                    StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
                    StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();
                    GetFeeBalanceAggregate(StudFeeDetails);
                    DtoUserTrack dttrack = new DtoUserTrack();
                    dttrack.UserId = user;
                    dttrack.TableName = "Voucher";
                    dttrack.ActionDate = DateTime.Now;
                    dttrack.ModuleName = "Student";
                    dttrack.Reference = "College Portal";
                    dttrack.Reason = DTAccount.AccountCode + " DePost Success";

                    HttpResponseMessage msgTrack = await _IClassMaster.AddSaveUserTrack(dttrack);
                }
                else
                {
                    PopupSaveError = true;
                }
            }

        }
    }
    public string AddMode = "";
    public string fdate;
    public async Task New_Click()

    {
        AddMode = "Add";
        //Check = true;
        btnSave = false;
        btnEdit = true;
        edit = true;
        FeeDetails.Activity = null;

        FeeDetails.Amount = 0.00M;

        FeeDetails.Repeat = null;
        FeeDetails.FromDate = DateTime.Now;
    }
    public async Task EditShow(int ID)
    {
        Idadd = ID;
        FeeDetails = await StudentMasterService.GetAdditionalDiscountbyid(AccountID, ID);
        btnSave = false;
        btnEdit = false;
        edit = false;
        showedite = true;
    }
    public async Task EditShows(int ID)
    {
        Idadd = ID;
        FeeDetails = await StudentMasterService.GetAdditionalPaymentbyid(AccountID, ID);
        btnSave = false;
        btnEdit = false;
        edit = false;
        showedite = true;
    }
    //else
    //{
    //    Check = false;
    //}

    //public async Task Edit_Click()
    //{
    //    AddMode = "Edit";
    //    if (args.Data.Id != 0)
    //    {
    //        AdditionalFeeID = args.Data.Id;
    //    }
    //}

    public async Task Save_Click()
    {
        await init_SaveAdditionalFee();
    }

    public int Idadd;

    public async Task init_SaveAdditionalFee()
    {
        SchoolAdditionalPayment objAdd = new SchoolAdditionalPayment();

        if (AddMode == "Add")
        {
            //
            objAdd.AccountId = AccountID;
            objAdd.Activity = FeeDetails.Activity;
            objAdd.FromDate = FeeDetails.FromDate;
            //objAdd.ToDate = FeeDetails.ToDate;
            objAdd.Amount = FeeDetails.Amount;
            //objAdd.Posted = FeeDetails.Posted;
            objAdd.PostTo = FeeDetails.PostTo;
            //objAdd.Remarks = FeeDetails.Remarks;
            objAdd.Repeat = 1;
            //objAdd.VoucherId = FeeDetails.VoucherId;
            objAdd.Type = FeeDetails.Type;
            //objAdd.SupEndDate = FeeDetails.SupEndDate;
            HttpResponseMessage response = await _IPostingManager.SaveAdditionalFee(objAdd);
            string NewID = response.Content.ReadAsStringAsync().Result;
            AdditionalFeeID = Convert.ToInt32(NewID);
            if (response.IsSuccessStatusCode)
            {
                IsOpenAdd = true;
                StudAdditionalDiscount = (await StudentMasterService.GetAdditionalDiscount(AccountID)).ToList();
                StudAdditionalPayment = (await StudentMasterService.GetAdditionalPayment(AccountID)).ToList();
                StudStatement = (await StudentMasterService.GetStatement(StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), AccountID, BranchID)).ToList();
                btnSave = true;
                btnEdit = true;

                FeeDetails.Activity = null;

                FeeDetails.Amount = 0.00M;

                FeeDetails.Repeat = null;
                edit = false;
                FeeDetails.FromDate = DateTime.Now;
            }
            else
            {
                IsOpenUpdateFailed = true;
            }
            await InvokeAsync(StateHasChanged);
        }
        else
        {

            objAdd.AccountId = AccountID;
            objAdd.Id = Idadd;
            objAdd.Amount = FeeDetails.Amount;
            HttpResponseMessage response = await _IPostingManager.UpdateAdditionalFee(objAdd);
            if (response.IsSuccessStatusCode)
            {
                IsOpen = true;
                StudAdditionalDiscount = (await StudentMasterService.GetAdditionalDiscount(AccountID)).ToList();
                StudAdditionalPayment = (await StudentMasterService.GetAdditionalPayment(AccountID)).ToList();
                StudStatement = (await StudentMasterService.GetStatement(StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), AccountID, BranchID)).ToList();
                edit = false;
                FeeDetails.FromDate = DateTime.Now;
                FeeDetails.Activity = null;

                FeeDetails.Amount = 0.00M;

                FeeDetails.Repeat = null;

            }
            else
            {
                IsOpenUpdateFailed = true;
            }
        }
    }
    //public async Task FeeSchedulePost_Click()
    //{
    //    if (DTStudentTrans.FeeSchedule == null )
    //    {
    //        PopupFeeError = true;
    //    }
    //    else   if (DTStudentTrans.FeeSchedule == "" )
    //    {
    //        PopupFeeError = true;
    //    }
    //    else   if (DTStudentTrans.FeeSchedule == "None" )
    //    {
    //        PopupFeeError = true;
    //    }
    //    else
    //    {

    //        int monthcount=0;
    //        decimal totalscheduleamount = 0;
    //        int discschedule = 0;
    //        foreach (dtFeeSchedule dt in FeeSchedule)
    //        {
    //            if (dt.DiscountPossible == true )
    //            {
    //                totalscheduleamount = totalscheduleamount + dt.Amount;
    //                if (dt.Category == "Recurring")
    //                {

    //                    monthcount = monthcount + 1;
    //                }
    //            }
    //        }

    //        feeexist = Convert.ToInt32(await _IPostingManager.FeePostChecking(AccountID, vtype, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy")));
    //        if (!(feeexist == 0))
    //        {
    //            PopupSaveError = true;
    //        }

    //        else
    //        {
    //            PopupLoading = true;
    //            FeeSchedule = (await _IPostingManager.GetFeeSchedule(DTStudentTrans.AcademicYear, BranchID, DTStudentTrans.FeeSchedule, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"))).ToList();
    //            DiscountScheduleName = (await _IPostingManager.GetDiscountSchedule(BranchID, DTStudentTrans.DiscountSchedule)).ToList();

    //            foreach (dtDiscountSchedule dtd in DiscountScheduleName)
    //            {
    //                discschedule = dtd.Discount;
    //            }

    //            dtsVoucher dts = new dtsVoucher();


    //            //DtTransactions = objsales.ToList().ToArray();
    //            //try
    //            //{

    //            foreach (dtFeeSchedule dt in FeeSchedule)
    //            {
    //                Decimal totalvatamount = 0;
    //                Decimal DiscountAmount = 0;
    //                if(dt.VatApplicable==true)
    //                {
    //                    if (dt.VatInclusive==true)
    //                    {

    //                        totalvatamount = ((dt.Amount * dt.VatPercent) / 105);
    //                    }
    //                    else
    //                    {
    //                        totalvatamount = ((dt.Amount * dt.VatPercent) / 100);

    //                    }
    //                }

    //                dtVoucher objVoucher = new dtVoucher();
    //                objVoucher.EffectiveDate = dt.DueDate;
    //                objVoucher.VDate = dt.DueDate;
    //                objVoucher.DueDate = dt.DueDate;
    //                objVoucher.CreatedDate = DateTime.Today;
    //                objVoucher.ModifiedDate = DateTime.Today;
    //                objVoucher.Remark = DTStudentTrans.FeeSchedule;
    //                objVoucher.VType = vtype;
    //                objVoucher.BranchID = BranchID;
    //                objVoucher.RefNo = "FEE"+DTStudentTrans.AccountId.ToString();
    //                objVoucher.AccountID = DTStudentTrans.AccountId;
    //                objVoucher.AccountName = null;
    //                objVoucher.AccountCode = null;
    //                objVoucher.CommonNarration = dt.Description;
    //                objVoucher.VoucherAgainst = "FEE";
    //                objVoucher.PreparedBy = dt.Code;
    //                objVoucher.VATAmt =totalvatamount;

    //                if(dt.VatApplicable==true)
    //                {
    //                    if (dt.VatInclusive==true)
    //                    {
    //                        objVoucher.Amount = dt.Amount;
    //                    }
    //                    else
    //                    {
    //                        objVoucher.Amount = dt.Amount + totalvatamount;

    //                    }
    //                }
    //                else
    //                {
    //                    objVoucher.Amount = dt.Amount;

    //                }
    //                if (DTStudentTrans.FeeDiscount==true)
    //                {
    //                    DiscountAmount = (dt.Amount*discschedule) / 100;
    //                    await VoucherUpdateForDiscount(DTStudentTrans.AccountId, dt.DueDate, vtype, DiscountAmount, dt.Description,  DTStudentTrans.DiscountSchedule, dt.Discount);


    //                }
    //                objVoucher.IsCanceled = Convert.ToBoolean(0);
    //                objVoucher.Posted = Convert.ToBoolean(1);
    //                objVoucher.CreatedUserID = user;
    //                objVoucher.ModifiedUserID = user;
    //                objVoucher.ExchangeRate = 1;
    //                objVoucher.Currency = 1;
    //                objVoucher.RowState = "Insert";

    //                //vID = NewId;
    //                vID = 0;
    //                dts.voucher = objVoucher;
    //                objvTemp.Clear();
    //                dtVoucherEntry objVEntCr = new dtVoucherEntry();
    //                objVEntCr.VID = vID;
    //                objVEntCr.RowType = "Cr";
    //                objVEntCr.Description = dt.Description;
    //                objVEntCr.AccountID = dt.PostTo;
    //                //objVEntCr.Credit = dt.Amount;
    //                if(dt.VatApplicable==true)
    //                {
    //                    if (dt.VatInclusive==true)
    //                    {
    //                        objVEntCr.Credit = dt.Amount-totalvatamount;
    //                    }
    //                    else
    //                    {
    //                        objVEntCr.Credit = dt.Amount;

    //                    }
    //                }
    //                else
    //                {
    //                    objVEntCr.Credit = dt.Amount;

    //                }
    //                objVEntCr.Debit = 0;
    //                objVEntCr.TranType = "Sub";
    //                objVEntCr.Action = "C";
    //                objVEntCr.VisibleonPrint = Convert.ToBoolean(1);
    //                objVEntCr.Reconciled = Convert.ToBoolean(0);
    //                objVEntCr.Active = Convert.ToBoolean(1);
    //                objVEntCr.RowState = "Insert";

    //                objVEntCr.SlNo = 1;
    //                dts.voucherentry = objVEntCr;
    //                objvTemp.Add(objVEntCr);

    //                dtVoucherEntry objVEntDr = new dtVoucherEntry();
    //                objVEntDr.VID = vID;
    //                objVEntDr.RowType = "Dr";
    //                objVEntDr.Description = dt.Description;
    //                objVEntDr.AccountID = DTStudentTrans.AccountId;
    //                objVEntDr.Credit = 0;
    //                objVEntDr.Debit = dt.Amount;
    //                objVEntDr.TranType = "Main";
    //                objVEntDr.Action = "C";
    //                objVEntDr.VisibleonPrint = Convert.ToBoolean(1);
    //                objVEntDr.Reconciled = Convert.ToBoolean(0);
    //                objVEntDr.Active = Convert.ToBoolean(1);
    //                objVEntDr.RowState = "Insert";

    //                objVEntDr.SlNo = 1;
    //                dts.voucherentry = objVEntDr;
    //                //dtVoucherEntry.add

    //                objvTemp.Add(objVEntDr);
    //                 if(dt.VatApplicable==true)
    //                {
    //                dtVoucherEntry objVEntVat = new dtVoucherEntry();
    //                objVEntVat.VID = vID;
    //                objVEntVat.RowType = "Cr";
    //                objVEntVat.Description = dt.Description;
    //                objVEntVat.AccountID = AdvVatId;
    //                objVEntVat.Credit = totalvatamount;
    //                objVEntVat.Debit = 0;
    //                objVEntVat.TranType = "Normal";
    //                 objVEntVat.Reference = "Vat";
    //                objVEntVat.Action = "C";
    //                objVEntVat.VisibleonPrint = Convert.ToBoolean(1);
    //                objVEntVat.Reconciled = Convert.ToBoolean(0);
    //                objVEntVat.Active = Convert.ToBoolean(1);
    //                objVEntVat.RowState = "Insert";

    //                objVEntVat.SlNo = 1;
    //                dts.voucherentry = objVEntVat;
    //                //dtVoucherEntry.add

    //                objvTemp.Add(objVEntVat);
    //                }


    //                dts.objvtemp = objvTemp.ToList().ToArray();

    //              //await _IPostingManager.CreatePostingVoucher(dts);//await Http.PostAsJsonAsync("api/Inventory", dts);

    //                //int slno = 1;

    //                //await GetUniqueAccounts();

    //            HttpResponseMessage response =  await _IPostingManager.CreatePostingVoucher(dts);//await Http.PostAsJsonAsync("api/Inventory", dts);

    //            }
    //            //dts.DocType = objVtypeTran.DocumentType;
    //             await LoadData();
    //            //if (response.IsSuccessStatusCode)
    //            //{
    //            //    PopupLoading = false;
    //                PopupVisible = true;
    //                //await Invoice_Click();
    //            //}
    //            //else
    //            //{
    //            //    PopupLoading = false;
    //            //    PopupSaveError = true;
    //            //}
    //        }
    //    }
    //    //}
    //}

    //public  async Task VoucherUpdateForDiscount(int StudeAct, DateTime DiscDate, int vtype,Decimal DisAmount,string  Description,string DiscountSchedule, int Discount)
    //{
    //                dtsVoucher dtsd = new dtsVoucher();
    //                dtVoucher objVoucherDisc = new dtVoucher();
    //                objVoucherDisc.EffectiveDate = DiscDate;// DateTime.Today;
    //                objVoucherDisc.VDate = DiscDate;//DateTime.Today;
    //                objVoucherDisc.DueDate = DiscDate;// DateTime.Today;
    //                objVoucherDisc.CreatedDate = DateTime.Today;
    //                objVoucherDisc.ModifiedDate = DateTime.Today;
    //                objVoucherDisc.Remark = DTStudentTrans.FeeSchedule;
    //                objVoucherDisc.VType = vtype;
    //                objVoucherDisc.BranchID = BranchID;
    //                objVoucherDisc.RefNo = "FEED"+DTStudentTrans.AccountId.ToString();
    //                objVoucherDisc.AccountID = StudeAct;
    //                objVoucherDisc.CommonNarration = Description+" Discount";
    //                objVoucherDisc.VoucherAgainst = "FEE Discount";
    //                objVoucherDisc.PreparedBy = DiscountSchedule;
    //                objVoucherDisc.VATAmt =0;
    //                objVoucherDisc.Amount = DisAmount;
    //                objVoucherDisc.IsCanceled = Convert.ToBoolean(0);
    //                objVoucherDisc.Posted = Convert.ToBoolean(1);
    //                objVoucherDisc.CreatedUserID = user;
    //                objVoucherDisc.ModifiedUserID = user;
    //                objVoucherDisc.ExchangeRate = 1;
    //                objVoucherDisc.Currency = 1;
    //                objVoucherDisc.RowState = "Insert";

    //                //vID = NewId;
    //                vID = 0;
    //                dtsd.voucher = objVoucherDisc;
    //                objvTemp.Clear();
    //                dtVoucherEntry objVEntCrDisc = new dtVoucherEntry();
    //                objVEntCrDisc.VID = vID;
    //                objVEntCrDisc.RowType = "Cr";
    //                objVEntCrDisc.Description = Description+" Discount";
    //                objVEntCrDisc.AccountID = StudeAct;
    //                objVEntCrDisc.Credit = DisAmount;
    //                objVEntCrDisc.Debit = 0;
    //                objVEntCrDisc.TranType = "Sub";
    //                objVEntCrDisc.Action = "C";
    //                objVEntCrDisc.VisibleonPrint = Convert.ToBoolean(1);
    //                objVEntCrDisc.Reconciled = Convert.ToBoolean(0);
    //                objVEntCrDisc.Active = Convert.ToBoolean(1);
    //                objVEntCrDisc.RowState = "Insert";

    //                objVEntCrDisc.SlNo = 1;
    //                dtsd.voucherentry = objVEntCrDisc;
    //                objvTemp.Add(objVEntCrDisc);
    //                dtVoucherEntry objVEntDrDisc = new dtVoucherEntry();
    //                objVEntDrDisc.VID = vID;
    //                objVEntDrDisc.RowType = "Dr";
    //                objVEntDrDisc.Description = Description+" Discount";
    //                objVEntDrDisc.AccountID = Discount;
    //                objVEntDrDisc.Credit = 0;
    //                objVEntDrDisc.Debit = DisAmount;
    //                objVEntDrDisc.TranType = "Main";
    //                objVEntDrDisc.Action = "C";
    //                objVEntDrDisc.VisibleonPrint = Convert.ToBoolean(1);
    //                objVEntDrDisc.Reconciled = Convert.ToBoolean(0);
    //                objVEntDrDisc.Active = Convert.ToBoolean(1);
    //                objVEntDrDisc.RowState = "Insert";

    //                objVEntDrDisc.SlNo = 1;
    //                dtsd.voucherentry = objVEntDrDisc;
    //                //dtVoucherEntry.add

    //                objvTemp.Add(objVEntDrDisc);


    //                dtsd.objvtemp = objvTemp.ToList().ToArray();

    //              await _IPostingManager.CreatePostingVoucher(dtsd);//await Http.PostAsJsonAsync("api/Inventory", dts);


    //}
    public async Task gridFee()
    {
    }
    public async Task Go_Click()
    {
        StudStatement = (await StudentMasterService.GetStatement(StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), AccountID, BranchID)).ToList();
        //objStudentStatement = StudStatement.Where(st => st.Debit.to);
        StudStatement = StudStatement.OrderBy(m => m.EffectiveDate).ThenByDescending(n => n.Debit).ThenByDescending(x => x.Credit).ToList();

    }

    //FeeDiscount
    public async Task FeeDiscountSchedulePost_Click()
    {
        string Criteria = "FeeDiscountSchedulePost";


        var response = await _IPostingManager.Postallindividual(AccountID, BranchID, Criteria, CmbAccYear, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"));
        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadFromJsonAsync<dtError>();
            //string msg= JsonConvert.DeserializeObject<string>(jsonString);

            if (jsonString.Error == null)
                ImportMessage = "Post Success";
            else
                ImportMessage = jsonString.Error;
        }
        //if (DTStudentTrans.FeeSchedule == null)
        //{
        //    PopupFeeError = true;
        //}
        //else if (DTStudentTrans.FeeSchedule == "")
        //{
        //    PopupFeeError = true;
        //}
        //else if (DTStudentTrans.FeeSchedule == "None")
        //{
        //    PopupFeeError = true;
        //}
        //else
        //{

        //    int monthcount = 0;
        //    decimal totalscheduleamount = 0;
        //    int discschedule = 0;
        //    int discid = 0;
        //    string discdescription = "";
        //    foreach (dtFeeSchedule dt in FeeSchedule)
        //    {
        //        if (dt.DiscountPossible == true)
        //        {
        //            totalscheduleamount = totalscheduleamount + dt.Amount;

        //        }
        //    }

        //    feeexist = Convert.ToInt32(await _IPostingManager.FeePostChecking(AccountID, vtype, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "FEE", Con));
        //    if (!(feeexist == 0))
        //    {
        //        PopupSaveError = true;
        //    }

        //    else
        //    {
        //        PopupLoading = true;
        //        FeeSchedule = (await _IPostingManager.GetFeeSchedule(DTStudentTrans.AcademicYear, BranchID, DTStudentTrans.FeeSchedule, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Fee", Con)).ToList();
        //        DiscountScheduleName = (await _IPostingManager.GetDiscountSchedule(BranchID, DTStudentTrans.DiscountSchedule, Con)).ToList();

        //        string AY = CmbAccYear.Substring(2, 2);
        //        foreach (dtDiscountSchedule dtd in DiscountScheduleName)
        //        {
        //            discschedule = dtd.Discount;
        //            discid = dtd.PostTo;
        //            discdescription = dtd.Description;
        //        }

        //        dtsVoucher dts = new dtsVoucher();
        //        objpostvoucherTemp.Clear();

        //        foreach (dtFeeSchedule dt in FeeSchedule)
        //        {
        //            Decimal totalvatamount = 0;
        //            Decimal DiscountAmount = 0;
        //            if (dt.VatApplicable == true)
        //            {
        //                if (dt.VatInclusive == true)
        //                {

        //                    totalvatamount = ((dt.Amount * dt.VatPercent) / 105);
        //                }
        //                else
        //                {
        //                    totalvatamount = ((dt.Amount * dt.VatPercent) / 100);

        //                }
        //            }

        //            dtPostingVoucher objpostvoucher = new dtPostingVoucher();
        //            objpostvoucher.EffectiveDate = dt.DueDate;
        //            objpostvoucher.VDate = dt.DueDate;
        //            objpostvoucher.DueDate = dt.DueDate;
        //            objpostvoucher.CreatedDate = DateTime.Today;
        //            objpostvoucher.ModifiedDate = DateTime.Today;
        //            objpostvoucher.Remark = DTStudentTrans.FeeSchedule;
        //            objpostvoucher.VType = vtype;
        //            objpostvoucher.BranchID = BranchID;
        //            objpostvoucher.RefNo = "FEE" + AY + DTStudentTrans.AccountId.ToString();
        //            objpostvoucher.AccountID = DTStudentTrans.AccountId;
        //            objpostvoucher.AccountName = null;
        //            objpostvoucher.AccountCode = null;
        //            objpostvoucher.UserTrackID = dt.Priorityno;
        //            objpostvoucher.CommonNarration = dt.Description;
        //            objpostvoucher.VoucherAgainst = "FEE";
        //            objpostvoucher.PreparedBy = dt.Code;
        //            objpostvoucher.VATAmt = totalvatamount;
        //            objpostvoucher.VEDAccountID = DTStudentTrans.AccountId;
        //            objpostvoucher.VECAccountID = dt.PostTo;
        //            objpostvoucher.VEVAccountID = AdvVatId;
        //            objpostvoucher.TaxCode = dt.TAXCode;

        //            if (dt.VatApplicable == true)
        //            {
        //                if (dt.VatInclusive == true)
        //                {
        //                    objpostvoucher.Amount = dt.Amount;
        //                }
        //                else
        //                {
        //                    objpostvoucher.Amount = dt.Amount + totalvatamount;

        //                }
        //            }
        //            else
        //            {
        //                objpostvoucher.Amount = dt.Amount;
        //            }

        //            objpostvoucher.IsCanceled = Convert.ToBoolean(0);
        //            objpostvoucher.Posted = Convert.ToBoolean(1);
        //            objpostvoucher.CreatedUserID = user;
        //            objpostvoucher.ModifiedUserID = user;
        //            objpostvoucher.ExchangeRate = 1;
        //            objpostvoucher.Currency = 1;
        //            objpostvoucher.RowState = "Insert";

        //            vID = 0;
        //            //ventry
        //            objpostvoucher.VID = vID;
        //            objpostvoucher.Description = dt.Description;
        //            objpostvoucher.VECAccountID = dt.PostTo;
        //            if (dt.VatApplicable == true)
        //            {
        //                if (dt.VatInclusive == true)
        //                {
        //                    objpostvoucher.VECAmount = dt.Amount - totalvatamount;
        //                }
        //                else
        //                {
        //                    objpostvoucher.VECAmount = dt.Amount;

        //                }
        //            }
        //            else
        //            {
        //                objpostvoucher.VECAmount = dt.Amount;

        //            }
        //            objpostvoucher.VEDAccountID = DTStudentTrans.AccountId;
        //            objpostvoucher.VEDAmount = dt.Amount;
        //            objpostvoucher.DocSubNo = dt.VatPercent.ToString();
        //            objpostvoucher.SlNo = 1;
        //            if (dt.VatApplicable == true)
        //            {
        //                objpostvoucher.VatApplicable = true;
        //                if (dt.VatInclusive == true)
        //                {
        //                    objpostvoucher.VatInc = true;
        //                }
        //                objpostvoucher.VEVAccountID = AdvVatId;
        //                objpostvoucher.VEVAmount = totalvatamount;
        //            }
        //            //objpostvoucherTemp.Add(objpostvoucher);

        //            if (DTStudentTrans.FeeDiscount == true && dt.DiscountPossible == true)
        //            {
        //                DiscountAmount = (dt.Amount * discschedule) / 100;
        //                await VoucherUpdateForDiscount(DTStudentTrans.AccountId, dt.DueDate, vtype, DiscountAmount, discdescription, DTStudentTrans.DiscountSchedule, discid);
        //            }
        //            //await _IPostingManager.CreatePostingVoucher(dts);//await Http.PostAsJsonAsync("api/Inventory", dts);

        //            //int slno = 1;

        //            //await GetUniqueAccounts();
        //        }
        //        dts.objpostvoucherTemp = objpostvoucherTemp.ToList().ToArray();
        //        HttpResponseMessage response = await _IPostingManager.CreatePostingVoucher(dts, Con);//await Http.PostAsJsonAsync("api/Inventory", dts);

        //        if (response.IsSuccessStatusCode)
        //        {
        //            PopupLoading = false;
        //            PopupVisible = true;
        //            StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear, Con));
        //            StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear, Con)).ToList();
        //            GetFeeBalanceAggregate(StudFeeDetails);


        //        }
        //        else
        //        {
        //            PopupLoading = false;
        //            PopupSaveError = true;
        //        }
        //    }
        //}
        //}
    }
    public async Task FeeDiscountSchedulePost_ClickDiscount1Post()
    {
        string Criteria = "Discount1Post";


        var response = await _IPostingManager.Postallindividual(AccountID, BranchID, Criteria, CmbAccYear, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"));
        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadFromJsonAsync<dtError>();
            //string msg= JsonConvert.DeserializeObject<string>(jsonString);

            if (jsonString.Error == null)
            {
                ImportMessage2 = "Post Success";

                PopupDeVisibletrue = true;
                StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
                StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();

                GetFeeBalanceAggregate(StudFeeDetails);
                StudStatement = (await StudentMasterService.GetStatement(StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), AccountID, BranchID)).ToList();

                DtoUserTrack dttrack = new DtoUserTrack();
                dttrack.UserId = user;
                dttrack.TableName = "Voucher";
                dttrack.ActionDate = DateTime.Now;
                dttrack.ModuleName = "Student";
                dttrack.Reference = "College Portal";
                dttrack.Reason = DTAccount.AccountCode + " Post Success";

                HttpResponseMessage msgTrack = await _IClassMaster.AddSaveUserTrack(dttrack);
            }
            else
            {
                ImportMessage2 = jsonString.Error;

                PopupDeVisibletrue = true;

            }
            //ImportMessage2 = jsonString.Error;
        }






    }
    public async Task FeeDiscountSchedulePost_ClickDiscount2Post()
    {
        string Criteria = "Discount2Post";


        var response = await _IPostingManager.Postallindividual(AccountID, BranchID, Criteria, CmbAccYear, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"));
        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadFromJsonAsync<dtError>();
            //string msg= JsonConvert.DeserializeObject<string>(jsonString);

            if (jsonString.Error == null)
            {
                ImportMessage2 = "Post Success";

                PopupDeVisibletrue = true;
                StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
                StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();
                StudStatement = (await StudentMasterService.GetStatement(StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), AccountID, BranchID)).ToList();

                GetFeeBalanceAggregate(StudFeeDetails);
                DtoUserTrack dttrack = new DtoUserTrack();
                dttrack.UserId = user;
                dttrack.TableName = "Voucher";
                dttrack.ActionDate = DateTime.Now;
                dttrack.ModuleName = "Student";
                dttrack.Reference = "College Portal";
                dttrack.Reason = DTAccount.AccountCode + "  Post Success";

                HttpResponseMessage msgTrack = await _IClassMaster.AddSaveUserTrack(dttrack);
            }
            else
            {
                ImportMessage2 = jsonString.Error;

                PopupDeVisibletrue = true;

            }
            //ImportMessage2 = jsonString.Error;
        }






    }
    public async Task FeeDiscountSchedulePost_ClickDiscount3Post()
    {
        string Criteria = "Discount3Post";


        var response = await _IPostingManager.Postallindividual(AccountID, BranchID, Criteria, CmbAccYear, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"));
        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadFromJsonAsync<dtError>();
            //string msg= JsonConvert.DeserializeObject<string>(jsonString);

            if (jsonString.Error == null)
            {
                ImportMessage2 = "Post Success";

                PopupDeVisibletrue = true;
                StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
                StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();
                GetFeeBalanceAggregate(StudFeeDetails);
                StudStatement = (await StudentMasterService.GetStatement(StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), AccountID, BranchID)).ToList();

                DtoUserTrack dttrack = new DtoUserTrack();

                dttrack.UserId = user;
                dttrack.TableName = "Voucher";
                dttrack.ActionDate = DateTime.Now;
                dttrack.ModuleName = "Student";
                dttrack.Reference = "College Portal";
                dttrack.Reason = DTAccount.AccountCode + "  Post Success";

                HttpResponseMessage msgTrack = await _IClassMaster.AddSaveUserTrack(dttrack);

            }
            else
            {
                ImportMessage2 = jsonString.Error;

                PopupDeVisibletrue = true;

            }
            //ImportMessage2 = jsonString.Error;
        }






    }



    //public async Task DepostFeeDiscount_Click()
    //{
    //    bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure? You want to Depost");
    //    if (confirmed)
    //    {
    //        int feealloc = Convert.ToInt32(await _IPostingManager.FeeAllocChecking(AccountID, vtype, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Fee", Con));
    //        if ((feealloc == 0))
    //        {
    //            dtsVoucher objdepost = new dtsVoucher();
    //            dtDeleteVoucher objdeletevoucher = new dtDeleteVoucher();
    //            objdeletevoucher.AccountId = AccountID;
    //            objdeletevoucher.VType = vtype;
    //            objdeletevoucher.StartDate = StatementFromDate.ToString("MM/dd/yyyy");
    //            objdeletevoucher.EndDate = StatementEndDate.ToString("MM/dd/yyyy");
    //            objdeletevoucher.Type = "FeeDiscount";
    //            objdeletevoucher.Discount = DTStudentTrans.DiscountSchedule;
    //            objdepost.objdepostvoucherTemp = objdeletevoucher;
    //            HttpResponseMessage msg = await _IPostingManager.DeletePostingVoucher(objdepost, Con);
    //            if (msg.IsSuccessStatusCode)
    //            {
    //                PopupLoading = false;
    //                PopupDeVisible = true;
    //                StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear, Con));
    //                StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear, Con)).ToList();
    //                GetFeeBalanceAggregate(StudFeeDetails);


    //            }

    //        }

    //        else
    //        {
    //            PopupSaveError = true;
    //        }
    //    }
    //}


    //
    //TranDiscount

    public async Task TranDiscountPost_Click()
    {
        string Criteria = "TranDiscountPost";


        var response = await _IPostingManager.Postallindividual(AccountID, BranchID, Criteria, CmbAccYear, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"));
        if (response.IsSuccessStatusCode)
        {
            var jsonString = await response.Content.ReadFromJsonAsync<dtError>();
            //string msg= JsonConvert.DeserializeObject<string>(jsonString);

            if (jsonString.Error == null)
            {
                ImportMessage2 = "Post Success";

                PopupDeVisibletrue = true;
                StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
                StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();
                GetFeeBalanceAggregate(StudFeeDetails);
                StudStatement = (await StudentMasterService.GetStatement(StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), AccountID, BranchID)).ToList();

            }
            else
            {
                ImportMessage2 = jsonString.Error;

                PopupDeVisibletrue = true;

            }
            //ImportMessage2 = jsonString.Error;
        }
        //if (DTStudentTrans.TransSchedule == null)
        //{
        //    PopupFeeError = true;
        //}
        //else if (DTStudentTrans.TransSchedule == "")
        //{
        //    PopupFeeError = true;
        //}
        //else if (DTStudentTrans.TransSchedule == "None")
        //{
        //    PopupFeeError = true;
        //}
        //else
        //{
        //    decimal totalscheduleamount = 0;
        //    int discschedule = 0;
        //    foreach (dtFeeSchedule dt in FeeSchedule)
        //    {
        //        if (dt.DiscountPossible == true)
        //        {
        //            totalscheduleamount = totalscheduleamount + dt.Amount;

        //        }
        //    }

        //    feeexist = Convert.ToInt32(await _IPostingManager.FeePostChecking(AccountID, vtype, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Transportation", Con));
        //    if (!(feeexist == 0))
        //    {
        //        PopupSaveError = true;
        //    }

        //    else
        //    {
        //        PopupLoading = true;
        //        FeeSchedule = (await _IPostingManager.GetFeeSchedule(DTStudentTrans.AcademicYear, BranchID, DTStudentTrans.TransSchedule, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Fee", Con)).ToList();
        //        DiscountScheduleName = (await _IPostingManager.GetDiscountSchedule(BranchID, DTStudentTrans.TranDiscountSchedule, Con)).ToList();

        //        string AY = CmbAccYear.Substring(2, 2);
        //        foreach (dtDiscountSchedule dtd in DiscountScheduleName)
        //        {
        //            discschedule = dtd.Discount;
        //        }

        //        dtsVoucher dts = new dtsVoucher();
        //        objpostvoucherTemp.Clear();

        //        foreach (dtFeeSchedule dt in FeeSchedule)
        //        {
        //            Decimal totalvatamount = 0;
        //            Decimal DiscountAmount = 0;
        //            if (dt.VatApplicable == true)
        //            {
        //                if (dt.VatInclusive == true)
        //                {

        //                    totalvatamount = ((dt.Amount * dt.VatPercent) / 105);
        //                }
        //                else
        //                {
        //                    totalvatamount = ((dt.Amount * dt.VatPercent) / 100);

        //                }
        //            }

        //            dtPostingVoucher objpostvoucher = new dtPostingVoucher();
        //            objpostvoucher.EffectiveDate = dt.DueDate;
        //            objpostvoucher.VDate = dt.DueDate;
        //            objpostvoucher.DueDate = dt.DueDate;
        //            objpostvoucher.CreatedDate = DateTime.Today;
        //            objpostvoucher.ModifiedDate = DateTime.Today;
        //            objpostvoucher.Remark = DTStudentTrans.TransSchedule;
        //            objpostvoucher.VType = vtype;
        //            objpostvoucher.BranchID = BranchID;
        //            objpostvoucher.RefNo = "FEE" + AY + DTStudentTrans.AccountId.ToString();
        //            objpostvoucher.AccountID = DTStudentTrans.AccountId;
        //            objpostvoucher.AccountName = null;
        //            objpostvoucher.AccountCode = null;
        //            objpostvoucher.UserTrackID = dt.Priorityno;
        //            objpostvoucher.CommonNarration = dt.Description;
        //            objpostvoucher.VoucherAgainst = "Transportation";
        //            objpostvoucher.PreparedBy = dt.Code;
        //            objpostvoucher.VATAmt = totalvatamount;
        //            objpostvoucher.VEDAccountID = DTStudentTrans.AccountId;
        //            objpostvoucher.VECAccountID = dt.PostTo;
        //            objpostvoucher.VEVAccountID = AdvVatId;
        //            objpostvoucher.TaxCode = dt.TAXCode;

        //            if (dt.VatApplicable == true)
        //            {
        //                if (dt.VatInclusive == true)
        //                {
        //                    objpostvoucher.Amount = dt.Amount;
        //                }
        //                else
        //                {
        //                    objpostvoucher.Amount = dt.Amount + totalvatamount;

        //                }
        //            }
        //            else
        //            {
        //                objpostvoucher.Amount = dt.Amount;

        //            }

        //            objpostvoucher.IsCanceled = Convert.ToBoolean(0);
        //            objpostvoucher.Posted = Convert.ToBoolean(1);
        //            objpostvoucher.CreatedUserID = user;
        //            objpostvoucher.ModifiedUserID = user;
        //            objpostvoucher.ExchangeRate = 1;
        //            objpostvoucher.Currency = 1;
        //            objpostvoucher.RowState = "Insert";

        //            vID = 0;
        //            //ventry
        //            objpostvoucher.VID = vID;
        //            objpostvoucher.Description = dt.Description;
        //            objpostvoucher.VECAccountID = dt.PostTo;
        //            if (dt.VatApplicable == true)
        //            {
        //                if (dt.VatInclusive == true)
        //                {
        //                    objpostvoucher.VECAmount = dt.Amount - totalvatamount;
        //                }
        //                else
        //                {
        //                    objpostvoucher.VECAmount = dt.Amount;

        //                }
        //            }
        //            else
        //            {
        //                objpostvoucher.VECAmount = dt.Amount;

        //            }
        //            objpostvoucher.VEDAccountID = DTStudentTrans.AccountId;
        //            objpostvoucher.VEDAmount = dt.Amount;
        //            objpostvoucher.DocSubNo = dt.VatPercent.ToString();
        //            objpostvoucher.SlNo = 1;
        //            if (dt.VatApplicable == true)
        //            {
        //                objpostvoucher.VatApplicable = true;
        //                if (dt.VatInclusive == true)
        //                {
        //                    objpostvoucher.VatInc = true;
        //                }
        //                objpostvoucher.VEVAccountID = AdvVatId;
        //                objpostvoucher.VEVAmount = totalvatamount;
        //            }
        //            objpostvoucherTemp.Add(objpostvoucher);

        //            if (DTStudentTrans.TranDiscount == true && dt.DiscountPossible == true)
        //            {

        //                DiscountAmount = (dt.Amount * discschedule) / 100;
        //                await VoucherUpdateForTranDiscount(DTStudentTrans.AccountId, dt.DueDate, vtype, DiscountAmount, dt.Description, DTStudentTrans.TranDiscountSchedule, dt.Discount);
        //            }
        //            //await _IPostingManager.CreatePostingVoucher(dts);//await Http.PostAsJsonAsync("api/Inventory", dts);
        //            //int slno = 1;

        //            //await GetUniqueAccounts();
        //        }
        //        dts.objpostvoucherTemp = objpostvoucherTemp.ToList().ToArray();
        //        HttpResponseMessage response = await _IPostingManager.CreatePostingVoucher(dts, Con);//await Http.PostAsJsonAsync("api/Inventory", dts);

        //        if (response.IsSuccessStatusCode)
        //        {
        //            PopupLoading = false;
        //            PopupVisible = true;
        //            StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear, Con));
        //            StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear, Con)).ToList();
        //            GetFeeBalanceAggregate(StudFeeDetails);


        //        }
        //        else
        //        {
        //            PopupLoading = false;
        //            PopupSaveError = true;
        //        }
        //    }
        //}
        //}
    }

    public async Task DepostTranDiscount_Click()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure? You want to Depost");
        if (confirmed)
        {
            int feealloc = Convert.ToInt32(await _IPostingManager.FeeAllocChecking(AccountID, vtype, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Transportation"));
            if ((feealloc == 0))
            {
                dtsVoucher objdepost = new dtsVoucher();
                dtDeleteVoucher objdeletevoucher = new dtDeleteVoucher();
                objdeletevoucher.AccountId = AccountID;
                objdeletevoucher.VType = vtype;
                objdeletevoucher.StartDate = StatementFromDate.ToString("MM/dd/yyyy");
                objdeletevoucher.EndDate = StatementEndDate.ToString("MM/dd/yyyy");
                objdeletevoucher.Type = "Transportation";
                objdepost.objdepostvoucherTemp = objdeletevoucher;
                HttpResponseMessage msg = await _IPostingManager.DeletePostingVoucher(objdepost);
                if (msg.IsSuccessStatusCode)
                {
                    PopupLoading = false;
                    PopupDeVisible = true;
                    StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
                    StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();
                    GetFeeBalanceAggregate(StudFeeDetails);


                }

            }

            else
            {
                PopupSaveError = true;
            }
        }
    }
    //


    //Fee Edit
    public SfGrid<dtStudentFeeDetails> GridFee { get; set; }
    public IList<dtStudentFeeDetails> StudFeeDetailsEdit = new List<dtStudentFeeDetails>();
    public bool editng, IsVoucherAllocation = false, IsVUpdate = false, IsVisibleUpdateV = false, IsVoucherAllocationDelete = false, IsOpenUpdate = false, IsOpenUpdateFailed = false, IsOpenDelete = false, IsOpenDeleteFailed = false;
    public dtVoucher dttV = new dtVoucher();
    public dtVoucherEntry dttVE = new dtVoucherEntry();
    public dtsVoucher dttVMain = new dtsVoucher();
    int VoucherId, AdditionalFeeID;
    string FeeDetailsAmount;

    public async Task Edit_Click(string Vno)
    {
        StudFeeDetailsEdit = StudFeeDetails.Where(a => a.VNo == Vno).ToList();
        if (StudFeeDetailsEdit.FirstOrDefault().Allocated != 0)
        {
            //voucherallocation alread exist
        }
        else
        {
            editng = true;
        }
        if (StudFeeDetailsEdit.FirstOrDefault().VatType != "NoVat")
        {
            //edit and dlt not allow
        }
        else
        {
            editng = true;
        }
        //NavigationManager.NavigateTo(NavigationManager.BaseUri + "Register/" + BookMastID);
    }

    public async Task OnActionBegin(Syncfusion.Blazor.Grids.ActionEventArgs<dtStudentFeeDetails> args)
    {
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.BeginEdit)
        {
            if (args.RowData.Allocated != 0)
            {
                IsVoucherAllocation = true;
                args.Cancel = true;
            }
            if (args.RowData.VatType != "NoVat")
            {
                IsVoucherAllocation = true;
                args.Cancel = true;
            }

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Save)
        {
            IsVisibleUpdateV = true;
            //
            dttV.Amount = args.Data.FeeAmount;
            dttV.ID = args.Data.ID;
            dttV.ModifiedDate = DateTime.Today;
            dttV.ModifiedUserID = UserID;
            //
            dttVE.Amount = args.Data.FeeAmount;
            dttVE.ID = args.Data.ID;
            //

            dttVMain.voucher = dttV;
            dttVMain.voucherentry = dttVE;

        }
        if (args.RequestType == Syncfusion.Blazor.Grids.Action.Delete)
        {
            if (args.RowData.Allocated != 0)
            {
                IsVoucherAllocation = true;
                args.Cancel = true;
            }
            else
            {
                IsVoucherAllocationDelete = true;
                VoucherId = args.Data.ID;
                StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();

                //StudFeeDetails = StudFeeDetailsNew;
                //GridFee.Refresh();
            }

        }
        StudStatement = (await StudentMasterService.GetStatement(StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), AccountID, BranchID)).ToList();
        StudStatement = StudStatement.OrderBy(m => m.EffectiveDate).ThenByDescending(n => n.Debit).ThenByDescending(x => x.Credit).ToList();
        GetBalanceAggregate();
        await CalculateBalance();
    }
    public async Task VUpdateYes_Click()
    {
        dtsVoucher dtt1 = new dtsVoucher();
        dtt1 = dttVMain;
        HttpResponseMessage response = await _IPostingManager.UpdateFeeAmount(dtt1);
        if (response.IsSuccessStatusCode)
        {
            IsOpenUpdate = true;
            IsVisibleUpdateV = false;
        }
        else
        {
            IsOpenUpdateFailed = true;
            IsVisibleUpdateV = false;
        }
    }
    public async Task VUpdateNo_Click()
    {
        StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();

        IsVisibleUpdateV = false;
    }
    public async Task VDeleteYes_Click()
    {
        int id = VoucherId;
        HttpResponseMessage response = await _IPostingManager.DeleteFeeAmount(id);
        if (response.IsSuccessStatusCode)
        {
            IsOpenDelete = true;
            IsVoucherAllocationDelete = false;
        }
        else
        {
            IsOpenDeleteFailed = true;
            IsVoucherAllocationDelete = false;
        }
    }
    public async Task VDeleteNo_Click()
    {
        StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();

        //StudFeeDetails = StudFeeDetailsNew;
        //await GridFee.Refresh();
        IsVoucherAllocationDelete = false;
    }
    //
    // Additional Fee
    public dtAdditionalFee SelectedAdditionalFee = new dtAdditionalFee();
    public SfGrid<dtAdditionalFee> FeeGridAF { get; set; }

    public async Task onChangeAdditionalFeeCategory(Syncfusion.Blazor.DropDowns.ChangeEventArgs<string, dtAdditionalFee> args)
    {
        if (args.Value != "" && args.Value != null)
        {
            if (showedite == false)
            {
                //string Criteria = args.Value;
                SelectedAdditionalFee = args.ItemData;
                //await FeeGridAF.AddRecordAsync(SelectedAdditionalFee);
                FeeDetails.Amount = SelectedAdditionalFee.Amount;
                FeeDetails.PostTo = SelectedAdditionalFee.PostTo;
                FeeDetails.Type = SelectedAdditionalFee.Type;
                FeeDetails.Activity = SelectedAdditionalFee.Description;
                FeeDetailsAmount = FeeDetails.Amount.ToString();
                //await FeeGrid.Refresh();
                await InvokeAsync(StateHasChanged);
            }
        }
        showedite = false;
    }
    public void GetFeeBalanceAggregate(IList<dtStudentFeeDetails> StudFeeDetails)
    {
        // Here, you can calculate custom aggregate operations and return the result.
        foreach (var item in StudFeeDetails)
        {
            item.Balance = item.Debit - (-item.credit) - item.Paid;
        }

    }

    //

    //Search Click
    public bool popSearch = false;
    SfTextBox search;
    public SfGrid<dtoStudentRegisterDefault> gv_studentList { get; set; }

    public async Task BtnSearch_Click()
    {
        popSearch = true;
        //await InvokeAsync(StateHasChanged);
        //await Task.Yield();
    }
    public async Task OnInput(InputEventArgs args)
    {
        if (args.Value.Length >= 3)
        {
            //StudentList = StudentListSearch;
            this.gv_studentList.SearchAsync(args.Value);
            //gv_studentList.FocusAsync();
        }
    }
    public void CreatedHandler(object args)
    {
        //gv_studentList.SelectRowAsync(0,true);
        gv_studentList.FocusAsync();
        // Here, you can customize your code.
    }


    public async Task RowSelectingHandler(RowSelectingEventArgs<dtoStudentRegisterDefault> args)
    {
        AccountID = args.Data.AccountID;
        await Edit_Click();
        popSearch = false;
        await InvokeAsync(StateHasChanged);
    }
    public void onCreateSearch()
    {
        this.search.AddIconAsync("append", "e-upload-picture");
        //gv_studentList.FocusAsync();
        //gv_studentList.SelectRowAsync(0, true);
    }


    public async Task OnGo(int StudID)
    {
        AccountID = StudID;
        await Edit_Click();
        popSearch = false;
        await InvokeAsync(StateHasChanged);
    }
    public async Task OnShow(int id)
    {
        //_NavManager.NavigateTo(_NavManager.BaseUri + "SchoolInvoice/" + id);
        navigationManager.NavigateTo(navigationManager.BaseUri + "SchoolInvoice/" + id);
        await InvokeAsync(StateHasChanged);
    }

    public async Task<double> GetRowCounter(int? val)
    {
        var index = await gv_studentList.GetRowIndexByPrimaryKeyAsync(val);
        var currentPage = gv_studentList.PageSettings.CurrentPage;
        if (gv_studentList.AllowPaging && currentPage > 1)
        {
            index = (((currentPage - 1) * gv_studentList.PageSettings.PageSize) + index);
        }
        return index + 1;

    }
    public async Task TabSelected(Syncfusion.Blazor.Navigations.SelectEventArgs args)
    {
        if (args.SelectedIndex == 1)
        {
            GetSchoolTaxInvoice = await _IPostingManager.Getdatass(BranchID, CmbAccYear, AccountID);
        }
        else if (args.SelectedIndex == 2)
        {
            StudAdditionalPayment = (await StudentMasterService.GetAdditionalPayment(AccountID)).ToList();
            FeeDetails.Amount = 0.00M;
            FeeDetails.Activity = null;
        }
        else if (args.SelectedIndex == 3)
        {
            StudAdditionalDiscount = (await StudentMasterService.GetAdditionalDiscount(AccountID)).ToList();
            FeeDetails.Amount = 0.00M;
            FeeDetails.Activity = null;
        }

        else if (args.SelectedIndex == 4)
        {
            DTAccount = await StudentMasterService.GetDTAccount(AccountID);
            objParentID = DTAccount.Parent;

            DTStudent = await StudentMasterService.GetDTStudent(AccountID);

            DTStudentTrans = await StudentMasterService.GetDTStudentTrans(AccountID, BranchID, CmbAccYear);

            DTParent = await StudentMasterService.GetDTParent(Convert.ToInt32(objParentID));
            objStaffParent = DTParent.StaffParent;

            DTParentAccount = await StudentMasterService.GetDTAccount(Convert.ToInt32(objParentID));
            StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
            StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();
            GetFeeBalanceAggregate(StudFeeDetails);

            //StudAdditionalPayment = (await StudentMasterService.GetAdditionalPayment(AccountID, Con)).ToList();
            //StudAdditionalDiscount = (await StudentMasterService.GetAdditionalDiscount(AccountID, Con)).ToList();

            Fee = (await StudentMasterService.GetFee(CmbAccYear, BranchID)).ToList();
            Transport = (await StudentMasterService.GetTransport(CmbAccYear, BranchID)).ToList();
            Admission = (await StudentMasterService.GetAdmission(CmbAccYear, BranchID)).ToList();
            FeeDiscount = (await StudentMasterService.GetFeeDiscount(BranchID)).ToList();
            TranDiscount = (await StudentMasterService.GetFeeDiscount(BranchID)).ToList();
            StatementFromDate = Convert.ToDateTime(objAccYear.StartDate.ToString());
            //StatementEndDate = Convert.ToDateTime(objAccYear.EndDate.ToString());
            DateTime NextDate = Convert.ToDateTime(objAccYear.StartDate.ToString()).AddYears(1);
            StatementEndDate = NextDate.AddDays(-1);

        }

        else if (args.SelectedIndex == 5)
        {
            StudStatement = (await StudentMasterService.GetStatement(StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), AccountID, BranchID)).ToList();
            StudStatement = StudStatement.OrderBy(m => m.EffectiveDate).ThenByDescending(n => n.Debit).ThenByDescending(x => x.Credit).ToList();
            StudFeeRegisters = (await StudentService.GetParentStudentFeeWise(CmbAccYear, BranchID, "Student", Convert.ToInt32(AccountID), StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Studying")).ToList();
            await CalculateBalance();

        }
        else if (args.SelectedIndex == 6)
        {
            StudStatement = (await StudentMasterService.GetStatement(StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), AccountID, BranchID)).ToList();
            StudStatement = StudStatement.OrderBy(m => m.EffectiveDate).ThenByDescending(n => n.Debit).ThenByDescending(x => x.Credit).ToList();
            await CalculateBalance();

        }
    }
    public async Task DepostFeeDiscount_Click()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure? You want to Depost");
        if (confirmed)
        {
            int feealloc = Convert.ToInt32(await _IPostingManager.FeeAllocChecking(AccountID, vtype, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Fee"));
            if ((feealloc == 0))
            {
                dtsVoucher objdepost = new dtsVoucher();
                dtDeleteVoucher objdeletevoucher = new dtDeleteVoucher();
                objdeletevoucher.AccountId = AccountID;
                objdeletevoucher.VType = vtype;
                objdeletevoucher.StartDate = StatementFromDate.ToString("MM/dd/yyyy");
                objdeletevoucher.EndDate = StatementEndDate.ToString("MM/dd/yyyy");
                objdeletevoucher.Type = "FeeDiscount";
                objdeletevoucher.Discount = DTStudentTrans.DiscountSchedule;
                objdepost.objdepostvoucherTemp = objdeletevoucher;
                HttpResponseMessage msg = await _IPostingManager.DeletePostingVoucher(objdepost);
                if (msg.IsSuccessStatusCode)
                {
                    DTStudentTrans = await StudentMasterService.GetDTStudentTrans(AccountID, BranchID, CmbAccYear);
                    PopupLoading = false;
                    PopupDeVisible = true;
                    StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
                    StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();
                    GetFeeBalanceAggregate(StudFeeDetails);
                    DtoUserTrack dttrack = new DtoUserTrack();
                    dttrack.UserId = user;
                    dttrack.TableName = "Voucher";
                    dttrack.ActionDate = DateTime.Now;
                    dttrack.ModuleName = "Student";
                    dttrack.Reference = "College Portal";
                    dttrack.Reason = DTAccount.AccountCode + " DePost Success";

                    HttpResponseMessage msgTrack = await _IClassMaster.AddSaveUserTrack(dttrack);


                }

            }

            else
            {
                PopupSaveError = true;
            }
        }
    }
    public async Task DepostFeeDiscount_Click2()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure? You want to Depost");
        if (confirmed)
        {
            int feealloc = Convert.ToInt32(await _IPostingManager.FeeAllocChecking(AccountID, vtype, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Fee"));
            if ((feealloc == 0))
            {
                dtsVoucher objdepost = new dtsVoucher();
                dtDeleteVoucher objdeletevoucher = new dtDeleteVoucher();
                objdeletevoucher.AccountId = AccountID;
                objdeletevoucher.VType = vtype;
                objdeletevoucher.StartDate = StatementFromDate.ToString("MM/dd/yyyy");
                objdeletevoucher.EndDate = StatementEndDate.ToString("MM/dd/yyyy");
                objdeletevoucher.Type = "FeeDiscount2";
                objdeletevoucher.Discount = DTStudentTrans.DiscountSchedule2;
                objdepost.objdepostvoucherTemp = objdeletevoucher;
                HttpResponseMessage msg = await _IPostingManager.DeletePostingVoucher(objdepost);
                if (msg.IsSuccessStatusCode)
                {
                    DTStudentTrans = await StudentMasterService.GetDTStudentTrans(AccountID, BranchID, CmbAccYear);
                    PopupLoading = false;
                    PopupDeVisible = true;
                    StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
                    StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();
                    GetFeeBalanceAggregate(StudFeeDetails);
                    DtoUserTrack dttrack = new DtoUserTrack();
                    dttrack.UserId = user;
                    dttrack.TableName = "Voucher";
                    dttrack.ActionDate = DateTime.Now;
                    dttrack.ModuleName = "Student";
                    dttrack.Reference = "College Portal";
                    dttrack.Reason = DTAccount.AccountCode + "  Post Success";

                    HttpResponseMessage msgTrack = await _IClassMaster.AddSaveUserTrack(dttrack);


                }

            }

            else
            {
                PopupSaveError = true;
            }
        }
    }
    public async Task DepostFeeDiscount_Click3()
    {
        bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure? You want to Depost");
        if (confirmed)
        {
            int feealloc = Convert.ToInt32(await _IPostingManager.FeeAllocChecking(AccountID, vtype, StatementFromDate.ToString("MM/dd/yyyy"), StatementEndDate.ToString("MM/dd/yyyy"), "Fee"));
            if ((feealloc == 0))
            {
                dtsVoucher objdepost = new dtsVoucher();
                dtDeleteVoucher objdeletevoucher = new dtDeleteVoucher();
                objdeletevoucher.AccountId = AccountID;
                objdeletevoucher.VType = vtype;
                objdeletevoucher.StartDate = StatementFromDate.ToString("MM/dd/yyyy");
                objdeletevoucher.EndDate = StatementEndDate.ToString("MM/dd/yyyy");
                objdeletevoucher.Type = "FeeDiscount3";
                objdeletevoucher.Discount = DTStudentTrans.DiscountSchedule3;
                objdepost.objdepostvoucherTemp = objdeletevoucher;
                HttpResponseMessage msg = await _IPostingManager.DeletePostingVoucher(objdepost);
                if (msg.IsSuccessStatusCode)
                {
                    DTStudentTrans = await StudentMasterService.GetDTStudentTrans(AccountID, BranchID, CmbAccYear);
                    PopupLoading = false;
                    PopupDeVisible = true;
                    StudFeeSummary = (await _IPostingManager.GetFeeSummary(AccountID, BranchID, CmbAccYear));
                    StudFeeDetails = (await _IPostingManager.GetFeeDetails(AccountID, BranchID, CmbAccYear)).ToList();
                    GetFeeBalanceAggregate(StudFeeDetails);
                    DtoUserTrack dttrack = new DtoUserTrack();
                    dttrack.UserId = user;
                    dttrack.TableName = "Voucher";
                    dttrack.ActionDate = DateTime.Now;
                    dttrack.ModuleName = "Student";
                    dttrack.Reference = "College Portal";
                    dttrack.Reason = DTAccount.AccountCode + "  DePost Success";

                    HttpResponseMessage msgTrack = await _IClassMaster.AddSaveUserTrack(dttrack);


                }

            }

            else
            {
                PopupSaveError = true;
            }
        }
    }
    string uid;

    public async Task postfee()
    {
        string Type = "studentAdditionalFee";

        uid = Convert.ToString(UserID);
        //AddFees = (await _IPostingManager.GetAddFees(ID, DTStudentTrans.AcademicYear, BranchID));
        feeexist = Convert.ToInt32(await _IPostingManager.FeePostChecking(AccountID, 67, effect.ToString("MM/dd/yyyy"), FeeDetails.FromDate.ToString("MM/dd/yyyy"), "AdditionalPayment", FeeDetails.Activity));

        if (!(feeexist == 0))
        {
            PopupSaveError = true;
        }
        else
        {



            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure? You want to Post ");
            if (confirmed)
            {

                dtPostClass dts = new dtPostClass();
                dtStudentParam objParam = new dtStudentParam();


                objParam.Branchid = BranchID;
                //objParam.FromDate = FromDate;
                objParam.VDate = FeeDetails.FromDate;

                //objParam.ToDate = ToDate;
                objParam.AccountID = AccountID;
                objParam.AcademicYear = CmbAccYear;
                objParam.Amount = FeeDetails.Amount;



                objParam.Description = uid;



                objParam.Schedule = FeeDetails.Activity;
                objParam.Criteria = Type;
                dts.ParamEnrty = objParam;

                HttpResponseMessage msg = await _IPostingManager.poststudentdata(dts);

                if (msg.IsSuccessStatusCode)
                {
                    var jsonString = await msg.Content.ReadFromJsonAsync<dtError>();

                    if (jsonString.Error == null)
                    {
                        ImportMessage2 = "Post Success";

                        PopupDeVisibletrue = true;
                        DtoUserTrack dttrack = new DtoUserTrack();
                        dttrack.UserId = user;
                        dttrack.TableName = "Voucher";
                        dttrack.ActionDate = DateTime.Now;
                        dttrack.ModuleName = "Student";
                        dttrack.Reference = "College Portal";
                        dttrack.Reason = DTAccount.AccountCode + "  Additional fee post Success";

                        HttpResponseMessage msgTrack = await _IClassMaster.AddSaveUserTrack(dttrack);

                    }
                    else
                    {
                        ImportMessage2 = jsonString.Error;

                        PopupDeVisibletrue = true;

                    }



                }
            }

        }

        //isGridVisible = false;



    }
    public async Task AllStudent_Click()
    {
        try
        {
            if (ShowGlobalAll == false)
            {
                GlobalBtn = "ShowLess";
                if (globalStudentServ.flagStudentReceiptRefreshed == true)
                {
                    StudentList = globalStudentServ.GlobalStudentListOthers;
                    popSearch = true;

                }
                else
                {
                    StudentList = (await _IInvAccounts.GetStudentsAccountsReceiptGlobal(BranchID, "NotStudying"))!.ToList();

                    globalStudentServ.flagStudentReceiptRefreshed = true;
                    popSearch = true;

                }
                ShowGlobalAll = true;
            }
            else if (ShowGlobalAll == true)
            {
                GlobalBtn = "ShowOthers";
                if (globalStudentServ.flagStudentRegRefreshed == true)
                {
                    StudentList = globalStudentServ.GlobalStudentList;
                    popSearch = true;

                }
                else
                {
                    StudentList = (await Student.GetStudentsDefault(CmbAccYear, BranchID, Category, user))!.ToList();

                    globalStudentServ.flagStudentRegRefreshed = true;
                    popSearch = true;

                }
                ShowGlobalAll = false;
            }
        }
        catch (Exception ex)
        {
            this.ToastService.ShowToast(new ToastOption()
                {
                    Title = "Something went wrong...",
                    Content = ex.Message,
                    CssClass = "e-toast-danger",
                    Icon = "e-error toast-icons",
                    Timeout = 2000,
                    X = "Right",
                    Y = "Top",
                    CloseButton = true
                });
            Console.WriteLine(ex.Message);
        }
    }
    public async Task Refresh_Click()
    {
        try
        {
            if (ShowGlobalAll == true)
            {
                GlobalBtn = "ShowLess";
                StudentList = (await _IInvAccounts.GetStudentsAccountsReceiptGlobal(BranchID, "NotStudying"))!.ToList();
                globalStudentServ.flagStudentReceiptRefreshed = true;

                ShowGlobalAll = true;
                popSearch = true;
            }
            else if (ShowGlobalAll == false)
            {
                GlobalBtn = "ShowOther";
                StudentList = (await Student.GetStudentsDefault(CmbAccYear, BranchID, Category, user))!.ToList();
                globalStudentServ.flagStudentRegRefreshed = true;
                ShowGlobalAll = false;
                popSearch = true;
            }
        }
        catch (Exception ex)
        {
            this.ToastService.ShowToast(new ToastOption()
                {
                    Title = "Something went wrong...",
                    Content = ex.Message,
                    CssClass = "e-toast-danger",
                    Icon = "e-error toast-icons",
                    Timeout = 2000,
                    X = "Right",
                    Y = "Top",
                    CloseButton = true
                });
            Console.WriteLine(ex.Message);
        }
    }

    public async Task postdiscount()
    {
        string Type = "studentAdditionalDiscount";


        uid = Convert.ToString(UserID);
        //AddFees = (await _IPostingManager.GetAddFees(ID, DTStudentTrans.AcademicYear, BranchID));
        feeexist = Convert.ToInt32(await _IPostingManager.FeePostChecking(AccountID, 67, effect.ToString("MM/dd/yyyy"), FeeDetails.FromDate.ToString("MM/dd/yyyy"), "AdditionalPaymentDiscount", FeeDetails.Activity));

        if (!(feeexist == 0))
        {
            PopupSaveError = true;
        }
        else
        {


            bool confirmed = await JsRuntime.InvokeAsync<bool>("confirm", "Are you sure? You want to Post ");
            if (confirmed)
            {

                dtPostClass dts = new dtPostClass();
                dtStudentParam objParam = new dtStudentParam();


                objParam.Branchid = BranchID;
                //objParam.FromDate = FromDate;
                objParam.VDate = FeeDetails.FromDate;

                //objParam.ToDate = ToDate;
                objParam.AccountID = AccountID;
                objParam.Amount = FeeDetails.Amount;
                objParam.AcademicYear = CmbAccYear;


                objParam.Description = uid;

                objParam.Schedule = FeeDetails.Activity;
                objParam.Criteria = Type;
                dts.ParamEnrty = objParam;

                HttpResponseMessage msg = await _IPostingManager.poststudentdata(dts);

                if (msg.IsSuccessStatusCode)
                {
                    var jsonString = await msg.Content.ReadFromJsonAsync<dtError>();

                    if (jsonString.Error == null)
                    {
                        ImportMessage2 = "Post Success";

                        PopupDeVisibletrue = true;
                        DtoUserTrack dttrack = new DtoUserTrack();
                        dttrack.UserId = user;
                        dttrack.TableName = "Voucher";
                        dttrack.ActionDate = DateTime.Now;
                        dttrack.ModuleName = "Student";
                        dttrack.Reference = "College Portal";
                        dttrack.Reason = DTAccount.AccountCode + "  Additional discount post Success";

                        HttpResponseMessage msgTrack = await _IClassMaster.AddSaveUserTrack(dttrack);

                    }
                    else
                    {
                        ImportMessage2 = jsonString.Error;

                        PopupDeVisibletrue = true;

                    }



                }
            }


        }
    }

}



