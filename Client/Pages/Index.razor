@page "/Index"

@using System.Web
@using Newtonsoft.Json
@inject OrisonCollegePortal.Client.Services.GeneralServices _generalService
@using OrisonCollegePortal.Shared.Entities.General
@layout LoginLayout
@inject HttpClient http
@inject IJSRuntime JsRuntime
@inject OrisonCollegePortal.Client.Contracts.IUserLoginManager _IUserLoginManager
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager _NavManager
@using OrisonCollegePortal.Client.Pages.Loading

<LoadingScreen></LoadingScreen>

@code {
    string? HomeUrl;
    IEnumerable<DtoLoginModel> info = new List<DtoLoginModel>();
    DtoLoginModel infoRedirect = new DtoLoginModel();
    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetLoginInfo();
            if (infoRedirect.ID != 0 && infoRedirect.BranchID != 0)
            {
                info = (await _IUserLoginManager.GetUserData(infoRedirect.ID, infoRedirect.BranchID))!.ToList();
                await sessionStorage.RemoveItemAsync("token");
                info.First().BranchID = infoRedirect.BranchID;
                await SetLoginInfo();
                HomeUrl = await _generalService.GetURL("Home") ?? "";
                if (info != null)
                {
                    if (info.FirstOrDefault()?.ID != 0)
                    {
                        _NavManager.NavigateTo("StudnetRegister");
                    }
                    else
                        _NavManager.NavigateTo(HomeUrl);
                }
                else
                    _NavManager.NavigateTo(HomeUrl);
            }
            else
            {
                // HomeUrl = await _generalService.GetURL("Home") ?? "";
                // _NavManager.NavigateTo(HomeUrl ?? "");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }
    private async Task GetLoginInfo()
    {
        try
        {
            string param = await http.GetStringAsync("api/Encryption/Decrypt?Text=" + HttpUtility.UrlEncode(await sessionStorage.GetItemAsync<string>("token")));
            if (!string.IsNullOrEmpty(param))
                infoRedirect = JsonConvert.DeserializeObject<DtoLoginModel>(param)!;
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
           // await JsRuntime.InvokeVoidAsync("window.history.back");
        }
    }
    private async Task SetLoginInfo()
    {
        try
        {
            string jsonString = JsonConvert.SerializeObject(info.FirstOrDefault());
            string param = await http.GetStringAsync("API/Encryption/Encrypt?Text=" + jsonString);
            if (!string.IsNullOrEmpty(param))
                await sessionStorage.SetItemAsync("token", param);
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
}
